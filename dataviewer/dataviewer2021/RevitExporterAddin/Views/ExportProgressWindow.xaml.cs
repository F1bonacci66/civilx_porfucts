using System;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;

namespace RevitExporterAddin.Views
{
    public partial class ExportProgressWindow : Window
    {
        private bool _isCancelled = false;
        private DateTime _startTime;
        private DispatcherTimer _timer;

        public ExportProgressWindow()
        {
            InitializeComponent();
            _startTime = DateTime.Now;
            StartTimer();
        }

        public bool IsCancelled => _isCancelled;

        private void StartTimer()
        {
            _timer = new DispatcherTimer();
            _timer.Interval = TimeSpan.FromSeconds(1);
            _timer.Tick += Timer_Tick;
            _timer.Start();
        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            var elapsed = DateTime.Now - _startTime;
            ElapsedTimeText.Text = FormatTime(elapsed);
        }

        private string FormatTime(TimeSpan timeSpan)
        {
            if (timeSpan.TotalHours >= 1)
            {
                return $"{timeSpan.Hours:D2}:{timeSpan.Minutes:D2}:{timeSpan.Seconds:D2}";
            }
            else
            {
                return $"{timeSpan.Minutes:D2}:{timeSpan.Seconds:D2}";
            }
        }

        public void SetTotalModels(int totalModels)
        {
            Dispatcher.Invoke(() =>
            {
                TotalModelsText.Text = totalModels.ToString();
                RemainingModelsText.Text = totalModels.ToString();
            });
        }

        public void UpdateProgress(int processedModels, int totalModels, string currentModel, double currentModelProgress)
        {
            try
            {
                Dispatcher.Invoke(() =>
                {
                    try
                    {
                        ProcessedModelsText.Text = processedModels.ToString();
                        RemainingModelsText.Text = (totalModels - processedModels).ToString();
                        CurrentModelText.Text = currentModel;
                        CurrentModelProgressBar.Value = currentModelProgress;
                        ProgressText.Text = $"{currentModelProgress:F1}%";
                    }
                    catch (Exception ex)
                    {
                        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                        System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI: {ex.Message}");
                    }
                });
            }
            catch (Exception ex)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É Dispatcher
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ Dispatcher: {ex.Message}");
            }
        }


        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã
            _isCancelled = true;
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            if (_timer != null)
            {
                _timer.Stop();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            Dispatcher.Invoke(() =>
            {
                CancelButton.IsEnabled = false;
                CancelButton.Content = "–û—Ç–º–µ–Ω–∞...";
                CancelButton.Background = System.Windows.Media.Brushes.Gray;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
                CurrentModelText.Text = "–û—Ç–º–µ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞...";
                CurrentModelText.Foreground = System.Windows.Media.Brushes.Red;
            });
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            _isCancelled = true;
            if (_timer != null)
            {
                _timer.Stop();
            }
            base.OnClosing(e);
        }

        private void WriteDetailedLog(string message)
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –ª–æ–≥—É –∏–∑ MainWindow
                var mainWindow = Application.Current.MainWindow as MainWindow;
                if (mainWindow != null)
                {
                    mainWindow.WriteDetailedLog(message);
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥: {ex.Message}");
            }
        }

        public void CompleteExport()
        {
            try
            {
                System.Diagnostics.Debug.WriteLine("üîç ExportProgressWindow.CompleteExport() - –ù–ê–ß–ê–õ–û");
                WriteDetailedLog("üîç ExportProgressWindow.CompleteExport() - –ù–ê–ß–ê–õ–û");
                WriteDetailedLog($"üîç ExportProgressWindow.CompleteExport() - Thread ID: {System.Threading.Thread.CurrentThread.ManagedThreadId}");
                WriteDetailedLog($"üîç ExportProgressWindow.CompleteExport() - IsCancelled: {_isCancelled}");
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                if (_timer != null)
                {
                    WriteDetailedLog("üîç ExportProgressWindow.CompleteExport() - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä");
                    _timer.Stop();
                    System.Diagnostics.Debug.WriteLine("üîç ExportProgressWindow.CompleteExport() - —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    WriteDetailedLog("üîç ExportProgressWindow.CompleteExport() - —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                }
                else
                {
                    WriteDetailedLog("üîç ExportProgressWindow.CompleteExport() - —Ç–∞–π–º–µ—Ä —É–∂–µ null");
                }

                WriteDetailedLog("üîç ExportProgressWindow.CompleteExport() - –Ω–∞—á–∏–Ω–∞–µ–º Dispatcher.Invoke");
                Dispatcher.Invoke(() =>
                {
                    try
                    {
                        WriteDetailedLog("üîç ExportProgressWindow.CompleteExport() - –í–ù–£–¢–†–ò Dispatcher.Invoke");
                        System.Diagnostics.Debug.WriteLine($"üîç ExportProgressWindow.CompleteExport() - –≤ Dispatcher.Invoke, _isCancelled = {_isCancelled}");
                        WriteDetailedLog($"üîç ExportProgressWindow.CompleteExport() - –≤ Dispatcher.Invoke, _isCancelled = {_isCancelled}");
                        WriteDetailedLog($"üîç ExportProgressWindow.CompleteExport() - UI Thread ID: {System.Threading.Thread.CurrentThread.ManagedThreadId}");
                        
                        if (_isCancelled)
                        {
                            // –ï—Å–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–∞
                            System.Diagnostics.Debug.WriteLine("üîç ExportProgressWindow.CompleteExport() - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã");
                            WriteDetailedLog("üîç ExportProgressWindow.CompleteExport() - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã");
                            CurrentModelText.Text = "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω!";
                            CurrentModelText.Foreground = System.Windows.Media.Brushes.Red;
                            CancelButton.Content = "–ó–∞–∫—Ä—ã—Ç—å";
                            CancelButton.IsEnabled = true;
                            CancelButton.Background = System.Windows.Media.Brushes.Gray;
                        }
                        else
                        {
                            // –ï—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ
                            System.Diagnostics.Debug.WriteLine("üîç ExportProgressWindow.CompleteExport() - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è");
                            WriteDetailedLog("üîç ExportProgressWindow.CompleteExport() - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è");
                            CurrentModelText.Text = "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!";
                            CurrentModelText.Foreground = System.Windows.Media.Brushes.Green;
                            CurrentModelProgressBar.Value = 100;
                            ProgressText.Text = "100%";
                            CancelButton.Content = "–ó–∞–∫—Ä—ã—Ç—å";
                            CancelButton.IsEnabled = true;
                            CancelButton.Background = System.Windows.Media.Brushes.Green;
                        }
                        
                        WriteDetailedLog("üîç ExportProgressWindow.CompleteExport() - –ù–ê–°–¢–†–û–ô–ö–ê –ö–ù–û–ü–ö–ò");
                        System.Diagnostics.Debug.WriteLine("üîç ExportProgressWindow.CompleteExport() - –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏");
                        WriteDetailedLog("üîç ExportProgressWindow.CompleteExport() - –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏");
                        
                        WriteDetailedLog("üîç ExportProgressWindow.CompleteExport() - –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞");
                        // –ü–µ—Ä–µ–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å"
                        CancelButton.Click -= CancelButton_Click;
                        
                        WriteDetailedLog("üîç ExportProgressWindow.CompleteExport() - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫");
                        CancelButton.Click += (s, e) => 
                        {
                            WriteDetailedLog("üîç ExportProgressWindow - –ö–ù–û–ü–ö–ê '–ó–ê–ö–†–´–¢–¨' –ù–ê–ñ–ê–¢–ê");
                            System.Diagnostics.Debug.WriteLine("üîç ExportProgressWindow - –∫–Ω–æ–ø–∫–∞ '–ó–∞–∫—Ä—ã—Ç—å' –Ω–∞–∂–∞—Ç–∞");
                            WriteDetailedLog("üîç ExportProgressWindow - –∫–Ω–æ–ø–∫–∞ '–ó–∞–∫—Ä—ã—Ç—å' –Ω–∞–∂–∞—Ç–∞");
                            WriteDetailedLog("üîç ExportProgressWindow - –≤—ã–∑—ã–≤–∞–µ–º Close()");
                            Close();
                            WriteDetailedLog("üîç ExportProgressWindow - Close() –≤—ã–ø–æ–ª–Ω–µ–Ω");
                        };
                        WriteDetailedLog("üîç ExportProgressWindow.CompleteExport() - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
                        
                        System.Diagnostics.Debug.WriteLine("üîç ExportProgressWindow.CompleteExport() - Dispatcher.Invoke –∑–∞–≤–µ—Ä—à–µ–Ω");
                        WriteDetailedLog("üîç ExportProgressWindow.CompleteExport() - Dispatcher.Invoke –∑–∞–≤–µ—Ä—à–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        System.Diagnostics.Debug.WriteLine($"‚ùå ExportProgressWindow.CompleteExport() - –æ—à–∏–±–∫–∞ –≤ Dispatcher.Invoke: {ex.Message}");
                        System.Diagnostics.Debug.WriteLine($"‚ùå StackTrace: {ex.StackTrace}");
                        WriteDetailedLog($"‚ùå ExportProgressWindow.CompleteExport() - –æ—à–∏–±–∫–∞ –≤ Dispatcher.Invoke: {ex.Message}");
                        WriteDetailedLog($"‚ùå StackTrace: {ex.StackTrace}");
                    }
                });
                
                System.Diagnostics.Debug.WriteLine("üîç ExportProgressWindow.CompleteExport() - –ó–ê–í–ï–†–®–ï–ù");
                WriteDetailedLog("üîç ExportProgressWindow.CompleteExport() - –ó–ê–í–ï–†–®–ï–ù");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå ExportProgressWindow.CompleteExport() - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex.Message}");
                System.Diagnostics.Debug.WriteLine($"‚ùå StackTrace: {ex.StackTrace}");
                WriteDetailedLog($"‚ùå ExportProgressWindow.CompleteExport() - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex.Message}");
                WriteDetailedLog($"‚ùå StackTrace: {ex.StackTrace}");
            }
        }
    }
}
