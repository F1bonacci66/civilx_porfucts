using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Autodesk.Revit.DB;
using RevitExporterAddin.Models;

namespace RevitExporterAddin.Services
{
    public class RevitDataReader
    {
        private UnitConverter _unitConverter;

        public List<RevitElementData> ExtractElementsFromDocumentWithFilters(Document document, string modelName, List<string> selectedCategories, IProgress<string> progress = null)
        {
            var result = new List<RevitElementData>();

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if (document == null)
                {
                    throw new ArgumentNullException(nameof(document), "–î–æ–∫—É–º–µ–Ω—Ç Revit –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                }

                if (string.IsNullOrEmpty(modelName))
                {
                    throw new ArgumentException("–ò–º—è –º–æ–¥–µ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(modelName));
                }

                if (selectedCategories == null || selectedCategories.Count == 0)
                {
                    throw new ArgumentException("–°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(selectedCategories));
                }

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
                _unitConverter = new UnitConverter(document);
                
                if (progress != null)
                {
                    progress.Report(string.Format("–°–∫–∞–Ω–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π: {0}", modelName));
                    progress.Report(string.Format("–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: {0}", _unitConverter.GetUnitsInfo()));
                    progress.Report(string.Format("–í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {0}", selectedCategories.Count));
                }

                // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                var collector = new FilteredElementCollector(document);
                
                // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–≤–∏–¥—ã, –ª–∏—Å—Ç—ã, –∏ —Ç.–¥.)
                collector.WhereElementIsNotElementType()
                        .WhereElementIsViewIndependent();

                var elements = collector.ToElements();
                
                if (progress != null)
                    progress.Report(string.Format("–ù–∞–π–¥–µ–Ω–æ {0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", elements.Count));

                // –§–∏–ª—å—Ç—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                var filteredElements = new List<Element>();
                foreach (var element in elements)
                {
                    var elementCategory = GetElementCategory(element);
                    if (selectedCategories.Contains(elementCategory))
                    {
                        filteredElements.Add(element);
                    }
                }

                if (progress != null)
                    progress.Report(string.Format("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", filteredElements.Count));

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
                for (int i = 0; i < filteredElements.Count; i++)
                {
                    var element = filteredElements[i];
                    
                    if (progress != null && i % 100 == 0)
                    {
                        progress.Report(string.Format("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç {0} –∏–∑ {1}", i + 1, filteredElements.Count));
                    }

                    try
                    {
                        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
                        string category = GetElementCategory(element);
                        if (string.IsNullOrEmpty(category))
                            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

                        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞
                        var parameters = GetElementParameters(element);
                        if (parameters == null || parameters.Count == 0)
                            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

                        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                        foreach (var param in parameters)
                        {
                            var elementData = new RevitElementData
                            {
                                ModelName = modelName,
                                ElementId = element.Id.IntegerValue,
                                Category = category,
                                ParameterName = param.Key,
                                ParameterValue = param.Value
                            };
                            result.Add(elementData);
                        }
                    }
                    catch (Exception ex)
                    {
                        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        if (progress != null)
                        {
                            progress.Report(string.Format("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ {0}: {1}", element.Id, ex.Message));
                        }
                    }
                }

                if (progress != null)
                    progress.Report(string.Format("–ò–∑–≤–ª–µ—á–µ–Ω–æ {0} –∑–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö –∏–∑ {1} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", result.Count, filteredElements.Count));

                return result;
            }
            catch (Exception ex)
            {
                if (progress != null)
                    progress.Report(string.Format("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {0}", ex.Message));
                throw;
            }
        }

        public List<RevitElementData> ExtractElementsFromDocumentWithFilter(Document document, string modelName, Autodesk.Revit.DB.ElementFilter categoryFilter, IProgress<string> progress = null, Func<bool> cancellationToken = null, Action<string> detailedLogger = null, List<string> nonFilterableCategories = null)
        {
            var result = new List<RevitElementData>();

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if (document == null)
                {
                    throw new ArgumentNullException(nameof(document), "–î–æ–∫—É–º–µ–Ω—Ç Revit –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                }

                if (string.IsNullOrEmpty(modelName))
                {
                    throw new ArgumentException("–ò–º—è –º–æ–¥–µ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(modelName));
                }

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
                _unitConverter = new UnitConverter(document);
                
                if (progress != null)
                {
                    progress.Report(string.Format("–°–∫–∞–Ω–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π: {0}", modelName));
                    progress.Report(string.Format("–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: {0}", _unitConverter.GetUnitsInfo()));
                }

                // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
                var collector = new FilteredElementCollector(document);
                
                // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–≤–∏–¥—ã, –ª–∏—Å—Ç—ã, –∏ —Ç.–¥.)
                collector.WhereElementIsNotElementType()
                        .WhereElementIsViewIndependent();

                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if (categoryFilter != null)
                {
                    collector.WherePasses(categoryFilter);
                    detailedLogger?.Invoke($"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —É—Ä–æ–≤–Ω–µ Revit API");
                }
                else
                {
                    // –ï—Å–ª–∏ –Ω–µ—Ç API-—Ñ–∏–ª—å—Ç—Ä–∞, –Ω–æ –µ—Å—Ç—å –Ω–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
                    if (nonFilterableCategories != null && nonFilterableCategories.Count > 0)
                    {
                        detailedLogger?.Invoke($"‚ö†Ô∏è –ù–µ—Ç API-—Ñ–∏–ª—å—Ç—Ä–∞, –Ω–æ –µ—Å—Ç—å –Ω–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö");
                        // –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä - –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    }
                    else
                    {
                        detailedLogger?.Invoke($"‚ö†Ô∏è –§–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã");
                    }
                }

                var elements = collector.ToElements();
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —ç–ª–µ–º–µ–Ω—Ç—ã
                if (nonFilterableCategories != null && nonFilterableCategories.Count > 0)
                {
                    detailedLogger?.Invoke($"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {string.Join(", ", nonFilterableCategories)}");
                    
                    var additionalElements = new List<Element>();
                    
                    foreach (var categoryName in nonFilterableCategories)
                    {
                        var categoryElements = GetElementsByNonFilterableCategory(document, categoryName);
                        additionalElements.AddRange(categoryElements);
                        detailedLogger?.Invoke($"  ‚Ä¢ {categoryName}: –Ω–∞–π–¥–µ–Ω–æ {categoryElements.Count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
                    }
                    
                    // –ï—Å–ª–∏ –Ω–µ—Ç API-—Ñ–∏–ª—å—Ç—Ä–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    if (categoryFilter == null)
                    {
                        elements = additionalElements;
                        detailedLogger?.Invoke($"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {elements.Count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
                    }
                    else
                    {
                        elements = elements.Concat(additionalElements).ToList();
                        detailedLogger?.Invoke($"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ {additionalElements.Count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –Ω–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
                    }
                }
                
                if (progress != null)
                    progress.Report(string.Format("–ù–∞–π–¥–µ–Ω–æ {0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", elements.Count));

                detailedLogger?.Invoke($"üìä –ù–∞–π–¥–µ–Ω–æ {elements.Count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ —É—Ä–æ–≤–Ω–µ API)");
                detailedLogger?.Invoke($"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —à–∞–≥–æ–º 500...");

                int processedCount = 0;
                foreach (Element element in elements)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –∫–∞–∂–¥—ã–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    if (cancellationToken != null && processedCount % 10 == 0 && cancellationToken())
                    {
                        if (progress != null)
                            progress.Report("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
                        return result;
                    }
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 500 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    if (processedCount % 500 == 0 && processedCount > 0)
                    {
                        detailedLogger?.Invoke($"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processedCount} –∏–∑ {elements.Count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
                    }
                    
                    try
                    {
                        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
                        string category = GetElementCategory(element);

                        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞
                        var parameters = GetElementParameters(element);

                        // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π RevitElementData –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                        foreach (var param in parameters)
                        {
                            var elementData = new RevitElementData
                            {
                                ModelName = modelName,
                                ElementId = element.Id.IntegerValue,
                                Category = category,
                                ParameterName = param.Key,
                                ParameterValue = param.Value
                            };

                            result.Add(elementData);
                        }
                        processedCount++;
                    }
                    catch (Exception elementEx)
                    {
                        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                        if (progress != null)
                            progress.Report(string.Format("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ {0}: {1}", element.Id.IntegerValue, elementEx.Message));
                    }
                }

                if (progress != null)
                    progress.Report(string.Format("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò–∑–≤–ª–µ—á–µ–Ω–æ {0} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ {1} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", result.Count, processedCount));
                
                detailedLogger?.Invoke($"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
                detailedLogger?.Invoke($"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
                detailedLogger?.Invoke($"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {processedCount}");
                detailedLogger?.Invoke($"  ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {result.Count}");
                detailedLogger?.Invoke($"  ‚Ä¢ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {DateTime.Now:yyyy-MM-dd HH:mm:ss.fff}");

            }
            catch (Exception ex)
            {
                if (progress != null)
                    progress.Report(string.Format("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {0}", ex.Message));
                throw;
            }

            return result;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –Ω–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (view-—ç–ª–µ–º–µ–Ω—Ç—ã)
        /// </summary>
        private List<Element> GetElementsByNonFilterableCategory(Document document, string categoryName)
        {
            var elements = new List<Element>();
            
            try
            {
                var collector = new FilteredElementCollector(document);
                
                switch (categoryName.ToLower())
                {
                    case "–ª–∏—Å—Ç—ã":
                    case "–ª–∏—Å—Ç":
                    case "sheets":
                    case "sheet":
                        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
                        elements = collector.OfClass(typeof(ViewSheet)).ToElements().ToList();
                        break;
                        
                    case "—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏":
                    case "—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è":
                    case "schedules":
                    case "schedule":
                        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        elements = collector.OfClass(typeof(ViewSchedule)).ToElements().ToList();
                        break;
                        
                    case "–≤–∏–¥—ã":
                    case "–≤–∏–¥":
                    case "views":
                    case "view":
                        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥—ã (–∫—Ä–æ–º–µ –ª–∏—Å—Ç–æ–≤ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π)
                        elements = collector.OfClass(typeof(View)).ToElements()
                            .Where(v => !(v is ViewSheet) && !(v is ViewSchedule)).ToList();
                        break;
                        
                    case "–ª–∏–Ω–∏–∏":
                    case "–ª–∏–Ω–∏—è":
                    case "lines":
                    case "line":
                        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏–Ω–∏–∏ (–º–æ–¥–µ–ª—å–Ω—ã–µ –∏ –¥–µ—Ç–∞–ª–∏—Ä–æ–≤–æ—á–Ω—ã–µ)
                        var modelLines = collector.OfClass(typeof(ModelLine)).ToElements().ToList();
                        var detailLines = collector.OfClass(typeof(DetailLine)).ToElements().ToList();
                        elements = modelLines.Concat(detailLines).ToList();
                        break;
                        
                    case "–∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏":
                    case "–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è":
                    case "annotations":
                    case "annotation":
                        // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                        elements = collector.OfClass(typeof(TextNote)).ToElements()
                            .Concat(collector.OfClass(typeof(Dimension)).ToElements())
                            .Concat(collector.OfClass(typeof(IndependentTag)).ToElements())
                            .ToList();
                        break;
                        
                    default:
                        // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                        break;
                }
            }
            catch (Exception ex)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{categoryName}': {ex.Message}");
            }
            
            return elements;
        }

        public List<RevitElementData> ExtractElementsFromDocument(Document document, string modelName, IProgress<string> progress = null, Func<bool> cancellationToken = null, Action<string> detailedLogger = null)
        {
            var result = new List<RevitElementData>();

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if (document == null)
                {
                    throw new ArgumentNullException(nameof(document), "–î–æ–∫—É–º–µ–Ω—Ç Revit –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                }

                if (string.IsNullOrEmpty(modelName))
                {
                    throw new ArgumentException("–ò–º—è –º–æ–¥–µ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(modelName));
                }

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
                _unitConverter = new UnitConverter(document);
                
                if (progress != null)
                {
                    progress.Report(string.Format("–°–∫–∞–Ω–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {0}", modelName));
                    progress.Report(string.Format("–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: {0}", _unitConverter.GetUnitsInfo()));
                }

                // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                var collector = new FilteredElementCollector(document);
                
                // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–≤–∏–¥—ã, –ª–∏—Å—Ç—ã, –∏ —Ç.–¥.)
                collector.WhereElementIsNotElementType()
                        .WhereElementIsViewIndependent();

                var elements = collector.ToElements();
                
                if (progress != null)
                    progress.Report(string.Format("–ù–∞–π–¥–µ–Ω–æ {0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", elements.Count));

                detailedLogger?.Invoke($"üìä –ù–∞–π–¥–µ–Ω–æ {elements.Count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
                detailedLogger?.Invoke($"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —à–∞–≥–æ–º 500...");

                int processedCount = 0;
                foreach (Element element in elements)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –∫–∞–∂–¥—ã–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    if (cancellationToken != null && processedCount % 10 == 0 && cancellationToken())
                    {
                        if (progress != null)
                            progress.Report("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
                        return result;
                    }
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 500 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    if (processedCount % 500 == 0 && processedCount > 0)
                    {
                        detailedLogger?.Invoke($"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processedCount} –∏–∑ {elements.Count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
                    }
                    
                    try
                    {
                        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
                        string category = GetElementCategory(element);
                        if (string.IsNullOrEmpty(category))
                            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

                        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞
                        var parameters = GetElementParameters(element);
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
                        foreach (var param in parameters)
                        {
                            result.Add(new RevitElementData
                            {
                                ModelName = modelName,
                                ElementId = element.Id.IntegerValue,
                                Category = category,
                                ParameterName = param.Key,
                                ParameterValue = param.Value
                            });
                        }

                        processedCount++;
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        if (processedCount % 100 == 0 && progress != null)
                        {
                            progress.Report(string.Format("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {0} –∏–∑ {1} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", processedCount, elements.Count));
                        }
                    }
                    catch (Exception elementEx)
                    {
                        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                        if (progress != null)
                            progress.Report(string.Format("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ {0}: {1}", element.Id.IntegerValue, elementEx.Message));
                    }
                }

                if (progress != null)
                    progress.Report(string.Format("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò–∑–≤–ª–µ—á–µ–Ω–æ {0} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ {1} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", result.Count, processedCount));
                
                detailedLogger?.Invoke($"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
                detailedLogger?.Invoke($"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
                detailedLogger?.Invoke($"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {processedCount}");
                detailedLogger?.Invoke($"  ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {result.Count}");
                detailedLogger?.Invoke($"  ‚Ä¢ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {DateTime.Now:yyyy-MM-dd HH:mm:ss.fff}");

            }
            catch (Exception ex)
            {
                if (progress != null)
                    progress.Report(string.Format("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {0}", ex.Message));
                throw;
            }

            return result;
        }

        private string GetElementCategory(Element element)
        {
            try
            {
                if (element.Category != null)
                {
                    return element.Category.Name;
                }
                
                // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–ü—Ä–æ—á–µ–µ"
                return "–ü—Ä–æ—á–µ–µ";
            }
            catch
            {
                return "–ü—Ä–æ—á–µ–µ";
            }
        }

        private Dictionary<string, string> GetElementParameters(Element element)
        {
            var parameters = new Dictionary<string, string>();

            try
            {
                // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ã—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞
                foreach (Parameter param in element.Parameters)
                {
                    try
                    {
                        if (param != null && param.Definition != null)
                        {
                            string paramName = param.Definition.Name;
                            string paramValue = GetParameterValue(param);
                            
                            if (!string.IsNullOrEmpty(paramName) && !string.IsNullOrEmpty(paramValue))
                            {
                                AddParameter(parameters, paramName, paramValue);
                            }
                        }
                    }
                    catch
                    {
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å
                        continue;
                    }
                }

                // 2. –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
                try
                {
                    var elementType = element.Document.GetElement(element.GetTypeId());
                    if (elementType != null)
                    {
                        foreach (Parameter param in elementType.Parameters)
                        {
                            try
                            {
                                if (param != null && param.Definition != null)
                                {
                                    string paramName = "Type_" + param.Definition.Name;
                                    string paramValue = GetParameterValue(param);
                                    
                                    if (!string.IsNullOrEmpty(paramName) && !string.IsNullOrEmpty(paramValue))
                                    {
                                        AddParameter(parameters, paramName, paramValue);
                                    }
                                }
                            }
                            catch
                            {
                                continue;
                            }
                        }
                    }
                }
                catch
                {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–∏–ø–∞
                }

                // 3. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (BuiltInParameter)
                try
                {
                    var builtInParams = Enum.GetValues(typeof(BuiltInParameter)).Cast<BuiltInParameter>();
                    foreach (var builtInParam in builtInParams)
                    {
                        try
                        {
                            var param = element.get_Parameter(builtInParam);
                            if (param != null && param.HasValue)
                            {
                                string paramName = "BuiltIn_" + builtInParam.ToString();
                                string paramValue = GetParameterValue(param);
                                
                                if (!string.IsNullOrEmpty(paramValue))
                                {
                                    AddParameter(parameters, paramName, paramValue);
                                }
                            }
                        }
                        catch
                        {
                            continue;
                        }
                    }
                }
                catch
                {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                }

                // 4. –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                GetSpecificElementParameters(element, parameters);

                // 5. –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
                parameters["ElementId"] = element.Id.IntegerValue.ToString();
                parameters["ElementName"] = element.Name ?? "Unnamed";
                parameters["ElementClass"] = element.GetType().Name;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                try
                {
                    var elementType = element.Document.GetElement(element.GetTypeId());
                    if (elementType != null)
                    {
                        parameters["TypeName"] = elementType.Name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø";
                        parameters["TypeId"] = element.GetTypeId().IntegerValue.ToString();
                    }
                }
                catch
                {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞
                }
            }
            catch
            {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                parameters["ElementId"] = element.Id.IntegerValue.ToString();
                parameters["ElementName"] = element.Name ?? "Unnamed";
                parameters["Error"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞";
            }

            return parameters;
        }

        private string GetParameterValue(Parameter param)
        {
            try
            {
                if (param == null || !param.HasValue)
                {
                    return string.Empty;
                }

                switch (param.StorageType)
                {
                    case StorageType.Double:
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        return _unitConverter.ConvertToDisplayUnits(param.AsDouble(), param);
                    
                    case StorageType.Integer:
                        return param.AsInteger().ToString();
                    
                    case StorageType.String:
                        return param.AsString() ?? string.Empty;
                    
                    case StorageType.ElementId:
                        var elementId = param.AsElementId();
                        if (elementId != null && elementId.IntegerValue > 0)
                        {
                            try
                            {
                                var referencedElement = param.Element.Document.GetElement(elementId);
                                return referencedElement != null ? referencedElement.Name ?? elementId.IntegerValue.ToString() : elementId.IntegerValue.ToString();
                            }
                            catch
                            {
                                return elementId.IntegerValue.ToString();
                            }
                        }
                        return string.Empty;
                    
                    default:
                        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        var displayValue = param.AsValueString();
                        if (!string.IsNullOrEmpty(displayValue))
                        {
                            return displayValue;
                        }
                        
                        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                        try
                        {
                            if (param.AsDouble() != 0)
                            {
                                return _unitConverter.ConvertToDisplayUnits(param.AsDouble(), param);
                            }
                        }
                        catch
                        {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                        }
                        
                        return string.Empty;
                }
            }
            catch
            {
                return string.Empty;
            }
        }

        /// <summary>
        /// –î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ —Å–ª–æ–≤–∞—Ä—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        /// </summary>
        private void AddParameter(Dictionary<string, string> parameters, string paramName, string paramValue)
        {
            if (string.IsNullOrEmpty(paramName) || string.IsNullOrEmpty(paramValue))
                return;

            // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
            string uniqueName = paramName;
            int counter = 1;
            while (parameters.ContainsKey(uniqueName))
            {
                uniqueName = string.Format("{0}_{1}", paramName, counter);
                counter++;
            }
            
            parameters[uniqueName] = paramValue;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        /// </summary>
        private void GetSpecificElementParameters(Element element, Dictionary<string, string> parameters)
        {
            try
            {
                // –û–±—â–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                GetElementGeometry(element, parameters);
                GetElementLocation(element, parameters);
                GetElementBoundingBox(element, parameters);

                // –î–ª—è —Å—Ç–µ–Ω
                if (element is Wall wall)
                {
                    try
                    {
                        var location = wall.Location as LocationCurve;
                        if (location != null)
                        {
                            var curve = location.Curve;
                            if (curve != null)
                            {
                                AddParameter(parameters, "Wall_Length", curve.Length.ToString("F3"));
                                
                                // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å—Ç–µ–Ω—ã
                                var startPoint = curve.GetEndPoint(0);
                                var endPoint = curve.GetEndPoint(1);
                                AddParameter(parameters, "Wall_Start_X", startPoint.X.ToString("F3"));
                                AddParameter(parameters, "Wall_Start_Y", startPoint.Y.ToString("F3"));
                                AddParameter(parameters, "Wall_Start_Z", startPoint.Z.ToString("F3"));
                                AddParameter(parameters, "Wall_End_X", endPoint.X.ToString("F3"));
                                AddParameter(parameters, "Wall_End_Y", endPoint.Y.ToString("F3"));
                                AddParameter(parameters, "Wall_End_Z", endPoint.Z.ToString("F3"));
                            }
                        }
                    }
                    catch { }

                    try
                    {
                        var wallType = wall.WallType;
                        if (wallType != null)
                        {
                            AddParameter(parameters, "WallType_Name", wallType.Name);
                        }
                    }
                    catch { }
                }

                // –î–ª—è –¥–≤–µ—Ä–µ–π –∏ –æ–∫–æ–Ω
                if (element is FamilyInstance familyInstance)
                {
                    try
                    {
                        var host = familyInstance.Host;
                        if (host != null)
                        {
                            AddParameter(parameters, "Host_ElementId", host.Id.IntegerValue.ToString());
                            AddParameter(parameters, "Host_Category", host.Category?.Name ?? "–ü—Ä–æ—á–µ–µ");
                        }
                    }
                    catch { }

                    try
                    {
                        var family = familyInstance.Symbol.Family;
                        if (family != null)
                        {
                            AddParameter(parameters, "Family_Name", family.Name);
                            AddParameter(parameters, "Family_FamilyCategory", family.FamilyCategory?.Name ?? "–ü—Ä–æ—á–µ–µ");
                        }
                    }
                    catch { }

                    try
                    {
                        var location = familyInstance.Location as LocationPoint;
                        if (location != null)
                        {
                            var point = location.Point;
                            AddParameter(parameters, "FamilyInstance_X", point.X.ToString("F3"));
                            AddParameter(parameters, "FamilyInstance_Y", point.Y.ToString("F3"));
                            AddParameter(parameters, "FamilyInstance_Z", point.Z.ToString("F3"));
                        }
                    }
                    catch { }

                    try
                    {
                        var transform = familyInstance.GetTransform();
                        AddParameter(parameters, "FamilyInstance_Rotation", transform.BasisZ.AngleTo(XYZ.BasisZ).ToString("F3"));
                    }
                    catch { }
                }

                // –î–ª—è –ø–æ–º–µ—â–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º SpatialElement)
                if (element is SpatialElement spatialElement)
                {
                    try
                    {
                        var area = spatialElement.Area;
                        AddParameter(parameters, "SpatialElement_Area", area.ToString("F3"));
                    }
                    catch { }

                    try
                    {
                        var perimeter = spatialElement.Perimeter;
                        AddParameter(parameters, "SpatialElement_Perimeter", perimeter.ToString("F3"));
                    }
                    catch { }
                }

                // –î–ª—è —É—Ä–æ–≤–Ω–µ–π
                if (element is Level level)
                {
                    try
                    {
                        var elevation = level.Elevation;
                        AddParameter(parameters, "Level_Elevation", elevation.ToString("F3"));
                    }
                    catch { }
                }

                // –î–ª—è –≤–∏–¥–æ–≤
                if (element is View view)
                {
                    try
                    {
                        AddParameter(parameters, "View_ViewType", view.ViewType.ToString());
                        AddParameter(parameters, "View_Scale", view.Scale.ToString());
                    }
                    catch { }
                }

                // –î–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                if (element is Material material)
                {
                    try
                    {
                        AddParameter(parameters, "Material_Class", material.MaterialClass);
                        AddParameter(parameters, "Material_AppearanceAssetId", material.AppearanceAssetId.IntegerValue.ToString());
                    }
                    catch { }
                }

                // –î–ª—è –∫–æ–ª–æ–Ω–Ω
                if (element is FamilyInstance column && column.Category?.Name == "–°—Ç–æ–ª–±—Ü—ã")
                {
                    try
                    {
                        var location = column.Location as LocationPoint;
                        if (location != null)
                        {
                            var point = location.Point;
                            AddParameter(parameters, "Column_X", point.X.ToString("F3"));
                            AddParameter(parameters, "Column_Y", point.Y.ToString("F3"));
                            AddParameter(parameters, "Column_Z", point.Z.ToString("F3"));
                        }
                    }
                    catch { }
                }

                // –î–ª—è –±–∞–ª–æ–∫
                if (element is FamilyInstance beam && beam.Category?.Name == "–ë–∞–ª–∫–∏")
                {
                    try
                    {
                        var location = beam.Location as LocationCurve;
                        if (location != null)
                        {
                            var curve = location.Curve;
                            if (curve != null)
                            {
                                AddParameter(parameters, "Beam_Length", curve.Length.ToString("F3"));
                                var startPoint = curve.GetEndPoint(0);
                                var endPoint = curve.GetEndPoint(1);
                                AddParameter(parameters, "Beam_Start_X", startPoint.X.ToString("F3"));
                                AddParameter(parameters, "Beam_Start_Y", startPoint.Y.ToString("F3"));
                                AddParameter(parameters, "Beam_Start_Z", startPoint.Z.ToString("F3"));
                                AddParameter(parameters, "Beam_End_X", endPoint.X.ToString("F3"));
                                AddParameter(parameters, "Beam_End_Y", endPoint.Y.ToString("F3"));
                                AddParameter(parameters, "Beam_End_Z", endPoint.Z.ToString("F3"));
                            }
                        }
                    }
                    catch { }
                }
            }
            catch
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        /// </summary>
        private void GetElementGeometry(Element element, Dictionary<string, string> parameters)
        {
            try
            {
                var geometry = element.get_Geometry(new Options());
                if (geometry != null)
                {
                    AddParameter(parameters, "Geometry_Count", geometry.Count().ToString());
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–º
                    try
                    {
                        var solid = geometry.GetEnumerator().Current as Solid;
                        if (solid != null && solid.Volume > 0)
                        {
                            AddParameter(parameters, "Geometry_Volume", solid.Volume.ToString("F3"));
                            AddParameter(parameters, "Geometry_SurfaceArea", solid.SurfaceArea.ToString("F3"));
                        }
                    }
                    catch { }
                }
            }
            catch { }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞
        /// </summary>
        private void GetElementLocation(Element element, Dictionary<string, string> parameters)
        {
            try
            {
                var location = element.Location;
                if (location != null)
                {
                    if (location is LocationPoint pointLocation)
                    {
                        var point = pointLocation.Point;
                        AddParameter(parameters, "Location_X", point.X.ToString("F3"));
                        AddParameter(parameters, "Location_Y", point.Y.ToString("F3"));
                        AddParameter(parameters, "Location_Z", point.Z.ToString("F3"));
                    }
                    else if (location is LocationCurve curveLocation)
                    {
                        var curve = curveLocation.Curve;
                        if (curve != null)
                        {
                            var startPoint = curve.GetEndPoint(0);
                            var endPoint = curve.GetEndPoint(1);
                            AddParameter(parameters, "Location_Start_X", startPoint.X.ToString("F3"));
                            AddParameter(parameters, "Location_Start_Y", startPoint.Y.ToString("F3"));
                            AddParameter(parameters, "Location_Start_Z", startPoint.Z.ToString("F3"));
                            AddParameter(parameters, "Location_End_X", endPoint.X.ToString("F3"));
                            AddParameter(parameters, "Location_End_Y", endPoint.Y.ToString("F3"));
                            AddParameter(parameters, "Location_End_Z", endPoint.Z.ToString("F3"));
                        }
                    }
                }
            }
            catch { }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
        /// </summary>
        private void GetElementBoundingBox(Element element, Dictionary<string, string> parameters)
        {
            try
            {
                var boundingBox = element.get_BoundingBox(null);
                if (boundingBox != null)
                {
                    var min = boundingBox.Min;
                    var max = boundingBox.Max;
                    
                    AddParameter(parameters, "BoundingBox_Min_X", min.X.ToString("F3"));
                    AddParameter(parameters, "BoundingBox_Min_Y", min.Y.ToString("F3"));
                    AddParameter(parameters, "BoundingBox_Min_Z", min.Z.ToString("F3"));
                    AddParameter(parameters, "BoundingBox_Max_X", max.X.ToString("F3"));
                    AddParameter(parameters, "BoundingBox_Max_Y", max.Y.ToString("F3"));
                    AddParameter(parameters, "BoundingBox_Max_Z", max.Z.ToString("F3"));
                    
                    // –†–∞–∑–º–µ—Ä—ã
                    AddParameter(parameters, "BoundingBox_Width", (max.X - min.X).ToString("F3"));
                    AddParameter(parameters, "BoundingBox_Height", (max.Y - min.Y).ToString("F3"));
                    AddParameter(parameters, "BoundingBox_Depth", (max.Z - min.Z).ToString("F3"));
                }
            }
            catch { }
        }
    }
}
