using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using RevitExporter.Models;
using System.Collections.Generic;

namespace RevitExporter.Services
{
    public class RevitExporter : IRevitExporter
    {
        private readonly IRevitDataReader _revitDataReader;

        public RevitExporter(IRevitDataReader revitDataReader = null)
        {
            _revitDataReader = revitDataReader ?? RevitDataReaderFactory.CreateRevitDataReader();
        }

        public async Task ExportToCsvAsync(ExportTab exportTab, IProgress<string> progress = null)
        {
            if (progress != null)
                progress.Report("–ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç...");

            if (string.IsNullOrEmpty(exportTab.ModelsFolder) || !Directory.Exists(exportTab.ModelsFolder))
            {
                throw new DirectoryNotFoundException(string.Format("–ü–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {0}", exportTab.ModelsFolder));
            }

            var revitFiles = Directory.GetFiles(exportTab.ModelsFolder, "*.rvt", SearchOption.TopDirectoryOnly);
            if (!revitFiles.Any())
            {
                throw new FileNotFoundException(string.Format("–§–∞–π–ª—ã Revit –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {0}", exportTab.ModelsFolder));
            }

            var resultsFolder = Path.Combine(exportTab.ModelsFolder, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã");
            if (!Directory.Exists(resultsFolder))
            {
                Directory.CreateDirectory(resultsFolder);
            }

            if (progress != null)
                progress.Report(string.Format("–ù–∞–π–¥–µ–Ω–æ {0} —Ñ–∞–π–ª–æ–≤ Revit", revitFiles.Length));

            foreach (var revitFile in revitFiles)
            {
                await ProcessRevitFileAsync(revitFile, resultsFolder, exportTab.RevitVersion, progress);
            }

            if (progress != null)
                progress.Report("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
        }

        private async Task ProcessRevitFileAsync(string revitFilePath, string resultsFolder, string revitVersion, IProgress<string> progress)
        {
            var fileName = Path.GetFileNameWithoutExtension(revitFilePath);
            if (progress != null)
                progress.Report(string.Format("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {0}", fileName));

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (!File.Exists(revitFilePath))
                {
                    throw new FileNotFoundException(string.Format("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {0}", revitFilePath));
                }

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                var fileInfo = new FileInfo(revitFilePath);
                if (progress != null)
                    progress.Report(string.Format("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {0} MB", fileInfo.Length / 1024 / 1024));

                // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Revit —Ñ–∞–π–ª–∞
                List<RevitElementData> revitData = null;
                string revitError = null;
                
                if (progress != null)
                    progress.Report("–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è Revit —Ñ–∞–π–ª–∞...");
                
                try
                {
                    if (_revitDataReader.CanReadRevitFile(revitFilePath))
                    {
                        if (progress != null)
                            progress.Report("–§–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω. –ß–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Revit —Ñ–∞–π–ª–∞...");
                        
                        revitData = await _revitDataReader.ReadRevitFileAsync(revitFilePath, progress);
                        
                        if (revitData == null)
                        {
                            revitError = "RevitDataReader –≤–µ—Ä–Ω—É–ª null –≤–º–µ—Å—Ç–æ –¥–∞–Ω–Ω—ã—Ö";
                        }
                        else if (revitData.Count == 0)
                        {
                            revitError = "RevitDataReader –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö";
                        }
                    }
                    else
                    {
                        revitError = "–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º Revit —Ñ–∞–π–ª–æ–º (.rvt)";
                        if (progress != null)
                            progress.Report(revitError);
                    }
                }
                catch (Exception revitEx)
                {
                    revitError = string.Format("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Revit —Ñ–∞–π–ª–∞: {0}", revitEx.Message);
                    if (progress != null)
                        progress.Report(string.Format("‚ùå {0}", revitError));
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
                    if (progress != null)
                        progress.Report(string.Format("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {0}", revitEx.ToString()));
                }

                // –°–æ–∑–¥–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
                string csvData;
                if (revitData != null && revitData.Count > 0)
                {
                    csvData = GenerateCsvFromRealData(revitData);
                    if (progress != null)
                        progress.Report(string.Format("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {0} –∑–∞–ø–∏—Å–µ–π –∏–∑ Revit —Ñ–∞–π–ª–∞", revitData.Count));
                }
                else
                {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö
                    string finalError = revitError;
                    if (string.IsNullOrEmpty(finalError))
                    {
                        if (revitData == null)
                        {
                            finalError = "RevitDataReader –≤–µ—Ä–Ω—É–ª null";
                        }
                        else if (revitData.Count == 0)
                        {
                            finalError = "RevitDataReader –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö - Revit API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω";
                        }
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º CSV —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
                    csvData = GenerateErrorCsv(fileName, finalError);
                    if (progress != null)
                        progress.Report(string.Format("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω CSV —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ: {0}", finalError));
                    
                    if (progress != null)
                        progress.Report("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ FallbackRevitDataReader –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏");
                }

                var csvFilePath = Path.Combine(resultsFolder, string.Format("{0}_export.csv", fileName));
                File.WriteAllText(csvFilePath, csvData, Encoding.UTF8);
                
                if (progress != null)
                    progress.Report(string.Format("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {0}", csvFilePath));
            }
            catch (Exception ex)
            {
                if (progress != null)
                    progress.Report(string.Format("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {0}: {1}", fileName, ex.Message));
                throw;
            }
        }

        private string GenerateCsvFromRealData(List<RevitElementData> revitData)
        {
            var csv = new StringBuilder();
            csv.AppendLine("ModelName,ElementId,Category,ParameterName,ParameterValue");

            foreach (var data in revitData)
            {
                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –∫–∞–≤—ã—á–∫–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö
                var escapedValue = EscapeCsvValue(data.ParameterValue);
                csv.AppendLine(string.Format("{0},{1},{2},{3},{4}", data.ModelName, data.ElementId, data.Category, data.ParameterName, escapedValue));
            }

            return csv.ToString();
        }

        private string EscapeCsvValue(string value)
        {
            if (string.IsNullOrEmpty(value))
                return string.Empty;

            // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—è—Ç—É—é, –∫–∞–≤—ã—á–∫—É –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏, –∑–∞–∫–ª—é—á–∞–µ–º –≤ –∫–∞–≤—ã—á–∫–∏
            if (value.Contains(",") || value.Contains("\"") || value.Contains("\n") || value.Contains("\r"))
            {
                // –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–µ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
                value = value.Replace("\"", "\"\"");
                return string.Format("\"{0}\"", value);
            }

            return value;
        }

        private string GenerateErrorCsv(string modelName, string errorMessage)
        {
            var csv = new StringBuilder();
            csv.AppendLine("ModelName,ElementId,Category,ParameterName,ParameterValue");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
            csv.AppendLine(string.Format("{0},N/A,N/A,Status,–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", modelName));
            csv.AppendLine(string.Format("{0},N/A,N/A,Reason,{1}", modelName, errorMessage ?? "Revit API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"));
            csv.AppendLine(string.Format("{0},N/A,N/A,Required,–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Autodesk Revit 2023 –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", modelName));
            csv.AppendLine(string.Format("{0},N/A,N/A,Timestamp,{1}", modelName, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")));
            
            return csv.ToString();
        }

        private string GenerateEnhancedTestData(string modelName, string revitFilePath)
        {
            var csv = new StringBuilder();
            csv.AppendLine("ModelName,ElementId,Category,ParameterName,ParameterValue");

            // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            var random = new Random(modelName.GetHashCode());
            var categories = new[] { "Walls", "Doors", "Windows", "Floors", "Roofs", "Columns", "Beams", "Furniture" };
            var parameterNames = new[] { "Name", "Type", "Level", "Material", "Height", "Width", "Length", "Area", "Volume", "Mark" };

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç 50 –¥–æ 200 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            var elementCount = random.Next(50, 200);
            
            for (int i = 1; i <= elementCount; i++)
            {
                var elementId = random.Next(1000, 9999);
                var category = categories[random.Next(categories.Length)];
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3-5 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                var parameterCount = random.Next(3, 6);
                for (int j = 0; j < parameterCount; j++)
                {
                    var parameterName = parameterNames[random.Next(parameterNames.Length)];
                    string value;
                    
                    switch (parameterName)
                    {
                        case "Name":
                            value = string.Format("{0}_{1}", category, i);
                            break;
                        case "Type":
                            value = string.Format("Type_{0}", random.Next(1, 10));
                            break;
                        case "Level":
                            value = string.Format("Level_{0}", random.Next(1, 5));
                            break;
                        case "Material":
                            value = string.Format("Material_{0}", random.Next(1, 8));
                            break;
                        case "Height":
                        case "Width":
                        case "Length":
                            value = (random.NextDouble() * 10 + 1).ToString("F2");
                            break;
                        case "Area":
                            value = (random.NextDouble() * 100 + 10).ToString("F2");
                            break;
                        case "Volume":
                            value = (random.NextDouble() * 1000 + 50).ToString("F2");
                            break;
                        case "Mark":
                            value = string.Format("M-{0}", random.Next(100, 999));
                            break;
                        default:
                            value = string.Format("Value_{0}", random.Next(1, 100));
                            break;
                    }
                    
                    csv.AppendLine(string.Format("{0},{1},{2},{3},{4}", modelName, elementId, category, parameterName, value));
                }
            }

            return csv.ToString();
        }
    }
}
