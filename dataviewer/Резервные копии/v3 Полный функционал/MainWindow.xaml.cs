using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Forms;
using Autodesk.Revit.DB;
using RevitExporterAddin.Models;
using RevitExporterAddin.Services;
using Autodesk.Revit.DB.Structure;

namespace RevitExporterAddin
{
    public partial class MainWindow : Window
    {
        private readonly Autodesk.Revit.ApplicationServices.Application _revitApp;
        private Document _revitDocument;
        private string _outputFolder;
        private readonly RevitDataReader _dataReader;
        private readonly RevitExporter _exporter;

        public MainWindow(Autodesk.Revit.ApplicationServices.Application revitApp)
        {
            InitializeComponent();
            
            _revitApp = revitApp;
            _dataReader = new RevitDataReader();
            _exporter = new RevitExporter();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            FilePathTextBox.Text = "–í—ã–±–µ—Ä–∏—Ç–µ .rvt —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞";
            _outputFolder = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            LogMessage("‚úÖ Revit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ");
            LogMessage(string.Format("üìä –í–µ—Ä—Å–∏—è Revit: {0}", _revitApp.VersionName));
            LogMessage("üí° –í—ã–±–µ—Ä–∏—Ç–µ .rvt —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞");
        }

        private void SelectFileButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                using (var dialog = new OpenFileDialog())
                {
                    dialog.Title = "–í—ã–±–µ—Ä–∏—Ç–µ .rvt —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞";
                    dialog.Filter = "Revit —Ñ–∞–π–ª—ã (*.rvt)|*.rvt|–í—Å–µ —Ñ–∞–π–ª—ã (*.*)|*.*";
                    dialog.FilterIndex = 1;

                    if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                    {
                        var filePath = dialog.FileName;
                        FilePathTextBox.Text = filePath;
                        
                        LogMessage(string.Format("üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {0}", filePath));
                        
                        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
                        OpenRevitFile(filePath);
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage(string.Format("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: {0}", ex.Message));
                System.Windows.MessageBox.Show(string.Format("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞:\n{0}", ex.Message), 
                              "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void OpenRevitFile(string filePath)
        {
            try
            {
                LogMessage("üîì –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª Revit...");
                
                // –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
                var openOptions = new OpenOptions();
                openOptions.DetachFromCentralOption = DetachFromCentralOption.DoNotDetach;
                openOptions.Audit = false;
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                var modelPath = ModelPathUtils.ConvertUserVisiblePathToModelPath(filePath);
                _revitDocument = _revitApp.OpenDocumentFile(modelPath, openOptions);
                
                if (_revitDocument != null)
                {
                    LogMessage("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç");
                    LogMessage(string.Format("üìÅ –ú–æ–¥–µ–ª—å: {0}", _revitDocument.Title));
                    LogMessage(string.Format("üìÇ –ü—É—Ç—å: {0}", _revitDocument.PathName));
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–¥–∏–Ω–∏—Ü–∞—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è
                    try
                    {
                        var units = _revitDocument.GetUnits();
                        var lengthUnit = units.GetFormatOptions(SpecTypeId.Length).GetUnitTypeId();
                        var areaUnit = units.GetFormatOptions(SpecTypeId.Area).GetUnitTypeId();
                        
                        LogMessage(string.Format("üìè –ï–¥–∏–Ω–∏—Ü—ã –¥–ª–∏–Ω—ã: {0}", GetUnitDisplayName(lengthUnit)));
                        LogMessage(string.Format("üìê –ï–¥–∏–Ω–∏—Ü—ã –ø–ª–æ—â–∞–¥–∏: {0}", GetUnitDisplayName(areaUnit)));
                    }
                    catch
                    {
                        LogMessage("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–¥–∏–Ω–∏—Ü–∞—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è");
                    }
                    
                    LogMessage("üöÄ –ì–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É!");
                }
                else
                {
                    LogMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª");
                }
            }
            catch (Exception ex)
            {
                LogMessage(string.Format("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: {0}", ex.Message));
                System.Windows.MessageBox.Show(string.Format("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:\n{0}", ex.Message), 
                              "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void SelectOutputFolderButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                using (var dialog = new FolderBrowserDialog())
                {
                    dialog.Description = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞";
                    dialog.ShowNewFolderButton = true;
                    dialog.SelectedPath = _outputFolder;

                    if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                    {
                        _outputFolder = dialog.SelectedPath;
                        LogMessage(string.Format("üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {0}", _outputFolder));
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage(string.Format("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏: {0}", ex.Message));
            }
        }

        private async void ExportButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                ExportButton.IsEnabled = false;
                LogMessage("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç...");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if (_revitDocument == null)
                {
                    LogMessage("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª Revit –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞");
                    System.Windows.MessageBox.Show("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ .rvt —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!", 
                                  "–í–Ω–∏–º–∞–Ω–∏–µ", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                if (string.IsNullOrEmpty(_outputFolder))
                {
                    LogMessage("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
                    return;
                }

                if (string.IsNullOrEmpty(FileNameTextBox.Text))
                {
                    LogMessage("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞");
                    return;
                }

                // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                await ExportDataAsync();
            }
            catch (Exception ex)
            {
                LogMessage(string.Format("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {0}", ex.Message));
                LogMessage(string.Format("üìã –î–µ—Ç–∞–ª–∏: {0}", ex.StackTrace));
            }
            finally
            {
                ExportButton.IsEnabled = true;
            }
        }

        private async Task ExportDataAsync()
        {
            try
            {
                LogMessage("üìñ –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Revit –¥–æ–∫—É–º–µ–Ω—Ç–∞...");

                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                var progress = new Progress<string>(message => LogMessage(message));

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                var data = await Task.Run(() => 
                    _dataReader.ExtractElementsFromDocument(_revitDocument, _revitDocument.Title, progress));

                if (data == null || data.Count == 0)
                {
                    LogMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞");
                    return;
                }

                LogMessage(string.Format("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {0} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ {1} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", data.Count, data.Select(d => d.ElementId).Distinct().Count()));

                // –°–æ–∑–¥–∞–µ–º CSV
                LogMessage("üìù –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª...");
                var csvContent = _exporter.ExportToCsv(data, _revitDocument.Title);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                var fileName = string.Format("{0}_{1:yyyy-MM-dd_HH-mm-ss}.csv", FileNameTextBox.Text, DateTime.Now);
                var fullPath = Path.Combine(_outputFolder, fileName);
                
                await Task.Run(() => File.WriteAllText(fullPath, csvContent, System.Text.Encoding.UTF8));

                LogMessage(string.Format("üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {0}", fullPath));
                LogMessage("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:");
                LogMessage(string.Format("   ‚Ä¢ –ú–æ–¥–µ–ª—å: {0}", _revitDocument.Title));
                LogMessage(string.Format("   ‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {0}", data.Select(d => d.ElementId).Distinct().Count()));
                LogMessage(string.Format("   ‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {0}", data.Count));
                LogMessage(string.Format("   ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {0:F1} KB", new FileInfo(fullPath).Length / 1024.0));

                System.Windows.MessageBox.Show(string.Format("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:\n{0}", fullPath), 
                              "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);

                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–æ–º
                System.Diagnostics.Process.Start("explorer.exe", string.Format("/select,\"{0}\"", fullPath));
            }
            catch (Exception ex)
            {
                LogMessage(string.Format("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {0}", ex.Message));
                LogMessage(string.Format("üìã –î–µ—Ç–∞–ª–∏: {0}", ex.StackTrace));
                System.Windows.MessageBox.Show(string.Format("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{0}", ex.Message), 
                              "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ClearLogButton_Click(object sender, RoutedEventArgs e)
        {
            LogTextBox.Clear();
            LogMessage("üßπ –õ–æ–≥ –æ—á–∏—â–µ–Ω");
        }

        private void LogMessage(string message)
        {
            var timestamp = DateTime.Now.ToString("HH:mm:ss");
            var logEntry = string.Format("[{0}] {1}", timestamp, message);
            
            Dispatcher.Invoke(() =>
            {
                LogTextBox.AppendText(logEntry + Environment.NewLine);
                LogTextBox.ScrollToEnd();
            });
        }

        protected override void OnClosed(EventArgs e)
        {
            try
            {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–∫—Ä—ã—Ç
                if (_revitDocument != null && !_revitDocument.IsReadOnly)
                {
                    _revitDocument.Close(false);
                    LogMessage("üîí –î–æ–∫—É–º–µ–Ω—Ç Revit –∑–∞–∫—Ä—ã—Ç");
                }
            }
            catch (Exception ex)
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
            }
            
            base.OnClosed(e);
        }

        private string GetUnitDisplayName(ForgeTypeId unitTypeId)
        {
            try
            {
                if (unitTypeId == UnitTypeId.Millimeters) return "–º–º";
                if (unitTypeId == UnitTypeId.Centimeters) return "—Å–º";
                if (unitTypeId == UnitTypeId.Meters) return "–º";
                if (unitTypeId == UnitTypeId.Feet) return "—Ñ—É—Ç";
                if (unitTypeId == UnitTypeId.Inches) return "–¥—é–π–º";
                if (unitTypeId == UnitTypeId.SquareMillimeters) return "–º–º¬≤";
                if (unitTypeId == UnitTypeId.SquareCentimeters) return "—Å–º¬≤";
                if (unitTypeId == UnitTypeId.SquareMeters) return "–º¬≤";
                if (unitTypeId == UnitTypeId.SquareFeet) return "—Ñ—É—Ç¬≤";
                if (unitTypeId == UnitTypeId.SquareInches) return "–¥—é–π–º¬≤";
                if (unitTypeId == UnitTypeId.CubicMillimeters) return "–º–º¬≥";
                if (unitTypeId == UnitTypeId.CubicCentimeters) return "—Å–º¬≥";
                if (unitTypeId == UnitTypeId.CubicMeters) return "–º¬≥";
                if (unitTypeId == UnitTypeId.CubicFeet) return "—Ñ—É—Ç¬≥";
                if (unitTypeId == UnitTypeId.CubicInches) return "–¥—é–π–º¬≥";
                if (unitTypeId == UnitTypeId.Degrees) return "–≥—Ä–∞–¥—É—Å—ã";
                if (unitTypeId == UnitTypeId.Radians) return "—Ä–∞–¥–∏–∞–Ω—ã";
                
                return unitTypeId.ToString();
            }
            catch
            {
                return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            }
        }
    }
}
