using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using RevitExporterAddin.Models;
using RevitExporterAddin.Services;
using RevitApp = Autodesk.Revit.ApplicationServices.Application;

namespace RevitExporterAddin.Views
{
    public partial class MainWindow : Window
    {
        private List<Project> _projects;
        private readonly IDataService _dataService;
        private readonly ProjectPersistenceService _persistenceService;
        private readonly RevitApp _revitApp;
        private string _currentProjectName;
        private string _currentExportName;

        public MainWindow(RevitApp revitApp = null)
        {
            InitializeComponent();
            _revitApp = revitApp;
            _dataService = new DataService();
            _persistenceService = new ProjectPersistenceService();
            _projects = new List<Project>();
            
            LoadProjects();
            ShowProjectsScreen();
        }


        private void UserProfileButton_Click(object sender, RoutedEventArgs e)
        {
            ShowUserProfileScreen();
        }

        private void ShowUserProfileScreen()
        {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            MainGrid.Children.Clear();
            
            var grid = new Grid();
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(300) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(5) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            
            // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –í–∫–ª–∞–¥–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            var leftPanel = CreateUserProfileLeftPanel();
            Grid.SetColumn(leftPanel, 0);
            grid.Children.Add(leftPanel);
            
            // GridSplitter
            var splitter = new GridSplitter
            {
                Width = 5,
                Background = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                HorizontalAlignment = HorizontalAlignment.Stretch
            };
            Grid.SetColumn(splitter, 1);
            grid.Children.Add(splitter);
            
            // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)
            var rightPanel = CreateUserProfileRightPanel("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
            Grid.SetColumn(rightPanel, 2);
            grid.Children.Add(rightPanel);
            
            MainGrid.Children.Add(grid);
        }

        private Border CreateUserProfileLeftPanel()
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(248, 249, 250))
            };

            var stackPanel = new StackPanel { Margin = new Thickness(30) };
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            var headerPanel = new StackPanel
            {
                Orientation = Orientation.Horizontal,
                Margin = new Thickness(0, 0, 0, 30)
            };
            
            var backButton = new Button
            {
                Content = "‚Üê",
                FontSize = 18,
                Width = 40,
                Height = 40,
                Background = new SolidColorBrush(Color.FromRgb(108, 117, 125)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                Margin = new Thickness(0, 0, 15, 0)
            };
            backButton.Click += (s, e) => ShowProjectsScreen();
            headerPanel.Children.Add(backButton);
            
            var title = new TextBlock
            {
                Text = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                FontSize = 20,
                FontWeight = FontWeights.Bold,
                VerticalAlignment = VerticalAlignment.Center,
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            headerPanel.Children.Add(title);
            stackPanel.Children.Add(headerPanel);
            
            // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
            var subtitle = new TextBlock
            {
                Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:",
                FontSize = 14,
                Margin = new Thickness(0, 0, 0, 15),
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            stackPanel.Children.Add(subtitle);
            
            // –°–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫
            var scrollViewer = new ScrollViewer
            {
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                MaxHeight = 400
            };
            var tabsList = new StackPanel();
            
            // –í–∫–ª–∞–¥–∫–∞ "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            var authButton = new Button
            {
                Content = "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                Height = 50,
                Margin = new Thickness(0, 0, 0, 15),
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderThickness = new Thickness(1),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                HorizontalAlignment = HorizontalAlignment.Stretch,
                HorizontalContentAlignment = HorizontalAlignment.Left,
                Padding = new Thickness(15, 0, 0, 0),
                FontSize = 14
            };
            authButton.Click += (s, e) => UpdateUserProfileRightPanel("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
            tabsList.Children.Add(authButton);
            
            scrollViewer.Content = tabsList;
            stackPanel.Children.Add(scrollViewer);
            
            border.Child = stackPanel;
            return border;
        }

        private Border CreateUserProfileRightPanel(string selectedTab)
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(248, 249, 250))
            };

            var stackPanel = new StackPanel { Margin = new Thickness(30) };
            
            if (selectedTab == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            {
                var title = new TextBlock
                {
                    Text = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                    FontSize = 24,
                    FontWeight = FontWeights.Bold,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    Margin = new Thickness(0, 50, 0, 30),
                    Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                };
                stackPanel.Children.Add(title);
                
                // –°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å
                var oldPasswordPanel = new StackPanel { Margin = new Thickness(0, 0, 0, 20) };
                var oldPasswordLabel = new TextBlock
                {
                    Text = "–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å:",
                    FontSize = 14,
                    FontWeight = FontWeights.SemiBold,
                    Margin = new Thickness(0, 0, 0, 5),
                    Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                };
                var oldPasswordBox = new PasswordBox
                {
                    Height = 35,
                    FontSize = 14,
                    BorderThickness = new Thickness(1),
                    BorderBrush = new SolidColorBrush(Color.FromRgb(206, 212, 218))
                };
                oldPasswordPanel.Children.Add(oldPasswordLabel);
                oldPasswordPanel.Children.Add(oldPasswordBox);
                stackPanel.Children.Add(oldPasswordPanel);
                
                // –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
                var newPasswordPanel = new StackPanel { Margin = new Thickness(0, 0, 0, 20) };
                var newPasswordLabel = new TextBlock
                {
                    Text = "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:",
                    FontSize = 14,
                    FontWeight = FontWeights.SemiBold,
                    Margin = new Thickness(0, 0, 0, 5),
                    Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                };
                var newPasswordBox = new PasswordBox
                {
                    Height = 35,
                    FontSize = 14,
                    BorderThickness = new Thickness(1),
                    BorderBrush = new SolidColorBrush(Color.FromRgb(206, 212, 218))
                };
                newPasswordPanel.Children.Add(newPasswordLabel);
                newPasswordPanel.Children.Add(newPasswordBox);
                stackPanel.Children.Add(newPasswordPanel);
                
                // –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
                var confirmPasswordPanel = new StackPanel { Margin = new Thickness(0, 0, 0, 30) };
                var confirmPasswordLabel = new TextBlock
                {
                    Text = "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:",
                    FontSize = 14,
                    FontWeight = FontWeights.SemiBold,
                    Margin = new Thickness(0, 0, 0, 5),
                    Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                };
                var confirmPasswordBox = new PasswordBox
                {
                    Height = 35,
                    FontSize = 14,
                    BorderThickness = new Thickness(1),
                    BorderBrush = new SolidColorBrush(Color.FromRgb(206, 212, 218))
                };
                confirmPasswordPanel.Children.Add(confirmPasswordLabel);
                confirmPasswordPanel.Children.Add(confirmPasswordBox);
                stackPanel.Children.Add(confirmPasswordPanel);
                
                // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
                var saveButton = new Button
                {
                    Content = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                    Height = 40,
                    Width = 120,
                    Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                    Foreground = Brushes.White,
                    BorderThickness = new Thickness(0),
                    FontSize = 14,
                    FontWeight = FontWeights.SemiBold,
                    HorizontalAlignment = HorizontalAlignment.Left
                };
                saveButton.Click += (s, e) => 
                {
                    // TODO: –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
                    MessageBox.Show("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
                };
                stackPanel.Children.Add(saveButton);
            }
            
            border.Child = stackPanel;
            return border;
        }

        private void UpdateUserProfileRightPanel(string selectedTab)
        {
            // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –≤ MainGrid –∏ –∑–∞–º–µ–Ω—è–µ–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            var grid = MainGrid.Children[0] as Grid;
            if (grid != null && grid.Children.Count >= 3)
            {
                var rightPanel = CreateUserProfileRightPanel(selectedTab);
                Grid.SetColumn(rightPanel, 2);
                grid.Children.RemoveAt(2); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
                grid.Children.Add(rightPanel); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            }
        }

        private void LoadProjects()
        {
            try
            {
                _projects = new List<Project>();
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ "–ü—Ä–æ–µ–∫—Ç—ã"
                var projectsPath = Path.Combine("C:\\RevitExporter", "–ü—Ä–æ–µ–∫—Ç—ã");
                if (Directory.Exists(projectsPath))
                {
                    var projectFolders = Directory.GetDirectories(projectsPath);
                    foreach (var projectFolder in projectFolders)
                    {
                        var projectName = Path.GetFileName(projectFolder);
                        var project = ScanProjectFolder(projectFolder, projectName);
                        if (project != null)
                        {
                            _projects.Add(project);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                _projects = new List<Project>();
            }
        }

        private void SaveProjects()
        {
            try
            {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                _persistenceService.SaveProjects(_projects);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void ShowProjectsScreen()
        {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            MainGrid.Children.Clear();
            
            var grid = new Grid();
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(300) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(5) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            
            // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            var leftPanel = CreateProjectsLeftPanel();
            Grid.SetColumn(leftPanel, 0);
            grid.Children.Add(leftPanel);
            
            // GridSplitter
            var splitter = new GridSplitter
            {
                Width = 5,
                Background = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                HorizontalAlignment = HorizontalAlignment.Stretch
            };
            Grid.SetColumn(splitter, 1);
            grid.Children.Add(splitter);
            
            // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            var rightPanel = CreateWelcomeRightPanel();
            Grid.SetColumn(rightPanel, 2);
            grid.Children.Add(rightPanel);
            
            MainGrid.Children.Add(grid);
        }

        private Border CreateProjectsLeftPanel()
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                BorderThickness = new Thickness(1),
                Margin = new Thickness(20, 20, 10, 20)
            };

            var stackPanel = new StackPanel { Margin = new Thickness(20) };
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            var title = new TextBlock
            {
                Text = "Revit Exporter",
                FontSize = 24,
                FontWeight = FontWeights.Bold,
                HorizontalAlignment = HorizontalAlignment.Center,
                Margin = new Thickness(0, 0, 0, 30),
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            stackPanel.Children.Add(title);
            
            // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
            var subtitle = new TextBlock
            {
                Text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
                FontSize = 14,
                Margin = new Thickness(0, 0, 0, 15),
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            stackPanel.Children.Add(subtitle);
            
            // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            var scrollViewer = new ScrollViewer
            {
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                MaxHeight = 400
            };
            var projectsList = new StackPanel();
            
            foreach (var project in _projects)
            {
                var projectContainer = new Grid();
                projectContainer.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
                projectContainer.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });
                
                var projectButton = new Button
                {
                    Content = $"üìÅ {project.Name}",
                    Height = 50,
                    Margin = new Thickness(0, 0, 0, 15),
                    Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                    BorderThickness = new Thickness(1),
                    BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                    HorizontalAlignment = HorizontalAlignment.Stretch,
                    HorizontalContentAlignment = HorizontalAlignment.Left,
                    Padding = new Thickness(15, 0, 0, 0),
                    FontSize = 14
                };
                projectButton.Click += (s, e) => ShowProjectScreen(project.Name);
                Grid.SetColumn(projectButton, 0);
                projectContainer.Children.Add(projectButton);
                
                // –ö–Ω–æ–ø–∫–∞ —Å —Ç—Ä–µ–º—è —Ç–æ—á–∫–∞–º–∏
                var menuButton = new Button
                {
                    Content = "‚ãÆ",
                    Width = 30,
                    Height = 50,
                    Margin = new Thickness(0, 0, 10, 15),
                    Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                    BorderThickness = new Thickness(1),
                    BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                    FontSize = 16,
                    FontWeight = FontWeights.Bold,
                    VerticalAlignment = VerticalAlignment.Top,
                    HorizontalAlignment = HorizontalAlignment.Right
                };
                menuButton.Click += (s, e) => ShowProjectContextMenu(project.Name, menuButton);
                Grid.SetColumn(menuButton, 1);
                projectContainer.Children.Add(menuButton);
                
                projectsList.Children.Add(projectContainer);
            }
            
            scrollViewer.Content = projectsList;
            stackPanel.Children.Add(scrollViewer);
            
            // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            var addNewButton = new Button
            {
                Content = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
                Height = 50,
                Margin = new Thickness(0, 20, 0, 10),
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 14
            };
            addNewButton.Click += AddProject_Click;
            stackPanel.Children.Add(addNewButton);
            
            // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            var addExistingButton = new Button
            {
                Content = "üìÅ –î–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç",
                Height = 50,
                Margin = new Thickness(0, 0, 0, 0),
                Background = new SolidColorBrush(Color.FromRgb(40, 167, 69)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 14
            };
            addExistingButton.Click += AddExistingProject_Click;
            stackPanel.Children.Add(addExistingButton);
            
            border.Child = stackPanel;
            return border;
        }

        private Border CreateWelcomeRightPanel()
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(248, 249, 250))
            };

            var stackPanel = new StackPanel { Margin = new Thickness(30) };
            
            var welcomeText = new TextBlock
            {
                Text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Revit Exporter!",
                FontSize = 24,
                FontWeight = FontWeights.Bold,
                HorizontalAlignment = HorizontalAlignment.Center,
                Margin = new Thickness(0, 50, 0, 20),
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            stackPanel.Children.Add(welcomeText);
            
            var descriptionText = new TextBlock
            {
                Text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –≤—ã–≥—Ä—É–∑–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Revit.",
                FontSize = 16,
                HorizontalAlignment = HorizontalAlignment.Center,
                TextWrapping = TextWrapping.Wrap,
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            stackPanel.Children.Add(descriptionText);
            
            border.Child = stackPanel;
            return border;
        }

        private void ShowProjectScreen(string projectName)
        {
            _currentProjectName = projectName;
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            MainGrid.Children.Clear();
            
            var grid = new Grid();
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(300) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(5) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            
            // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –°–ø–∏—Å–æ–∫ –≤—ã–≥—Ä—É–∑–æ–∫
            var leftPanel = CreateExportsLeftPanel(projectName);
            Grid.SetColumn(leftPanel, 0);
            grid.Children.Add(leftPanel);
            
            // GridSplitter
            var splitter = new GridSplitter
            {
                Width = 5,
                Background = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                HorizontalAlignment = HorizontalAlignment.Stretch
            };
            Grid.SetColumn(splitter, 1);
            grid.Children.Add(splitter);
            
            // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –°–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–∞—è)
            var rightPanel = CreateExportsRightPanel(projectName);
            Grid.SetColumn(rightPanel, 2);
            grid.Children.Add(rightPanel);
            
            MainGrid.Children.Add(grid);
        }

        private Border CreateExportsLeftPanel(string projectName)
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                BorderThickness = new Thickness(1),
                Margin = new Thickness(20, 20, 10, 20)
            };

            var stackPanel = new StackPanel { Margin = new Thickness(20) };
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
            var headerPanel = new StackPanel { Orientation = Orientation.Horizontal, Margin = new Thickness(0, 0, 0, 20) };
            
            var backButton = new Button
            {
                Content = "‚Üê",
                FontSize = 18,
                Width = 40,
                Height = 40,
                Background = new SolidColorBrush(Color.FromRgb(108, 117, 125)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                Margin = new Thickness(0, 0, 15, 0)
            };
            backButton.Click += (s, e) => ShowProjectsScreen();
            headerPanel.Children.Add(backButton);
            
            var title = new TextBlock
            {
                Text = projectName,
                FontSize = 20,
                FontWeight = FontWeights.Bold,
                VerticalAlignment = VerticalAlignment.Center,
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            headerPanel.Children.Add(title);
            stackPanel.Children.Add(headerPanel);
            
            // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
            var subtitle = new TextBlock
            {
                Text = "–í—Å–µ –≤—ã–≥—Ä—É–∑–∫–∏:",
                FontSize = 14,
                Margin = new Thickness(0, 0, 0, 15),
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            stackPanel.Children.Add(subtitle);
            
            // –°–ø–∏—Å–æ–∫ –≤—ã–≥—Ä—É–∑–æ–∫
            var scrollViewer = new ScrollViewer
            {
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                MaxHeight = 400
            };
            var exportsList = new StackPanel();
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            var project = _projects.Find(p => p.Name == projectName);
            if (project != null)
            {
                foreach (var export in project.Exports)
                {
                    var exportContainer = new Grid();
                    exportContainer.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
                    exportContainer.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });
                    
                    var exportButton = new Button
                    {
                        Content = $"üì§ {export.Name}",
                        Height = 50,
                        Margin = new Thickness(0, 0, 0, 15),
                        Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                        BorderThickness = new Thickness(1),
                        BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                        HorizontalAlignment = HorizontalAlignment.Stretch,
                        HorizontalContentAlignment = HorizontalAlignment.Left,
                        Padding = new Thickness(15, 0, 0, 0),
                        FontSize = 14
                    };
                    exportButton.Click += (s, e) => ShowExportInRightPanel(projectName, export.Name);
                    Grid.SetColumn(exportButton, 0);
                    exportContainer.Children.Add(exportButton);
                    
                    // –ö–Ω–æ–ø–∫–∞ —Å —Ç—Ä–µ–º—è —Ç–æ—á–∫–∞–º–∏ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏
                    var exportMenuButton = new Button
                    {
                        Content = "‚ãÆ",
                        Width = 30,
                        Height = 50,
                        Margin = new Thickness(0, 0, 10, 15),
                        Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                        BorderThickness = new Thickness(1),
                        BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                        FontSize = 16,
                        FontWeight = FontWeights.Bold,
                        VerticalAlignment = VerticalAlignment.Top,
                        HorizontalAlignment = HorizontalAlignment.Right
                    };
                    exportMenuButton.Click += (s, e) => ShowExportContextMenu(projectName, export.Name, exportMenuButton);
                    Grid.SetColumn(exportMenuButton, 1);
                    exportContainer.Children.Add(exportMenuButton);
                    
                    exportsList.Children.Add(exportContainer);
                }
            }
            
            scrollViewer.Content = exportsList;
            stackPanel.Children.Add(scrollViewer);
            
            // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–≥—Ä—É–∑–∫–∏
            var addButton = new Button
            {
                Content = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã–≥—Ä—É–∑–∫—É",
                Height = 50,
                Margin = new Thickness(0, 20, 0, 0),
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 14
            };
            addButton.Click += (s, e) => AddExport_Click(projectName);
            stackPanel.Children.Add(addButton);
            
            border.Child = stackPanel;
            return border;
        }

        private Border CreateExportsRightPanel(string projectName)
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(248, 249, 250))
            };

            var stackPanel = new StackPanel { Margin = new Thickness(30) };
            
            var welcomeText = new TextBlock
            {
                Text = $"–ü—Ä–æ–µ–∫—Ç: {projectName}",
                FontSize = 24,
                FontWeight = FontWeights.Bold,
                HorizontalAlignment = HorizontalAlignment.Center,
                Margin = new Thickness(0, 50, 0, 20),
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            stackPanel.Children.Add(welcomeText);
            
            var descriptionText = new TextBlock
            {
                Text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–≥—Ä—É–∑–∫—É –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                FontSize = 16,
                HorizontalAlignment = HorizontalAlignment.Center,
                TextWrapping = TextWrapping.Wrap,
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            stackPanel.Children.Add(descriptionText);
            
            border.Child = stackPanel;
            return border;
        }

        private void ShowExportInRightPanel(string projectName, string exportName)
        {
            _currentExportName = exportName;
            
            
            // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –≤ MainGrid –∏ –∑–∞–º–µ–Ω—è–µ–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            var grid = MainGrid.Children[0] as Grid;
            if (grid != null && grid.Children.Count >= 3)
            {
                // –ü–æ–ª—É—á–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É
                var project = _projects.Find(p => p.Name == projectName);
                var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
                
                if (export != null)
                {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    var firstTabToShow = export.Tabs.FirstOrDefault();
                    if (firstTabToShow != null)
                    {
                        var rightPanel = CreateTabSettingsRightPanel(projectName, exportName, firstTabToShow.Name);
                        Grid.SetColumn(rightPanel, 2);
                        grid.Children.RemoveAt(2); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
                        grid.Children.Add(rightPanel); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                    }
                    else
                    {
                        // –ï—Å–ª–∏ –≤–∫–ª–∞–¥–æ–∫ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
                        var rightPanel = CreateEmptyExportRightPanel(projectName, exportName);
                        Grid.SetColumn(rightPanel, 2);
                        grid.Children.RemoveAt(2);
                        grid.Children.Add(rightPanel);
                    }
                }
                else
                {
                    MessageBox.Show($"–í—ã–≥—Ä—É–∑–∫–∞ '{exportName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ '{projectName}'", 
                        "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            else
            {
                MessageBox.Show($"Grid –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:\ngrid != null: {grid != null}\ngrid.Children.Count: {(grid?.Children.Count ?? 0)}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private Border CreateEmptyExportRightPanel(string projectName, string exportName)
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(248, 249, 250))
            };

            var stackPanel = new StackPanel { Margin = new Thickness(30) };
            
            var welcomeText = new TextBlock
            {
                Text = $"üì§ {exportName}",
                FontSize = 24,
                FontWeight = FontWeights.Bold,
                HorizontalAlignment = HorizontalAlignment.Center,
                Margin = new Thickness(0, 50, 0, 20),
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            stackPanel.Children.Add(welcomeText);
            
            var descriptionText = new TextBlock
            {
                Text = "–£ —ç—Ç–æ–π –≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∫–ª–∞–¥–æ–∫.\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
                FontSize = 16,
                HorizontalAlignment = HorizontalAlignment.Center,
                TextWrapping = TextWrapping.Wrap,
                Margin = new Thickness(0, 0, 0, 30),
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            stackPanel.Children.Add(descriptionText);
            
            // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
            var createTabButton = new Button
            {
                Content = "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É",
                Height = 50,
                Width = 200,
                Margin = new Thickness(0, 0, 0, 0),
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 16,
                FontWeight = FontWeights.Bold,
                HorizontalAlignment = HorizontalAlignment.Center
            };
            createTabButton.Click += (s, e) => AddTab_Click(projectName, exportName);
            stackPanel.Children.Add(createTabButton);
            
            border.Child = stackPanel;
            return border;
        }

        private Border CreateExportTabsRightPanel(string projectName, string exportName)
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(248, 249, 250))
            };

            var grid = new Grid();
            grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });
            grid.RowDefinitions.Add(new RowDefinition { Height = new GridLength(1, GridUnitType.Star) });
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤—ã–≥—Ä—É–∑–∫–∏
            var headerPanel = new StackPanel { Margin = new Thickness(20, 20, 20, 10) };
            var title = new TextBlock
            {
                Text = $"üì§ {exportName}",
                FontSize = 20,
                FontWeight = FontWeights.Bold,
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            headerPanel.Children.Add(title);
            
            var subtitle = new TextBlock
            {
                Text = "–í–∫–ª–∞–¥–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                FontSize = 14,
                Margin = new Thickness(0, 5, 0, 0),
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            headerPanel.Children.Add(subtitle);
            Grid.SetRow(headerPanel, 0);
            grid.Children.Add(headerPanel);
            
            // –°–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫
            var tabsPanel = new StackPanel { Margin = new Thickness(20, 0, 20, 20) };
            var scrollViewer = new ScrollViewer { VerticalScrollBarVisibility = ScrollBarVisibility.Auto };
            var tabsList = new StackPanel();
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É
            var project = _projects.Find(p => p.Name == projectName);
            var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
            if (export != null)
            {
                foreach (var tab in export.Tabs)
                {
                    var tabButton = new Button
                    {
                        Content = $"üìã {tab.Name}",
                        Height = 50,
                        Margin = new Thickness(0, 0, 0, 10),
                        Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                        BorderThickness = new Thickness(1),
                        BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                        HorizontalAlignment = HorizontalAlignment.Stretch,
                        HorizontalContentAlignment = HorizontalAlignment.Left,
                        Padding = new Thickness(15, 0, 0, 0),
                        FontSize = 14
                    };
                    tabButton.Click += (s, e) => ShowTabSettingsInRightPanel(projectName, exportName, tab.Name);
                    tabsList.Children.Add(tabButton);
                }
            }
            
            scrollViewer.Content = tabsList;
            tabsPanel.Children.Add(scrollViewer);
            
            // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
            var addButton = new Button
            {
                Content = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥–∫—É",
                Height = 40,
                Margin = new Thickness(0, 10, 0, 0),
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 14
            };
            addButton.Click += (s, e) => AddTab_Click(projectName, exportName);
            tabsPanel.Children.Add(addButton);
            
            Grid.SetRow(tabsPanel, 1);
            grid.Children.Add(tabsPanel);
            
            border.Child = grid;
            return border;
        }

        private void ShowTabSettingsInRightPanel(string projectName, string exportName, string tabName)
        {
            // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –≤ MainGrid –∏ –∑–∞–º–µ–Ω—è–µ–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤–∫–ª–∞–¥–∫–∏
            var grid = MainGrid.Children[0] as Grid;
            if (grid != null && grid.Children.Count >= 3)
            {
                var rightPanel = CreateTabSettingsRightPanel(projectName, exportName, tabName);
                Grid.SetColumn(rightPanel, 2);
                grid.Children.RemoveAt(2); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
                grid.Children.Add(rightPanel); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            }
        }

        private void ShowExportScreen(string projectName, string exportName)
        {
            _currentExportName = exportName;
            MainGrid.Children.Clear();
            
            var grid = new Grid();
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(300) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(5) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            
            // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –°–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫
            var leftPanel = CreateTabsLeftPanel(projectName, exportName);
            Grid.SetColumn(leftPanel, 0);
            grid.Children.Add(leftPanel);
            
            // GridSplitter
            var splitter = new GridSplitter
            {
                Width = 5,
                Background = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                HorizontalAlignment = HorizontalAlignment.Stretch
            };
            Grid.SetColumn(splitter, 1);
            grid.Children.Add(splitter);
            
            // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∫–ª–∞–¥–∫–∏
            var rightPanel = CreateTabSettingsRightPanel(projectName, exportName, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É");
            Grid.SetColumn(rightPanel, 2);
            grid.Children.Add(rightPanel);
            
            MainGrid.Children.Add(grid);
        }

        private Border CreateTabsLeftPanel(string projectName, string exportName)
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                BorderThickness = new Thickness(1),
                Margin = new Thickness(20, 20, 10, 20)
            };

            var stackPanel = new StackPanel { Margin = new Thickness(20) };
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
            var headerPanel = new StackPanel { Orientation = Orientation.Horizontal, Margin = new Thickness(0, 0, 0, 20) };
            
            var backButton = new Button
            {
                Content = "‚Üê",
                FontSize = 18,
                Width = 40,
                Height = 40,
                Background = new SolidColorBrush(Color.FromRgb(108, 117, 125)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                Margin = new Thickness(0, 0, 15, 0)
            };
            backButton.Click += (s, e) => ShowProjectScreen(projectName);
            headerPanel.Children.Add(backButton);
            
            var title = new TextBlock
            {
                Text = exportName,
                FontSize = 20,
                FontWeight = FontWeights.Bold,
                VerticalAlignment = VerticalAlignment.Center,
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            headerPanel.Children.Add(title);
            stackPanel.Children.Add(headerPanel);
            
            // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
            var subtitle = new TextBlock
            {
                Text = "–í–∫–ª–∞–¥–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                FontSize = 14,
                Margin = new Thickness(0, 0, 0, 15),
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            stackPanel.Children.Add(subtitle);
            
            // –°–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫
            var scrollViewer = new ScrollViewer
            {
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                MaxHeight = 400
            };
            var tabsList = new StackPanel();
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É
            var project = _projects.Find(p => p.Name == projectName);
            var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
            if (export != null)
            {
                foreach (var tab in export.Tabs)
                {
                    var tabButton = new Button
                    {
                        Content = $"üìã {tab.Name}",
                        Height = 50,
                        Margin = new Thickness(0, 0, 0, 15),
                        Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                        BorderThickness = new Thickness(1),
                        BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                        HorizontalAlignment = HorizontalAlignment.Stretch,
                        HorizontalContentAlignment = HorizontalAlignment.Left,
                        Padding = new Thickness(15, 0, 0, 0),
                        FontSize = 14
                    };
                    tabButton.Click += (s, e) => ShowTabSettingsScreen(projectName, exportName, tab.Name);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ü–ö–ú
                    var contextMenu = new ContextMenu();
                    
                    var renameItem = new MenuItem
                    {
                        Header = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
                        Icon = new TextBlock { Text = "‚úèÔ∏è", FontSize = 14 }
                    };
                    renameItem.Click += (s, e) => RenameTab(projectName, exportName, tab.Name);
                    contextMenu.Items.Add(renameItem);
                    
                    var deleteItem = new MenuItem
                    {
                        Header = "–£–¥–∞–ª–∏—Ç—å",
                        Icon = new TextBlock { Text = "üóëÔ∏è", FontSize = 14 }
                    };
                    deleteItem.Click += (s, e) => DeleteTab(projectName, exportName, tab.Name);
                    contextMenu.Items.Add(deleteItem);
                    
                    tabButton.ContextMenu = contextMenu;
                    tabsList.Children.Add(tabButton);
                }
            }
            
            scrollViewer.Content = tabsList;
            stackPanel.Children.Add(scrollViewer);
            
            // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
            var addButton = new Button
            {
                Content = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥–∫—É",
                Height = 50,
                Margin = new Thickness(0, 20, 0, 0),
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 14
            };
            addButton.Click += (s, e) => AddTab_Click(projectName, exportName);
            stackPanel.Children.Add(addButton);
            
            border.Child = stackPanel;
            return border;
        }

        private Border CreateTabSettingsRightPanel(string projectName, string exportName, string tabName)
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(248, 249, 250))
            };

            var grid = new Grid();
            grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto }); // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto }); // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
            grid.RowDefinitions.Add(new RowDefinition { Height = new GridLength(1, GridUnitType.Star) }); // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            var headerPanel = new StackPanel { Margin = new Thickness(20, 20, 20, 10) };
            var title = new TextBlock
            {
                Text = $"üì§ {exportName} - {tabName}",
                FontSize = 18,
                FontWeight = FontWeights.Bold,
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            headerPanel.Children.Add(title);
            Grid.SetRow(headerPanel, 0);
            grid.Children.Add(headerPanel);
            
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
            var tabsPanel = new StackPanel 
            { 
                Orientation = Orientation.Horizontal,
                Margin = new Thickness(20, 0, 20, 10)
            };
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É –∏ —Å–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
            var project = _projects.Find(p => p.Name == projectName);
            var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
            if (export != null)
            {
                foreach (var tab in export.Tabs)
                {
                    var tabButton = new Button
                    {
                        Content = tab.Name,
                        Height = 35,
                        MinWidth = 100,
                        Margin = new Thickness(0, 0, 5, 0),
                        Background = tab.Name == tabName ? 
                            new SolidColorBrush(Color.FromRgb(0, 123, 255)) : 
                            new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                        Foreground = tab.Name == tabName ? 
                            Brushes.White : 
                            new SolidColorBrush(Color.FromRgb(33, 37, 41)),
                        BorderThickness = new Thickness(1),
                        BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                        FontSize = 12
                    };
                    tabButton.Click += (s, e) => ShowTabSettingsInRightPanel(projectName, exportName, tab.Name);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ü–ö–ú
                    var contextMenu = new ContextMenu();
                    
                    var renameItem = new MenuItem
                    {
                        Header = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
                        Icon = new TextBlock { Text = "‚úèÔ∏è", FontSize = 14 }
                    };
                    renameItem.Click += (s, e) => RenameTab(projectName, exportName, tab.Name);
                    contextMenu.Items.Add(renameItem);
                    
                    var deleteItem = new MenuItem
                    {
                        Header = "–£–¥–∞–ª–∏—Ç—å",
                        Icon = new TextBlock { Text = "üóëÔ∏è", FontSize = 14 }
                    };
                    deleteItem.Click += (s, e) => DeleteTab(projectName, exportName, tab.Name);
                    contextMenu.Items.Add(deleteItem);
                    
                    tabButton.ContextMenu = contextMenu;
                    tabsPanel.Children.Add(tabButton);
                }
                
                // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
                var addTabButton = new Button
                {
                    Content = "+",
                    Height = 35,
                    Width = 50, // –ü–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã –æ—Ç –æ–±—ã—á–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ (100/2)
                    Margin = new Thickness(0, 0, 5, 0),
                    Background = new SolidColorBrush(Color.FromRgb(40, 167, 69)), // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
                    Foreground = Brushes.White,
                    BorderThickness = new Thickness(1),
                    BorderBrush = new SolidColorBrush(Color.FromRgb(40, 167, 69)),
                    FontSize = 16,
                    FontWeight = FontWeights.Bold
                };
                addTabButton.Click += (s, e) => AddTabFromHorizontalPanel(projectName, exportName);
                tabsPanel.Children.Add(addTabButton);
            }
            
            Grid.SetRow(tabsPanel, 1);
            grid.Children.Add(tabsPanel);
            
            // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ - –ø–µ—Ä–µ—á–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            var contentPanel = new ScrollViewer 
            { 
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                Margin = new Thickness(20, 0, 20, 20)
            };
            
            var parametersStack = new StackPanel();
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            var parametersTitle = new TextBlock
            {
                Text = "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                FontSize = 16,
                FontWeight = FontWeights.SemiBold,
                Margin = new Thickness(0, 0, 0, 15),
                Foreground = new SolidColorBrush(Color.FromRgb(73, 80, 87))
            };
            parametersStack.Children.Add(parametersTitle);
            
            // –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            var parametersList = new StackPanel();
            
            // –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
            var sampleParameters = new[]
            {
                "üìÅ –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–¥–µ–ª—è–º–∏",
                "üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            };
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä "–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–¥–µ–ª—è–º–∏"
            var modelsPathBorder = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                BorderThickness = new Thickness(1),
                CornerRadius = new CornerRadius(4),
                Padding = new Thickness(15, 10, 15, 10),
                Margin = new Thickness(0, 0, 0, 8)
            };
            
            var modelsPathGrid = new Grid();
            modelsPathGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            modelsPathGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });
            
            var modelsPathText = new TextBlock
            {
                Text = "üìÅ –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–¥–µ–ª—è–º–∏:",
                FontSize = 14,
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41)),
                VerticalAlignment = VerticalAlignment.Center
            };
            Grid.SetColumn(modelsPathText, 0);
            modelsPathGrid.Children.Add(modelsPathText);
            
            var browseModelsButton = new Button
            {
                Content = "–û–±–∑–æ—Ä",
                Width = 80,
                Height = 30,
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 12
            };
            browseModelsButton.Click += (s, e) => BrowseModelsFolder_Click(projectName, exportName, tabName);
            Grid.SetColumn(browseModelsButton, 1);
            modelsPathGrid.Children.Add(browseModelsButton);
            
            modelsPathBorder.Child = modelsPathGrid;
            parametersList.Children.Add(modelsPathBorder);
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            var viewResultsBorder = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                BorderThickness = new Thickness(1),
                CornerRadius = new CornerRadius(4),
                Padding = new Thickness(15, 10, 15, 10),
                Margin = new Thickness(0, 0, 0, 8)
            };
            
            var viewResultsGrid = new Grid();
            viewResultsGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            viewResultsGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });
            
            var viewResultsText = new TextBlock
            {
                Text = "üìÇ –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
                FontSize = 14,
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41)),
                VerticalAlignment = VerticalAlignment.Center
            };
            Grid.SetColumn(viewResultsText, 0);
            viewResultsGrid.Children.Add(viewResultsText);
            
            var viewResultsButton = new Button
            {
                Content = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                Width = 150,
                Height = 30,
                Background = new SolidColorBrush(Color.FromRgb(40, 167, 69)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 12
            };
            viewResultsButton.Click += (s, e) => ViewResultsFolder_Click(projectName, exportName, tabName);
            Grid.SetColumn(viewResultsButton, 1);
            viewResultsGrid.Children.Add(viewResultsButton);
            
            viewResultsBorder.Child = viewResultsGrid;
            parametersList.Children.Add(viewResultsBorder);
            
            parametersStack.Children.Add(parametersList);
            
            // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            var exportButton = new Button
            {
                Content = "üöÄ –ù–∞—á–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç",
                Height = 50,
                Margin = new Thickness(0, 20, 0, 0),
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 16,
                FontWeight = FontWeights.Bold
            };
            exportButton.Click += (s, e) => StartExport_Click(projectName, exportName, tabName);
            parametersStack.Children.Add(exportButton);
            
            contentPanel.Content = parametersStack;
            Grid.SetRow(contentPanel, 2);
            grid.Children.Add(contentPanel);
            
            border.Child = grid;
            return border;
        }

        private void ShowTabSettingsScreen(string projectName, string exportName, string tabName)
        {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
            MessageBox.Show($"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∫–ª–∞–¥–∫–∏: {tabName}", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void AddProject_Click(object sender, RoutedEventArgs e)
        {
            var createProjectWindow = new AddProjectWindow();
            if (createProjectWindow.ShowDialog() == true)
            {
                try
                {
                    var projectName = createProjectWindow.ProjectName;
                    var projectPath = Path.Combine("C:\\RevitExporter", "–ü—Ä–æ–µ–∫—Ç—ã", projectName);
                    
                    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
                    if (!Directory.Exists(projectPath))
                    {
                        Directory.CreateDirectory(projectPath);
                    }
                    
                    var newProject = new Project
                    {
                        Name = projectName,
                        FolderPath = projectPath
                    };

                    _projects.Add(newProject);
                    SaveProjects();
                    ShowProjectsScreen();
                    
                    MessageBox.Show($"–ü—Ä–æ–µ–∫—Ç '{projectName}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ:\n{projectPath}", 
                        "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {ex.Message}", 
                        "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void AddExistingProject_Click(object sender, RoutedEventArgs e)
        {
            using (var dialog = new System.Windows.Forms.FolderBrowserDialog())
            {
                dialog.Description = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞";
                dialog.ShowNewFolderButton = false;
                
                if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    try
                    {
                        var projectPath = dialog.SelectedPath;
                        var projectName = Path.GetFileName(projectPath);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç
                        if (_projects.Any(p => p.FolderPath.Equals(projectPath, StringComparison.OrdinalIgnoreCase)))
                        {
                            MessageBox.Show("–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                MessageBoxButton.OK, MessageBoxImage.Warning);
                            return;
                        }
                        
                        // –°–∫–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
                        var project = ScanProjectFolder(projectPath, projectName);
                        
                        if (project != null)
                        {
                            _projects.Add(project);
                            SaveProjects();
                            ShowProjectsScreen();
                            
                            MessageBox.Show($"–ü—Ä–æ–µ–∫—Ç '{projectName}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n" +
                                          $"–ù–∞–π–¥–µ–Ω–æ –≤—ã–≥—Ä—É–∑–æ–∫: {project.Exports.Count}\n" +
                                          $"–ù–∞–π–¥–µ–Ω–æ –≤–∫–ª–∞–¥–æ–∫: {project.Exports.Sum(exp => exp.Tabs.Count)}", 
                                          "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: {ex.Message}", 
                            "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }

        private Project ScanProjectFolder(string projectPath, string projectName)
        {
            try
            {
                var project = new Project
                {
                    Name = projectName,
                    FolderPath = projectPath
                };

                // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –≤—ã–≥—Ä—É–∑–æ–∫
                if (Directory.Exists(projectPath))
                {
                    var exportFolders = Directory.GetDirectories(projectPath);
                    
                    foreach (var exportFolder in exportFolders)
                    {
                        var exportName = Path.GetFileName(exportFolder);
                        var export = new Export
                        {
                            Name = exportName,
                            FolderPath = exportFolder
                        };

                        // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –≤–Ω—É—Ç—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–∏
                        var tabFolders = Directory.GetDirectories(exportFolder);
                        foreach (var tabFolder in tabFolders)
                        {
                            var tabName = Path.GetFileName(tabFolder);
                            var tab = new ExportTab
                            {
                                Name = tabName,
                                FolderPath = tabFolder,
                                RevitVersion = "2023" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            };

                            export.Tabs.Add(tab);
                        }

                        project.Exports.Add(export);
                    }
                }

                return project;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                return null;
            }
        }

        private void AddExport_Click(string projectName)
        {
            var addExportWindow = new AddExportWindow();
            if (addExportWindow.ShowDialog() == true)
            {
                var project = _projects.Find(p => p.Name == projectName);
                if (project != null)
                {
                    try
                    {
                        var exportName = addExportWindow.ExportName;
                        var exportFolderPath = Path.Combine(project.FolderPath, exportName);
                        
                        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –≤—ã–≥—Ä—É–∑–∫–∏
                        Directory.CreateDirectory(exportFolderPath);
                        
                        var newExport = new Export
                        {
                            Name = exportName,
                            FolderPath = exportFolderPath
                        };

                        project.Exports.Add(newExport);
                        SaveProjects();
                        ShowProjectScreen(projectName);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤—ã–≥—Ä—É–∑–∫–∏: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }

        private void AddTab_Click(string projectName, string exportName)
        {
            var project = _projects.Find(p => p.Name == projectName);
            var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
            if (export != null)
            {
                try
                {
                    var tabNumber = export.Tabs.Count + 1;
                    var tabName = $"–í–∫–ª–∞–¥–∫–∞ {tabNumber}";
                    var tabFolderPath = Path.Combine(export.FolderPath, tabName);
                    
                    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
                    Directory.CreateDirectory(tabFolderPath);
                    
                    var newTab = new ExportTab
                    {
                        Name = tabName,
                        FolderPath = tabFolderPath,
                        RevitVersion = "2023"
                    };

                    export.Tabs.Add(newTab);
                    SaveProjects();
                    
                    // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏
                    var grid = MainGrid.Children[0] as Grid;
                    if (grid != null && grid.Children.Count >= 3)
                    {
                        var rightPanel = CreateTabSettingsRightPanel(projectName, exportName, newTab.Name);
                        Grid.SetColumn(rightPanel, 2);
                        grid.Children.RemoveAt(2);
                        grid.Children.Add(rightPanel);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤–∫–ª–∞–¥–∫–∏: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        public void GoBackToProjects()
        {
            ShowProjectsScreen();
        }

        private void AddTabFromHorizontalPanel(string projectName, string exportName)
        {
            var project = _projects.Find(p => p.Name == projectName);
            var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
            if (export != null)
            {
                try
                {
                    var tabNumber = export.Tabs.Count + 1;
                    var tabName = $"–í–∫–ª–∞–¥–∫–∞ {tabNumber}";
                    var tabFolderPath = Path.Combine(export.FolderPath, tabName);
                    
                    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
                    Directory.CreateDirectory(tabFolderPath);
                    
                    var newTab = new ExportTab
                    {
                        Name = tabName,
                        FolderPath = tabFolderPath,
                        RevitVersion = "2023"
                    };

                    export.Tabs.Add(newTab);
                    SaveProjects();
                    
                    // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏
                    var grid = MainGrid.Children[0] as Grid;
                    if (grid != null && grid.Children.Count >= 3)
                    {
                        var rightPanel = CreateTabSettingsRightPanel(projectName, exportName, newTab.Name);
                        Grid.SetColumn(rightPanel, 2);
                        grid.Children.RemoveAt(2);
                        grid.Children.Add(rightPanel);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤–∫–ª–∞–¥–∫–∏: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void ShowProjectContextMenu(string projectName, Button menuButton)
        {
            var contextMenu = new ContextMenu();
            
            var renameItem = new MenuItem
            {
                Header = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
                Icon = new TextBlock { Text = "‚úèÔ∏è", FontSize = 14 }
            };
            renameItem.Click += (s, e) => RenameProject(projectName);
            contextMenu.Items.Add(renameItem);
            
            var deleteItem = new MenuItem
            {
                Header = "–£–¥–∞–ª–∏—Ç—å",
                Icon = new TextBlock { Text = "üóëÔ∏è", FontSize = 14 }
            };
            deleteItem.Click += (s, e) => DeleteProject(projectName);
            contextMenu.Items.Add(deleteItem);
            
            contextMenu.PlacementTarget = menuButton;
            contextMenu.Placement = System.Windows.Controls.Primitives.PlacementMode.Bottom;
            contextMenu.IsOpen = true;
        }

        private void ShowExportContextMenu(string projectName, string exportName, Button menuButton)
        {
            var contextMenu = new ContextMenu();
            
            var renameItem = new MenuItem
            {
                Header = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
                Icon = new TextBlock { Text = "‚úèÔ∏è", FontSize = 14 }
            };
            renameItem.Click += (s, e) => RenameExport(projectName, exportName);
            contextMenu.Items.Add(renameItem);
            
            var deleteItem = new MenuItem
            {
                Header = "–£–¥–∞–ª–∏—Ç—å",
                Icon = new TextBlock { Text = "üóëÔ∏è", FontSize = 14 }
            };
            deleteItem.Click += (s, e) => DeleteExport(projectName, exportName);
            contextMenu.Items.Add(deleteItem);
            
            contextMenu.PlacementTarget = menuButton;
            contextMenu.Placement = System.Windows.Controls.Primitives.PlacementMode.Bottom;
            contextMenu.IsOpen = true;
        }

        private void RenameProject(string projectName)
        {
            var renameWindow = new RenameWindow(projectName);
            if (renameWindow.ShowDialog() == true)
            {
                var project = _projects.Find(p => p.Name == projectName);
                if (project != null && !string.IsNullOrWhiteSpace(renameWindow.NewName))
                {
                    try
                    {
                        var oldPath = project.FolderPath;
                        var newPath = Path.Combine(Path.GetDirectoryName(oldPath), renameWindow.NewName);
                        
                        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É
                        Directory.Move(oldPath, newPath);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
                        project.Name = renameWindow.NewName;
                        project.FolderPath = newPath;
                        
                        SaveProjects();
                        ShowProjectsScreen();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }

        private void DeleteProject(string projectName)
        {
            var result = MessageBox.Show(
                $"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç '{projectName}'?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç –≤—Å—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞.",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                MessageBoxButton.YesNo,
                MessageBoxImage.Warning);
                
            if (result == MessageBoxResult.Yes)
            {
                try
                {
                    var project = _projects.Find(p => p.Name == projectName);
                    if (project != null)
                    {
                        // –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
                        if (Directory.Exists(project.FolderPath))
                        {
                            Directory.Delete(project.FolderPath, true);
                        }
                        
                        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
                        _projects.RemoveAll(p => p.Name == projectName);
                        SaveProjects();
                        ShowProjectsScreen();
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void RenameExport(string projectName, string exportName)
        {
            var renameWindow = new RenameWindow(exportName);
            if (renameWindow.ShowDialog() == true)
            {
                var project = _projects.Find(p => p.Name == projectName);
                var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
                if (export != null && !string.IsNullOrWhiteSpace(renameWindow.NewName))
                {
                    try
                    {
                        var oldPath = export.FolderPath;
                        var newPath = Path.Combine(Path.GetDirectoryName(oldPath), renameWindow.NewName);
                        
                        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É –≤—ã–≥—Ä—É–∑–∫–∏
                        Directory.Move(oldPath, newPath);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–≥—Ä—É–∑–∫–∏
                        export.Name = renameWindow.NewName;
                        export.FolderPath = newPath;
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
                        foreach (var tab in export.Tabs)
                        {
                            var oldTabPath = tab.FolderPath;
                            var newTabPath = Path.Combine(newPath, Path.GetFileName(oldTabPath));
                            tab.FolderPath = newTabPath;
                        }
                        
                        SaveProjects();
                        ShowProjectScreen(projectName);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤—ã–≥—Ä—É–∑–∫–∏: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }

        private void DeleteExport(string projectName, string exportName)
        {
            var result = MessageBox.Show(
                $"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–≥—Ä—É–∑–∫—É '{exportName}'?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç –≤—Å—é –ø–∞–ø–∫—É –≤—ã–≥—Ä—É–∑–∫–∏.",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                MessageBoxButton.YesNo,
                MessageBoxImage.Warning);
                
            if (result == MessageBoxResult.Yes)
            {
                try
                {
                    var project = _projects.Find(p => p.Name == projectName);
                    var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
                    if (export != null)
                    {
                        // –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –≤—ã–≥—Ä—É–∑–∫–∏
                        if (Directory.Exists(export.FolderPath))
                        {
                            Directory.Delete(export.FolderPath, true);
                        }
                        
                        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–≥—Ä—É–∑–æ–∫
                        project.Exports.Remove(export);
                        SaveProjects();
                        ShowProjectScreen(projectName);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤—ã–≥—Ä—É–∑–∫–∏: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void RenameTab(string projectName, string exportName, string tabName)
        {
            var renameWindow = new RenameWindow(tabName);
            if (renameWindow.ShowDialog() == true)
            {
                var project = _projects.Find(p => p.Name == projectName);
                var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
                var tab = export?.Tabs.FirstOrDefault(t => t.Name == tabName);
                
                if (tab != null && !string.IsNullOrWhiteSpace(renameWindow.NewName))
                {
                    try
                    {
                        var oldPath = tab.FolderPath;
                        var newPath = Path.Combine(Path.GetDirectoryName(oldPath), renameWindow.NewName);
                        
                        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
                        Directory.Move(oldPath, newPath);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
                        tab.Name = renameWindow.NewName;
                        tab.FolderPath = newPath;
                        
                        SaveProjects();
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                        var grid = MainGrid.Children[0] as Grid;
                        if (grid != null && grid.Children.Count >= 3)
                        {
                            var rightPanel = CreateTabSettingsRightPanel(projectName, exportName, tab.Name);
                            Grid.SetColumn(rightPanel, 2);
                            grid.Children.RemoveAt(2);
                            grid.Children.Add(rightPanel);
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤–∫–ª–∞–¥–∫–∏: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }

        private void DeleteTab(string projectName, string exportName, string tabName)
        {
            var result = MessageBox.Show(
                $"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∫–ª–∞–¥–∫—É '{tabName}'?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç –ø–∞–ø–∫—É –≤–∫–ª–∞–¥–∫–∏.",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                MessageBoxButton.YesNo,
                MessageBoxImage.Warning);
                
            if (result == MessageBoxResult.Yes)
            {
                try
                {
                    var project = _projects.Find(p => p.Name == projectName);
                    var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
                    
                    if (export != null)
                    {
                        var tabToRemove = export.Tabs.FirstOrDefault(t => t.Name == tabName);
                        if (tabToRemove != null)
                        {
                            // –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
                            if (Directory.Exists(tabToRemove.FolderPath))
                            {
                                Directory.Delete(tabToRemove.FolderPath, true);
                            }
                            
                            export.Tabs.Remove(tabToRemove);
                        }
                        SaveProjects();
                        
                        // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∫–ª–∞–¥–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–≥—Ä—É–∑–∫–∏
                        if (export.Tabs.Count == 0)
                        {
                            ShowProjectScreen(projectName);
                        }
                        else
                        {
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –æ—Å—Ç–∞–≤—à—É—é—Å—è –≤–∫–ª–∞–¥–∫—É
                            var firstTab = export.Tabs.FirstOrDefault();
                            if (firstTab != null)
                            {
                                var grid = MainGrid.Children[0] as Grid;
                                if (grid != null && grid.Children.Count >= 3)
                                {
                                    var rightPanel = CreateTabSettingsRightPanel(projectName, exportName, firstTab.Name);
                                    Grid.SetColumn(rightPanel, 2);
                                    grid.Children.RemoveAt(2);
                                    grid.Children.Add(rightPanel);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤–∫–ª–∞–¥–∫–∏: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void BrowseModelsFolder_Click(string projectName, string exportName, string tabName)
        {
            var dialog = new System.Windows.Forms.FolderBrowserDialog
            {
                Description = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –º–æ–¥–µ–ª—è–º–∏ Revit",
                ShowNewFolderButton = false
            };

            if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                try
                {
                    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –≤–∫–ª–∞–¥–∫–∏
                    var projectPath = Path.Combine("C:\\RevitExporter", "–ü—Ä–æ–µ–∫—Ç—ã", projectName);
                    var exportPath = Path.Combine(projectPath, exportName);
                    var tabPath = Path.Combine(exportPath, tabName);
                    var modelsPath = Path.Combine(tabPath, "–ú–æ–¥–µ–ª–∏");


                    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É "–ú–æ–¥–µ–ª–∏", –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    if (Directory.Exists(modelsPath))
                    {
                        Directory.Delete(modelsPath, true);
                    }

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É "–ú–æ–¥–µ–ª–∏"
                    Directory.CreateDirectory(modelsPath);

                    // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ .rvt —Ñ–∞–π–ª—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–µ—Ä–∞—Ä—Ö–∏–∏
                    CopyRvtFilesRecursively(dialog.SelectedPath, modelsPath);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª–∞—Å—å
                    if (Directory.Exists(modelsPath))
                    {
                        var filesCount = Directory.GetFiles(modelsPath, "*.rvt", SearchOption.AllDirectories).Length;
                        MessageBox.Show($"–ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–∞–ø–∫—É:\n{modelsPath}\n\n–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ .rvt —Ñ–∞–π–ª–æ–≤: {filesCount}", 
                            "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                    else
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {modelsPath}", 
                            "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π:\n{ex.Message}", 
                        "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void ViewResultsFolder_Click(string projectName, string exportName, string tabName)
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –≤–∫–ª–∞–¥–∫–∏
                var projectPath = Path.Combine("C:\\RevitExporter", "–ü—Ä–æ–µ–∫—Ç—ã", projectName);
                var exportPath = Path.Combine(projectPath, exportName);
                var tabPath = Path.Combine(exportPath, tabName);

                // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (!Directory.Exists(tabPath))
                {
                    Directory.CreateDirectory(tabPath);
                }

                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ Windows
                System.Diagnostics.Process.Start("explorer.exe", tabPath);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n{ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void CopyRvtFilesRecursively(string sourceDir, string targetDir)
        {
            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!Directory.Exists(targetDir))
            {
                Directory.CreateDirectory(targetDir);
            }

            // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ .rvt —Ñ–∞–π–ª—ã –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
            var rvtFiles = Directory.GetFiles(sourceDir, "*.rvt");
            foreach (var file in rvtFiles)
            {
                var fileName = Path.GetFileName(file);
                var targetFile = Path.Combine(targetDir, fileName);
                File.Copy(file, targetFile, true);
            }

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
            var subDirs = Directory.GetDirectories(sourceDir);
            foreach (var subDir in subDirs)
            {
                var dirName = Path.GetFileName(subDir);
                var targetSubDir = Path.Combine(targetDir, dirName);
                CopyRvtFilesRecursively(subDir, targetSubDir);
            }
        }

        private void StartExport_Click(string projectName, string exportName, string tabName)
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if (string.IsNullOrEmpty(projectName))
                {
                    MessageBox.Show("–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                if (string.IsNullOrEmpty(exportName))
                {
                    MessageBox.Show("–ò–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                if (string.IsNullOrEmpty(tabName))
                {
                    MessageBox.Show("–ò–º—è –≤–∫–ª–∞–¥–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ "–ú–æ–¥–µ–ª–∏"
                var projectPath = Path.Combine("C:\\RevitExporter", "–ü—Ä–æ–µ–∫—Ç—ã", projectName);
                var exportPath = Path.Combine(projectPath, exportName);
                var tabPath = Path.Combine(exportPath, tabName);
                var modelsPath = Path.Combine(tabPath, "–ú–æ–¥–µ–ª–∏");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ "–ú–æ–¥–µ–ª–∏"
                if (!Directory.Exists(modelsPath))
                {
                    MessageBox.Show("–ü–∞–ø–∫–∞ '–ú–æ–¥–µ–ª–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –º–æ–¥–µ–ª—è–º–∏.", 
                        "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ .rvt —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ "–ú–æ–¥–µ–ª–∏" (–≤–∫–ª—é—á–∞—è –ø–æ–¥–ø–∞–ø–∫–∏)
                var rvtFiles = GetAllRvtFiles(modelsPath);
                
                if (rvtFiles.Count == 0)
                {
                    MessageBox.Show("–í –ø–∞–ø–∫–µ '–ú–æ–¥–µ–ª–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ .rvt —Ñ–∞–π–ª–æ–≤.", 
                        "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                var progressWindow = new ExportProgressWindow();
                if (progressWindow == null)
                {
                    MessageBox.Show("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                progressWindow.SetTotalModels(rvtFiles.Count);
                progressWindow.Show();

                // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
                var resultsPath = tabPath; // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
                if (!Directory.Exists(resultsPath))
                {
                    Directory.CreateDirectory(resultsPath);
                }

                // –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º UI
                try
                {
                    PerformExportWithUIUpdates(rvtFiles, modelsPath, resultsPath, progressWindow);
                }
                catch (Exception ex)
                {
                    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –≤ PerformExport: {ex.Message}");
                    System.Diagnostics.Debug.WriteLine($"StackTrace: {ex.StackTrace}");
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                    progressWindow.Close();
                    MessageBox.Show($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:\n{ex.Message}\n\nStackTrace:\n{ex.StackTrace}", 
                        "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
                
                // –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
                if (!progressWindow.IsCancelled)
                {
                    progressWindow.CompleteExport();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:\n{ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void PerformExportWithUIUpdates(List<string> rvtFiles, string modelsPath, string resultsPath, ExportProgressWindow progressWindow)
        {
            // –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            var startTime = DateTime.Now;
            
            try
            {
                var successCount = 0;
                var errorCount = 0;
                var errorMessages = new List<string>();

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π .rvt —Ñ–∞–π–ª
                for (int i = 0; i < rvtFiles.Count; i++)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—Ç–º–µ–Ω–∞
                    if (progressWindow.IsCancelled)
                    {
                        break;
                    }

                    var rvtFile = rvtFiles[i];
                    var fileName = Path.GetFileName(rvtFile);

                    try
                    {
                        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        var relativePath = GetRelativePath(modelsPath, rvtFile);
                        var outputFileName = relativePath.Replace("\\", "_").Replace("/", "_").Replace(".rvt", ".csv");
                        var outputFile = Path.Combine(resultsPath, outputFileName);

                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        UpdateProgressWithUI(progressWindow, i, rvtFiles.Count, fileName, 10);

                        // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .rvt —Ñ–∞–π–ª–∞
                        ExportRvtFileData(rvtFile, outputFile, progressWindow, i, rvtFiles.Count);

                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        UpdateProgressWithUI(progressWindow, i + 1, rvtFiles.Count, fileName, 100);

                        successCount++;
                    }
                    catch (Exception ex)
                    {
                        errorCount++;
                        errorMessages.Add($"–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {fileName}: {ex.Message}");
                        UpdateProgressWithUI(progressWindow, i + 1, rvtFiles.Count, fileName, 100);
                    }
                }

                // –ï—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (!progressWindow.IsCancelled)
                {
                    var resultMessage = $"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successCount} —Ñ–∞–π–ª–æ–≤";
                    if (errorCount > 0)
                    {
                        resultMessage += $"\n–û—à–∏–±–æ–∫: {errorCount}";
                        resultMessage += $"\n\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n{string.Join("\n", errorMessages.Take(5))}";
                        if (errorMessages.Count > 5)
                        {
                            resultMessage += $"\n... –∏ –µ—â–µ {errorMessages.Count - 5} –æ—à–∏–±–æ–∫";
                        }
                    }

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
                    MessageBox.Show(resultMessage, "–†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞", MessageBoxButton.OK, 
                        errorCount > 0 ? MessageBoxImage.Warning : MessageBoxImage.Information);

                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    System.Diagnostics.Process.Start("explorer.exe", resultsPath);
                }
            }
            catch (Exception ex)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
                System.Diagnostics.Debug.WriteLine($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ PerformExport: {ex.Message}");
                System.Diagnostics.Debug.WriteLine($"StackTrace: {ex.StackTrace}");
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É (–º—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
                MessageBox.Show($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{ex.Message}\n\nStackTrace:\n{ex.StackTrace}", 
                    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                
                throw; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –º–µ—Ç–æ–¥–µ
            }
        }

        private void UpdateProgressWithUI(ExportProgressWindow progressWindow, int processedModels, int totalModels, string currentModel, double currentModelProgress)
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progressWindow.UpdateProgress(processedModels, totalModels, currentModel, currentModelProgress);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
            UpdateUI();
        }

        private void UpdateUI()
        {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
            System.Windows.Forms.Application.DoEvents();
            
            // –¢–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Dispatcher –¥–ª—è WPF
            Dispatcher.BeginInvoke(new Action(() => { }), System.Windows.Threading.DispatcherPriority.Background);
        }

        private string FormatDuration(TimeSpan duration)
        {
            if (duration.TotalDays >= 1)
            {
                return $"{duration.Days}–¥ {duration.Hours}—á {duration.Minutes}–º {duration.Seconds}—Å";
            }
            else if (duration.TotalHours >= 1)
            {
                return $"{duration.Hours}—á {duration.Minutes}–º {duration.Seconds}—Å";
            }
            else if (duration.TotalMinutes >= 1)
            {
                return $"{duration.Minutes}–º {duration.Seconds}—Å";
            }
            else
            {
                return $"{duration.TotalSeconds:F1}—Å";
            }
        }

        private void PerformExport(List<string> rvtFiles, string modelsPath, string resultsPath, ExportProgressWindow progressWindow)
        {
            int successCount = 0;
            int errorCount = 0;
            var errorMessages = new List<string>();

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if (rvtFiles == null || rvtFiles.Count == 0)
                {
                    throw new ArgumentException("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—É—Å—Ç");
                }

                if (progressWindow == null)
                {
                    throw new ArgumentNullException(nameof(progressWindow), "–û–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                }

                if (!Directory.Exists(modelsPath))
                {
                    throw new DirectoryNotFoundException($"–ü–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {modelsPath}");
                }

                if (!Directory.Exists(resultsPath))
                {
                    throw new DirectoryNotFoundException($"–ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {resultsPath}");
                }

                for (int i = 0; i < rvtFiles.Count; i++)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è
                    if (progressWindow.IsCancelled)
                    {
                        break;
                    }

                    var rvtFile = rvtFiles[i];
                    var fileName = Path.GetFileName(rvtFile);

                    try
                    {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        progressWindow.UpdateProgress(i, rvtFiles.Count, fileName, 0);

                    // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏ –∫ .rvt —Ñ–∞–π–ª—É
                    var relativePath = GetRelativePath(modelsPath, rvtFile);
                    var outputFileName = relativePath.Replace("\\", "_").Replace("/", "_").Replace(".rvt", ".csv");
                    var outputFile = Path.Combine(resultsPath, outputFileName);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    progressWindow.UpdateProgress(i, rvtFiles.Count, fileName, 10);

                    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .rvt —Ñ–∞–π–ª–∞
                    ExportRvtFileData(rvtFile, outputFile, progressWindow, i, rvtFiles.Count);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    progressWindow.UpdateProgress(i + 1, rvtFiles.Count, fileName, 100);

                    successCount++;
                }
                catch (Exception ex)
                {
                    errorCount++;
                    errorMessages.Add($"–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {fileName}: {ex.Message}");
                    progressWindow.UpdateProgress(i + 1, rvtFiles.Count, fileName, 100);
                }
            }

                // –ï—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (!progressWindow.IsCancelled)
                {
                    var resultMessage = $"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successCount} —Ñ–∞–π–ª–æ–≤";
                    if (errorCount > 0)
                    {
                        resultMessage += $"\n–û—à–∏–±–æ–∫: {errorCount}";
                        resultMessage += $"\n\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n{string.Join("\n", errorMessages.Take(5))}";
                        if (errorMessages.Count > 5)
                        {
                            resultMessage += $"\n... –∏ –µ—â–µ {errorMessages.Count - 5} –æ—à–∏–±–æ–∫";
                        }
                    }

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
                    MessageBox.Show(resultMessage, "–†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞", MessageBoxButton.OK, 
                        errorCount > 0 ? MessageBoxImage.Warning : MessageBoxImage.Information);

                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    System.Diagnostics.Process.Start("explorer.exe", resultsPath);
                }
            }
            catch (Exception ex)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
                System.Diagnostics.Debug.WriteLine($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ PerformExport: {ex.Message}");
                System.Diagnostics.Debug.WriteLine($"StackTrace: {ex.StackTrace}");
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É (–º—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
                MessageBox.Show($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{ex.Message}\n\nStackTrace:\n{ex.StackTrace}", 
                    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                
                throw; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –º–µ—Ç–æ–¥–µ
            }
        }

        private List<string> GetAllRvtFiles(string directory)
        {
            var rvtFiles = new List<string>();
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ .rvt —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
            rvtFiles.AddRange(Directory.GetFiles(directory, "*.rvt"));
            
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º .rvt —Ñ–∞–π–ª—ã –∏–∑ –ø–æ–¥–ø–∞–ø–æ–∫
            var subDirs = Directory.GetDirectories(directory);
            foreach (var subDir in subDirs)
            {
                rvtFiles.AddRange(GetAllRvtFiles(subDir));
            }
            
            return rvtFiles;
        }

        private string GetRelativePath(string basePath, string targetPath)
        {
            var baseUri = new Uri(basePath + "\\");
            var targetUri = new Uri(targetPath);
            var relativeUri = baseUri.MakeRelativeUri(targetUri);
            return Uri.UnescapeDataString(relativeUri.ToString());
        }

        private void ExportRvtFileData(string rvtFilePath, string outputFilePath, ExportProgressWindow progressWindow, int currentIndex, int totalFiles)
        {
            try
            {
                var fileName = Path.GetFileName(rvtFilePath);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ RevitApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                if (_revitApp == null)
                {
                    throw new Exception("RevitApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–ª–∞–≥–∏–Ω –∑–∞–ø—É—â–µ–Ω –∏–∑ Revit.");
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if (!File.Exists(rvtFilePath))
                {
                    throw new Exception($"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {rvtFilePath}");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                var fileInfo = new FileInfo(rvtFilePath);
                if (fileInfo.Length == 0)
                {
                    throw new Exception($"–§–∞–π–ª –ø—É—Å—Ç: {rvtFilePath}");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ñ–∞–π–ª Revit
                if (!rvtFilePath.EndsWith(".rvt", StringComparison.OrdinalIgnoreCase))
                {
                    throw new Exception($"–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º Revit: {rvtFilePath}");
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                progressWindow.UpdateProgress(currentIndex, totalFiles, fileName, 20);
                UpdateUI();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                try
                {
                    using (var fileStream = File.Open(rvtFilePath, FileMode.Open, FileAccess.Read, FileShare.Read))
                    {
                        // –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è
                    }
                }
                catch (Exception fileEx)
                {
                    throw new Exception($"–§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {fileEx.Message}");
                }
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç Revit
                Autodesk.Revit.DB.Document document = null;
                try
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ RevitApp –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
                    if (_revitApp.Documents == null)
                    {
                        throw new Exception("RevitApp –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏");
                    }

                    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
                    document = _revitApp.OpenDocumentFile(rvtFilePath);
                }
                catch (Exception openEx)
                {
                    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
                    var errorDetails = new List<string>();
                    errorDetails.Add($"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: {openEx.Message}");
                    errorDetails.Add($"–¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {openEx.GetType().Name}");
                    
                    if (openEx.InnerException != null)
                    {
                        errorDetails.Add($"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {openEx.InnerException.Message}");
                    }
                    
                    errorDetails.Add($"–§–∞–π–ª: {rvtFilePath}");
                    errorDetails.Add($"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {fileInfo.Length} –±–∞–π—Ç");
                    
                    throw new Exception($"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ Revit:\n{string.Join("\n", errorDetails)}");
                }
                
                if (document == null)
                {
                    throw new Exception($"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç Revit. –§–∞–π–ª: {rvtFilePath}, –†–∞–∑–º–µ—Ä: {fileInfo.Length} –±–∞–π—Ç");
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                progressWindow.UpdateProgress(currentIndex, totalFiles, fileName, 50);
                UpdateUI();

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                var dataReader = new Services.RevitDataReader();
                var modelName = Path.GetFileNameWithoutExtension(rvtFilePath);
                var elementsData = dataReader.ExtractElementsFromDocument(document, modelName);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã
                if (elementsData == null || elementsData.Count == 0)
                {
                    throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ–∫—É–º–µ–Ω—Ç –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.");
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV
                progressWindow.UpdateProgress(currentIndex, totalFiles, fileName, 80);
                UpdateUI();

                // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
                var exporter = new Services.RevitExporter();
                var csvContent = exporter.ExportToCsv(elementsData, modelName);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CSV —Å–æ–∑–¥–∞–Ω
                if (string.IsNullOrEmpty(csvContent))
                {
                    throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å CSV –∫–æ–Ω—Ç–µ–Ω—Ç.");
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                File.WriteAllText(outputFilePath, csvContent, System.Text.Encoding.UTF8);

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                progressWindow.UpdateProgress(currentIndex, totalFiles, fileName, 95);
                UpdateUI();

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                document.Close(false);
            }
            catch (Exception ex)
            {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π
                var errorContent = $"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {ex.Message}\n–§–∞–π–ª: {rvtFilePath}\n–í—Ä–µ–º—è: {DateTime.Now}\nStackTrace: {ex.StackTrace}";
                File.WriteAllText(outputFilePath, errorContent, System.Text.Encoding.UTF8);
                throw; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –º–µ—Ç–æ–¥–µ
            }
        }

    }
}