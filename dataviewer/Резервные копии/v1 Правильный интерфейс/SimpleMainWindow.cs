using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Input;
using System.Linq;
using Autodesk.Revit.ApplicationServices;
using RevitDB = Autodesk.Revit.DB;
using RevitExporterAddin.Services;

namespace RevitExporterAddin
{
    public class SimpleMainWindow : Window
    {
        private LogWindow _logWindow;
        private readonly Autodesk.Revit.ApplicationServices.Application _revitApp;
        private readonly RevitDataReader _dataReader;
        private readonly RevitExporter _exporter;
        
        private string _currentProjectName = "–¢–µ—Å—Ç –ø—Ä–æ–µ–∫—Ç";
        private string _currentExportName = "–¢–µ—Å—Ç –≤—ã–≥—Ä—É–∑–∫–∞";
        private string _currentTabName = "";
        
        // UI —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        private StackPanel _tabsPanel;
        private List<Button> _tabButtons = new List<Button>();
        private List<string> _tabNames = new List<string>();

        public SimpleMainWindow(Autodesk.Revit.ApplicationServices.Application revitApp)
        {
            Title = "Revit Exporter - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏";
            Width = 1200;
            Height = 700;
            WindowStartupLocation = WindowStartupLocation.CenterScreen;
            Background = new SolidColorBrush(Color.FromRgb(248, 249, 250));
            
            _revitApp = revitApp;
            _dataReader = new RevitDataReader();
            _exporter = new RevitExporter();
            
            _logWindow = new LogWindow();
            _logWindow.Show();
            
            Log("=== SimpleMainWindow –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ===");
            Log(string.Format("‚úÖ Revit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {0}", _revitApp.VersionName));
            
            CreateMainUI();
            
            Log("=== SimpleMainWindow –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω ===");
        }

        private void CreateMainUI()
        {
            try
            {
                Log("–°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π UI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏");
                
                var grid = new Grid();
                grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto }); // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto }); // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto }); // –í–∫–ª–∞–¥–∫–∏
                grid.RowDefinitions.Add(new RowDefinition { Height = new GridLength(1, GridUnitType.Star) }); // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
                
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                var title = new TextBlock
                {
                    Text = "Revit Exporter - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
                    FontSize = 24,
                    FontWeight = FontWeights.Bold,
                    Margin = new Thickness(30, 30, 30, 20),
                    HorizontalAlignment = HorizontalAlignment.Center,
                    Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                };
                Grid.SetRow(title, 0);
                grid.Children.Add(title);
                
                // –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                var controlPanel = new StackPanel 
                { 
                    Orientation = Orientation.Horizontal,
                    Margin = new Thickness(30, 0, 30, 20),
                    HorizontalAlignment = HorizontalAlignment.Left
                };
                Grid.SetRow(controlPanel, 1);
                
                var addProjectButton = new Button
                {
                    Content = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
                    Height = 40,
                    Width = 150,
                    Margin = new Thickness(0, 0, 10, 0),
                    Background = new SolidColorBrush(Color.FromRgb(40, 167, 69)),
                    Foreground = Brushes.White,
                    BorderThickness = new Thickness(0),
                    FontSize = 14
                };
                addProjectButton.Click += (s, e) => AddNewProject();
                controlPanel.Children.Add(addProjectButton);
                
                var exportButton = new Button
                {
                    Content = "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
                    Height = 40,
                    Width = 150,
                    Margin = new Thickness(0, 0, 10, 0),
                    Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                    Foreground = Brushes.White,
                    BorderThickness = new Thickness(0),
                    FontSize = 14
                };
                exportButton.Click += (s, e) => StartExport();
                controlPanel.Children.Add(exportButton);
                
                grid.Children.Add(controlPanel);
                
                // –ü–∞–Ω–µ–ª—å –≤–∫–ª–∞–¥–æ–∫
                _tabsPanel = new StackPanel 
                { 
                    Orientation = Orientation.Horizontal,
                    Margin = new Thickness(30, 0, 30, 20),
                    HorizontalAlignment = HorizontalAlignment.Left
                };
                Grid.SetRow(_tabsPanel, 2);
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–∫–ª–∞–¥–∫–∏
                _tabNames = new List<string> { "10.06", "15.07", "20.08" };
                RefreshTabs();
                
                grid.Children.Add(_tabsPanel);
                
                // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
                var contentBorder = new Border
                {
                    Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                    BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                    BorderThickness = new Thickness(1),
                    Margin = new Thickness(30, 0, 30, 30)
                };
                Grid.SetRow(contentBorder, 3);
                
                var contentText = new TextBlock
                {
                    Text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Revit Exporter!\n\n" +
                           "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n" +
                           "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ü–ö–ú –Ω–∞ –≤–∫–ª–∞–¥–∫–∞—Ö –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è\n" +
                           "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö' –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Revit",
                    FontSize = 16,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    VerticalAlignment = VerticalAlignment.Center,
                    TextAlignment = TextAlignment.Center,
                    Foreground = new SolidColorBrush(Color.FromRgb(73, 80, 87))
                };
                contentBorder.Child = contentText;
                grid.Children.Add(contentBorder);
                
                Content = grid;
                Log("–û—Å–Ω–æ–≤–Ω–æ–π UI —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ UI: {0}", ex.Message));
                MessageBox.Show(string.Format("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ UI: {0}", ex.Message), "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private Button CreateTabButtonWithContextMenu(string tabName)
        {
            try
            {
                Log(string.Format("–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–∫–ª–∞–¥–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –º–µ–Ω—é: {0}", tabName));
                
                var tabButton = new Button
                {
                    Content = string.Format("üìã {0}", tabName),
                    Height = 40,
                    Width = 80,
                    Margin = new Thickness(0, 0, 10, 0),
                    Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                    BorderThickness = new Thickness(1),
                    BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                    HorizontalAlignment = HorizontalAlignment.Left,
                    HorizontalContentAlignment = HorizontalAlignment.Center,
                    FontSize = 14
                };
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
                tabButton.Click += (s, e) => 
                {
                    Log(string.Format("–õ–µ–≤—ã–π –∫–ª–∏–∫ –ø–æ –≤–∫–ª–∞–¥–∫–µ: {0}", tabName));
                    _currentTabName = tabName;
                };
                
                // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
                var contextMenu = new ContextMenu();
                
                // –ü—É–Ω–∫—Ç "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"
                var renameMenuItem = new MenuItem
                {
                    Header = "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
                    FontSize = 12
                };
                renameMenuItem.Click += (s, e) => 
                {
                    Log(string.Format("–í—ã–±—Ä–∞–Ω–æ '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å' –¥–ª—è –≤–∫–ª–∞–¥–∫–∏: {0}", tabName));
                    RenameTab(tabName);
                };
                contextMenu.Items.Add(renameMenuItem);
                
                // –ü—É–Ω–∫—Ç "–£–¥–∞–ª–∏—Ç—å"
                var deleteMenuItem = new MenuItem
                {
                    Header = "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                    FontSize = 12
                };
                deleteMenuItem.Click += (s, e) => 
                {
                    Log(string.Format("–í—ã–±—Ä–∞–Ω–æ '–£–¥–∞–ª–∏—Ç—å' –¥–ª—è –≤–∫–ª–∞–¥–∫–∏: {0}", tabName));
                    DeleteTab(tabName);
                };
                contextMenu.Items.Add(deleteMenuItem);
                
                // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –∫ –∫–Ω–æ–ø–∫–µ
                tabButton.ContextMenu = contextMenu;
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
                tabButton.MouseRightButtonDown += (s, e) =>
                {
                    Log(string.Format("–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –ø–æ –≤–∫–ª–∞–¥–∫–µ: {0}", tabName));
                    e.Handled = true;
                    contextMenu.PlacementTarget = tabButton;
                    contextMenu.IsOpen = true;
                };
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è PreviewMouseRightButtonDown
                tabButton.PreviewMouseRightButtonDown += (s, e) =>
                {
                    Log(string.Format("Preview –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ –ø–æ –≤–∫–ª–∞–¥–∫–µ: {0}", tabName));
                    e.Handled = true;
                    contextMenu.PlacementTarget = tabButton;
                    contextMenu.IsOpen = true;
                };
                
                Log(string.Format("–ö–Ω–æ–ø–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∞: {0}", tabName));
                return tabButton;
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–∫–∏ {0}: {1}", tabName, ex.Message));
                return new Button { Content = tabName, Height = 40, Width = 80 };
            }
        }
        
        private void RenameTab(string oldTabName)
        {
            try
            {
                Log(string.Format("RenameTab –≤—ã–∑–≤–∞–Ω –¥–ª—è: {0}", oldTabName));
                
                var inputBox = Microsoft.VisualBasic.Interaction.InputBox(
                    string.Format("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ '{0}':", oldTabName),
                    "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏",
                    oldTabName
                );
                
                if (!string.IsNullOrWhiteSpace(inputBox) && inputBox != oldTabName)
                {
                    Log(string.Format("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ {0} ‚Üí {1}", oldTabName, inputBox));
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∫–ª–∞–¥–æ–∫
                    int index = _tabNames.IndexOf(oldTabName);
                    if (index >= 0)
                    {
                        _tabNames[index] = inputBox;
                        RefreshTabs(); // –û–±–Ω–æ–≤–ª—è–µ–º UI
                        Log(string.Format("UI –æ–±–Ω–æ–≤–ª–µ–Ω: {0} ‚Üí {1}", oldTabName, inputBox));
                    }
                    
                    MessageBox.Show(string.Format("–í–∫–ª–∞–¥–∫–∞ '{0}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{1}'", oldTabName, inputBox), "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    Log("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
                }
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏: {0}", ex.Message));
                MessageBox.Show(string.Format("–û—à–∏–±–∫–∞: {0}", ex.Message), "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void DeleteTab(string tabName)
        {
            try
            {
                Log(string.Format("DeleteTab –≤—ã–∑–≤–∞–Ω –¥–ª—è: {0}", tabName));
                
                var result = MessageBox.Show(
                    string.Format("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∫–ª–∞–¥–∫—É '{0}'?", tabName),
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Question
                );
                
                if (result == MessageBoxResult.Yes)
                {
                    Log(string.Format("–£–¥–∞–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {0}", tabName));
                    
                    // –£–¥–∞–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞
                    _tabNames.Remove(tabName);
                    RefreshTabs(); // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    Log(string.Format("UI –æ–±–Ω–æ–≤–ª–µ–Ω: –≤–∫–ª–∞–¥–∫–∞ '{0}' —É–¥–∞–ª–µ–Ω–∞", tabName));
                    
                    MessageBox.Show(string.Format("–í–∫–ª–∞–¥–∫–∞ '{0}' —É–¥–∞–ª–µ–Ω–∞", tabName), "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    Log("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
                }
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏: {0}", ex.Message));
                MessageBox.Show(string.Format("–û—à–∏–±–∫–∞: {0}", ex.Message), "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void RefreshTabs()
        {
            try
            {
                Log("–û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –≤–∫–ª–∞–¥–æ–∫");
                
                // –û—á–∏—â–∞–µ–º –ø–∞–Ω–µ–ª—å –≤–∫–ª–∞–¥–æ–∫
                _tabsPanel.Children.Clear();
                _tabButtons.Clear();
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫
                foreach (var tabName in _tabNames)
                {
                    var tabButton = CreateTabButtonWithContextMenu(tabName);
                    _tabsPanel.Children.Add(tabButton);
                    _tabButtons.Add(tabButton);
                    Log(string.Format("–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤–∫–ª–∞–¥–∫–∏: {0}", tabName));
                }
                
                Log(string.Format("–ü–∞–Ω–µ–ª—å –≤–∫–ª–∞–¥–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í—Å–µ–≥–æ –≤–∫–ª–∞–¥–æ–∫: {0}", _tabNames.Count));
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–æ–∫: {0}", ex.Message));
            }
        }
        
        private void AddNewProject()
        {
            try
            {
                Log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞");
                
                var inputBox = Microsoft.VisualBasic.Interaction.InputBox(
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:",
                    "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
                    "–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"
                );
                
                if (!string.IsNullOrWhiteSpace(inputBox))
                {
                    _tabNames.Add(inputBox);
                    RefreshTabs();
                    Log(string.Format("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {0}", inputBox));
                    MessageBox.Show(string.Format("–ü—Ä–æ–µ–∫—Ç '{0}' –¥–æ–±–∞–≤–ª–µ–Ω", inputBox), "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    Log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ");
                }
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {0}", ex.Message));
                MessageBox.Show(string.Format("–û—à–∏–±–∫–∞: {0}", ex.Message), "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void StartExport()
        {
            try
            {
                Log("–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö");
                
                if (_revitApp == null)
                {
                    MessageBox.Show("–û—à–∏–±–∫–∞: Revit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                var openDocuments = _revitApp.Documents;
                if (openDocuments == null || openDocuments.Size == 0)
                {
                    MessageBox.Show("–û—à–∏–±–∫–∞: –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Revit", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                
                // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                var activeDocument = openDocuments.Cast<RevitDB.Document>().FirstOrDefault();
                if (activeDocument == null)
                {
                    MessageBox.Show("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                
                Log(string.Format("–ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {0}", activeDocument.Title));
                
                // –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                var progressWindow = new ProgressWindow();
                progressWindow.Show();
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                System.Threading.Tasks.Task.Run(() =>
                {
                    try
                    {
                        var modelName = activeDocument.Title ?? "Unknown Model";
                        var data = _dataReader.ExtractElementsFromDocument(activeDocument, modelName, progressWindow);
                        
                        Dispatcher.Invoke(() =>
                        {
                            var csvContent = _exporter.ExportToCsv(data, modelName);
                            _exporter.SaveToFile(csvContent, modelName);
                            
                            progressWindow.Close();
                            MessageBox.Show(string.Format("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {0} –∑–∞–ø–∏—Å–µ–π.\n–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫–µ '–î–æ–∫—É–º–µ–Ω—Ç—ã'.", data.Count), 
                                "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", MessageBoxButton.OK, MessageBoxImage.Information);
                        });
                    }
                    catch (Exception ex)
                    {
                        Dispatcher.Invoke(() =>
                        {
                            progressWindow.Close();
                            MessageBox.Show(string.Format("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {0}", ex.Message), "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                        });
                    }
                });
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞: {0}", ex.Message));
                MessageBox.Show(string.Format("–û—à–∏–±–∫–∞: {0}", ex.Message), "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void Log(string message)
        {
            try
            {
                if (_logWindow != null)
                {
                    _logWindow.Log(message);
                }
            }
            catch (Exception ex)
            {
                // –ï—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            }
        }
    }

    public class LogWindow : Window
    {
        private TextBox _logTextBox;
        private int _logCounter = 0;

        public LogWindow()
        {
            Title = "–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è";
            Width = 600;
            Height = 400;
            WindowStartupLocation = WindowStartupLocation.Manual;
            Left = 50;
            Top = 50;
            Background = new SolidColorBrush(Color.FromRgb(248, 249, 250));
            
            CreateUI();
        }

        private void CreateUI()
        {
            var grid = new Grid();
            grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });
            grid.RowDefinitions.Add(new RowDefinition { Height = new GridLength(1, GridUnitType.Star) });
            grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            var title = new TextBlock
            {
                Text = "üìã –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                FontSize = 16,
                FontWeight = FontWeights.Bold,
                Margin = new Thickness(10, 10, 10, 5),
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            Grid.SetRow(title, 0);
            grid.Children.Add(title);

            // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
            _logTextBox = new TextBox
            {
                IsReadOnly = true,
                AcceptsReturn = true,
                TextWrapping = TextWrapping.Wrap,
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                HorizontalScrollBarVisibility = ScrollBarVisibility.Auto,
                FontFamily = new FontFamily("Consolas"),
                FontSize = 12,
                Margin = new Thickness(10, 5, 10, 5),
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                BorderThickness = new Thickness(1)
            };
            Grid.SetRow(_logTextBox, 1);
            grid.Children.Add(_logTextBox);

            // –ö–Ω–æ–ø–∫–∏
            var buttonPanel = new StackPanel 
            { 
                Orientation = Orientation.Horizontal,
                HorizontalAlignment = HorizontalAlignment.Right,
                Margin = new Thickness(10, 5, 10, 10)
            };

            var copyButton = new Button
            {
                Content = "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
                Height = 30,
                Width = 100,
                Margin = new Thickness(0, 0, 10, 0),
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 12
            };
            copyButton.Click += (s, e) => 
            {
                try
                {
                    Clipboard.SetText(_logTextBox.Text);
                    Log("‚úÖ –õ–æ–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(string.Format("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {0}", ex.Message), "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            };
            buttonPanel.Children.Add(copyButton);

            var clearButton = new Button
            {
                Content = "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
                Height = 30,
                Width = 100,
                Background = new SolidColorBrush(Color.FromRgb(220, 53, 69)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 12
            };
            clearButton.Click += (s, e) => 
            {
                _logTextBox.Clear();
                _logCounter = 0;
                Log("üîÑ –õ–æ–≥ –æ—á–∏—â–µ–Ω");
            };
            buttonPanel.Children.Add(clearButton);

            Grid.SetRow(buttonPanel, 2);
            grid.Children.Add(buttonPanel);

            Content = grid;
        }

        public void Log(string message)
        {
            try
            {
                if (_logTextBox != null)
                {
                    _logCounter++;
                    var timestamp = DateTime.Now.ToString("HH:mm:ss");
                    var logMessage = string.Format("[{0}] #{1}: {2}", timestamp, _logCounter, message);
                    
                    Dispatcher.Invoke(() =>
                    {
                        _logTextBox.AppendText(logMessage + Environment.NewLine);
                        _logTextBox.ScrollToEnd();
                    });
                }
            }
            catch (Exception)
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            }
        }
    }

    public class ProgressWindow : Window, IProgress<string>
    {
        private TextBox _progressTextBox;
        private ProgressBar _progressBar;

        public ProgressWindow()
        {
            Title = "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - –ü—Ä–æ–≥—Ä–µ—Å—Å";
            Width = 500;
            Height = 300;
            WindowStartupLocation = WindowStartupLocation.CenterScreen;
            Background = new SolidColorBrush(Color.FromRgb(248, 249, 250));
            
            CreateUI();
        }

        private void CreateUI()
        {
            var grid = new Grid();
            grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });
            grid.RowDefinitions.Add(new RowDefinition { Height = new GridLength(1, GridUnitType.Star) });
            grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            var title = new TextBlock
            {
                Text = "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Revit",
                FontSize = 16,
                FontWeight = FontWeights.Bold,
                Margin = new Thickness(10, 10, 10, 5),
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            Grid.SetRow(title, 0);
            grid.Children.Add(title);

            // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            _progressBar = new ProgressBar
            {
                Height = 20,
                Margin = new Thickness(10, 5, 10, 5),
                IsIndeterminate = true
            };
            Grid.SetRow(_progressBar, 0);
            grid.Children.Add(_progressBar);

            // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            _progressTextBox = new TextBox
            {
                IsReadOnly = true,
                AcceptsReturn = true,
                TextWrapping = TextWrapping.Wrap,
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                FontFamily = new FontFamily("Consolas"),
                FontSize = 12,
                Margin = new Thickness(10, 5, 10, 5),
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                BorderThickness = new Thickness(1)
            };
            Grid.SetRow(_progressTextBox, 1);
            grid.Children.Add(_progressTextBox);

            // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            var cancelButton = new Button
            {
                Content = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                Height = 30,
                Width = 100,
                Margin = new Thickness(10, 5, 10, 10),
                HorizontalAlignment = HorizontalAlignment.Right,
                Background = new SolidColorBrush(Color.FromRgb(220, 53, 69)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 12
            };
            cancelButton.Click += (s, e) => Close();
            Grid.SetRow(cancelButton, 2);
            grid.Children.Add(cancelButton);

            Content = grid;
        }

        public void Report(string value)
        {
            Dispatcher.Invoke(() =>
            {
                _progressTextBox.AppendText(value + Environment.NewLine);
                _progressTextBox.ScrollToEnd();
            });
        }
    }
}
