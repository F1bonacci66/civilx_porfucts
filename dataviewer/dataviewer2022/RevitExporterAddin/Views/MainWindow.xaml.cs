using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using RevitExporterAddin.Models;
using RevitExporterAddin.Services;
using RevitApp = Autodesk.Revit.ApplicationServices.Application;
using Document = Autodesk.Revit.DB.Document;
using CivilX.Shared.Auth;
using CivilX.Shared.Models;

namespace RevitExporterAddin.Views
{
    public partial class MainWindow : Window
    {
        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –≥—Ä—É–ø–ø—ã –ø–ª–∞–≥–∏–Ω–∞
        private const string PLUGIN_GROUP = "DataHub";
        
        private List<Project> _projects;
        private readonly IDataService _dataService;
        private readonly ProjectPersistenceService _persistenceService;
        private readonly IAuthService _authService;
        private readonly RevitApp _revitApp;
        private string _currentProjectName;
        private string _currentExportName;
        private string _currentLogFilePath;
        private UserInfo _currentUser;
        private ProductInfo _activatedProduct;

        public MainWindow(RevitApp revitApp = null)
        {
            InitializeComponent();
            _revitApp = revitApp;
            _dataService = new DataService();
            _persistenceService = new ProjectPersistenceService();
            _authService = new AuthService();
            _projects = new List<Project>();
            _activatedProduct = null;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
            LoadActivatedProduct();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ - –£–ë–†–ê–ù–û
            // CheckAuthentication();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã –ø–ª–∞–≥–∏–Ω–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ ExportCommand
            // CheckPluginGroupSync();
            
            // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
            ShowProjectsScreen();
        }


        // –ú–µ—Ç–æ–¥ —É–±—Ä–∞–Ω - –∫–Ω–æ–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
        // private void UserProfileButton_Click(object sender, RoutedEventArgs e)
        // {
        //     ShowUserProfileScreen();
        // }

        private void ShowUserProfileScreen()
        {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            MainGrid.Children.Clear();
            
            var grid = new Grid();
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(300) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(5) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            
            // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –í–∫–ª–∞–¥–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            var leftPanel = CreateUserProfileLeftPanel();
            Grid.SetColumn(leftPanel, 0);
            grid.Children.Add(leftPanel);
            
            // GridSplitter
            var splitter = new GridSplitter
            {
                Width = 5,
                Background = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                HorizontalAlignment = HorizontalAlignment.Stretch
            };
            Grid.SetColumn(splitter, 1);
            grid.Children.Add(splitter);
            
            // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)
            var rightPanel = CreateUserProfileRightPanel("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
            Grid.SetColumn(rightPanel, 2);
            grid.Children.Add(rightPanel);
            
            MainGrid.Children.Add(grid);
        }

        private Border CreateUserProfileLeftPanel()
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(248, 249, 250))
            };

            var stackPanel = new StackPanel { Margin = new Thickness(30) };
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            var headerPanel = new StackPanel
            {
                Orientation = Orientation.Horizontal,
                Margin = new Thickness(0, 0, 0, 30)
            };
            
            var backButton = new Button
            {
                Content = "‚Üê",
                FontSize = 18,
                Width = 40,
                Height = 40,
                Background = new SolidColorBrush(Color.FromRgb(108, 117, 125)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                Margin = new Thickness(0, 0, 15, 0)
            };
            backButton.Click += (s, e) => ShowProjectsScreen();
            headerPanel.Children.Add(backButton);
            
            var title = new TextBlock
            {
                Text = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                FontSize = 20,
                FontWeight = FontWeights.Bold,
                VerticalAlignment = VerticalAlignment.Center,
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            headerPanel.Children.Add(title);
            stackPanel.Children.Add(headerPanel);
            
            // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
            var subtitle = new TextBlock
            {
                Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:",
                FontSize = 14,
                Margin = new Thickness(0, 0, 0, 15),
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            stackPanel.Children.Add(subtitle);
            
            // –°–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫
            var scrollViewer = new ScrollViewer
            {
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                MaxHeight = 400
            };
            var tabsList = new StackPanel();
            
            // –í–∫–ª–∞–¥–∫–∞ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
            var userInfoButton = new Button
            {
                Content = "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
                Height = 50,
                Margin = new Thickness(0, 0, 0, 15),
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderThickness = new Thickness(1),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                HorizontalAlignment = HorizontalAlignment.Stretch,
                HorizontalContentAlignment = HorizontalAlignment.Left,
                Padding = new Thickness(15, 0, 0, 0),
                FontSize = 14
            };
            userInfoButton.Click += (s, e) => UpdateUserProfileRightPanel("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ");
            tabsList.Children.Add(userInfoButton);

            // –í–∫–ª–∞–¥–∫–∞ "–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã"
            var productsButton = new Button
            {
                Content = "üì¶ –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã",
                Height = 50,
                Margin = new Thickness(0, 0, 0, 15),
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderThickness = new Thickness(1),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                HorizontalAlignment = HorizontalAlignment.Stretch,
                HorizontalContentAlignment = HorizontalAlignment.Left,
                Padding = new Thickness(15, 0, 0, 0),
                FontSize = 14
            };
            productsButton.Click += (s, e) => UpdateUserProfileRightPanel("–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã");
            tabsList.Children.Add(productsButton);

            // –í–∫–ª–∞–¥–∫–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º"
            var profileButton = new Button
            {
                Content = "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º",
                Height = 50,
                Margin = new Thickness(0, 0, 0, 15),
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderThickness = new Thickness(1),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                HorizontalAlignment = HorizontalAlignment.Stretch,
                HorizontalContentAlignment = HorizontalAlignment.Left,
                Padding = new Thickness(15, 0, 0, 0),
                FontSize = 14
            };
            profileButton.Click += (s, e) => UpdateUserProfileRightPanel("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º");
            tabsList.Children.Add(profileButton);

            // –í–∫–ª–∞–¥–∫–∞ "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            var authButton = new Button
            {
                Content = "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                Height = 50,
                Margin = new Thickness(0, 0, 0, 15),
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderThickness = new Thickness(1),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                HorizontalAlignment = HorizontalAlignment.Stretch,
                HorizontalContentAlignment = HorizontalAlignment.Left,
                Padding = new Thickness(15, 0, 0, 0),
                FontSize = 14
            };
            authButton.Click += (s, e) => UpdateUserProfileRightPanel("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
            tabsList.Children.Add(authButton);
            
            scrollViewer.Content = tabsList;
            stackPanel.Children.Add(scrollViewer);
            
            border.Child = stackPanel;
            return border;
        }

        private Border CreateUserProfileRightPanel(string selectedTab)
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(248, 249, 250))
            };

            var stackPanel = new StackPanel { Margin = new Thickness(30) };
            
            if (selectedTab == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            {
                var title = new TextBlock
                {
                    Text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
                    FontSize = 24,
                    FontWeight = FontWeights.Bold,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    Margin = new Thickness(0, 50, 0, 30),
                    Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                };
                stackPanel.Children.Add(title);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                LoadUserInfo(stackPanel);
            }
            else if (selectedTab == "–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã")
            {
                var title = new TextBlock
                {
                    Text = "–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã",
                    FontSize = 24,
                    FontWeight = FontWeights.Bold,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    Margin = new Thickness(0, 50, 0, 30),
                    Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                };
                stackPanel.Children.Add(title);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                LoadUserProducts(stackPanel);
            }
            else if (selectedTab == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º")
            {
                var title = new TextBlock
                {
                    Text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º",
                    FontSize = 24,
                    FontWeight = FontWeights.Bold,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    Margin = new Thickness(0, 50, 0, 30),
                    Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                };
                stackPanel.Children.Add(title);
                
                // –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
                LoadProfileEditForm(stackPanel);
            }
            else if (selectedTab == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            {
                var title = new TextBlock
                {
                    Text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º",
                    FontSize = 24,
                    FontWeight = FontWeights.Bold,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    Margin = new Thickness(0, 50, 0, 30),
                    Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                };
                stackPanel.Children.Add(title);
                
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                var userInfoPanel = new StackPanel
                {
                    Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                    Margin = new Thickness(20, 20, 20, 30)
                };
                
                var userInfoText = new TextBlock
                {
                    Text = "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫:",
                    FontSize = 14,
                    FontWeight = FontWeights.SemiBold,
                    Margin = new Thickness(20, 20, 20, 10),
                    Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
                };
                userInfoPanel.Children.Add(userInfoText);
                
                var userNameText = new TextBlock
                {
                    Text = _currentUser?.Name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    FontSize = 16,
                    FontWeight = FontWeights.Bold,
                    Margin = new Thickness(20, 0, 20, 20),
                    Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                };
                userInfoPanel.Children.Add(userNameText);
                
                stackPanel.Children.Add(userInfoPanel);
                
                // –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç"
                var websiteButton = new Button
                {
                    Content = "üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç",
                    Height = 50,
                    Width = 200,
                    Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                    Foreground = Brushes.White,
                    BorderThickness = new Thickness(0),
                    FontSize = 14,
                    FontWeight = FontWeights.SemiBold,
                    HorizontalAlignment = HorizontalAlignment.Left,
                    Margin = new Thickness(0, 0, 0, 20)
                };
                websiteButton.Click += (s, e) => 
                {
                    try
                    {
                        System.Diagnostics.Process.Start("http://civilx.ru");
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–∞–π—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                };
                stackPanel.Children.Add(websiteButton);
                
                // –ö–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"
                var logoutButton = new Button
                {
                    Content = "üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞",
                    Height = 50,
                    Width = 200,
                    Background = new SolidColorBrush(Color.FromRgb(220, 53, 69)),
                    Foreground = Brushes.White,
                    BorderThickness = new Thickness(0),
                    FontSize = 14,
                    FontWeight = FontWeights.SemiBold,
                    HorizontalAlignment = HorizontalAlignment.Left
                };
                logoutButton.Click += (s, e) => 
                {
                    var result = MessageBox.Show("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", MessageBoxButton.YesNo, MessageBoxImage.Question);
                    if (result == MessageBoxResult.Yes)
                    {
                        Logout();
                    }
                };
                stackPanel.Children.Add(logoutButton);
            }
            
            border.Child = stackPanel;
            return border;
        }

        private void UpdateUserProfileRightPanel(string selectedTab)
        {
            // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –≤ MainGrid –∏ –∑–∞–º–µ–Ω—è–µ–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            var grid = MainGrid.Children[0] as Grid;
            if (grid != null && grid.Children.Count >= 3)
            {
                var rightPanel = CreateUserProfileRightPanel(selectedTab);
                Grid.SetColumn(rightPanel, 2);
                grid.Children.RemoveAt(2); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
                grid.Children.Add(rightPanel); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            }
        }

        private void LoadProjects()
        {
            try
            {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                var savedProjects = _persistenceService.LoadProjects();
                WriteToLogFile($"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {savedProjects.Count} –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
                
                // –í–°–ï–ì–î–ê —Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É "–ü—Ä–æ–µ–∫—Ç—ã" –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
                var projectsPath = Path.Combine("C:\\DataViewer", "–ü—Ä–æ–µ–∫—Ç—ã");
                WriteToLogFile($"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {projectsPath}");
                
                _projects = new List<Project>(); // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
                
                if (Directory.Exists(projectsPath))
                {
                    var projectFolders = Directory.GetDirectories(projectsPath);
                    WriteToLogFile($"–ù–∞–π–¥–µ–Ω–æ {projectFolders.Length} –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤");
                    
                    foreach (var projectFolder in projectFolders)
                    {
                        var projectName = Path.GetFileName(projectFolder);
                        WriteToLogFile($"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {projectName} ({projectFolder})");
                        
                        var project = ScanProjectFolder(projectFolder, projectName);
                        if (project != null)
                        {
                            _projects.Add(project);
                            WriteToLogFile($"‚úì –ü—Ä–æ–µ–∫—Ç '{projectName}' –∑–∞–≥—Ä—É–∂–µ–Ω: {project.Exports.Count} –≤—ã–≥—Ä—É–∑–æ–∫");
                        }
                        else
                        {
                            WriteToLogFile($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç '{projectName}'");
                        }
                    }
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    if (_projects.Count > 0)
                    {
                        SaveProjects();
                        WriteToLogFile($"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {_projects.Count} –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
                    }
                    else
                    {
                        WriteToLogFile("–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ");
                    }
                }
                else
                {
                    WriteToLogFile($"‚ùå –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {projectsPath}");
                    // –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
                    _projects = savedProjects;
                }
            }
            catch (Exception ex)
            {
                WriteToLogFile($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤: {ex.Message}");
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                _projects = new List<Project>();
            }
        }

        private void SaveProjects()
        {
            try
            {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                _persistenceService.SaveProjects(_projects);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤, —Å–∫–∞–Ω–∏—Ä—É—è –ø–∞–ø–∫—É C:\DataViewer\–ü—Ä–æ–µ–∫—Ç—ã
        /// </summary>
        public void RefreshProjects()
        {
            WriteToLogFile("=== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–û–í ===");
            LoadProjects();
            ShowProjectsScreen(); // –û–±–Ω–æ–≤–ª—è–µ–º UI
            WriteToLogFile($"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {_projects.Count} –ø—Ä–æ–µ–∫—Ç–æ–≤");
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        /// </summary>
        private List<string> _selectedCategories = new List<string>();
        private ExportTab _currentTab;

        /// <summary>
        /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        /// </summary>
        public void SetCategoryFilters(List<string> selectedCategories)
        {
            _selectedCategories = selectedCategories ?? new List<string>();
            WriteToLogFile($"MainWindow: SetCategoryFilters called with {_selectedCategories.Count} categories");
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
        /// </summary>
        private ExportTab GetCurrentTab()
        {
            return _currentTab;
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        /// </summary>
        public void StartExport()
        {
            WriteToLogFile($"MainWindow: StartExport called with {_selectedCategories.Count} selected categories");
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
            var currentTab = GetCurrentTab();
            if (currentTab == null)
            {
                WriteToLogFile("MainWindow: No current tab selected");
                MessageBox.Show("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            StartExportWithFilters(currentTab, _selectedCategories);
        }

        public void StartExportWithFilters(ExportTab tab, List<string> selectedCategories)
        {
            WriteToLogFile($"=== –ó–ê–ü–£–°–ö –≠–ö–°–ü–û–†–¢–ê –° –§–ò–õ–¨–¢–†–ê–ú–ò ===");
            WriteToLogFile($"–í–∫–ª–∞–¥–∫–∞: {tab.Name}");
            WriteToLogFile($"–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {tab.ModelsFolder}");
            WriteToLogFile($"–ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {tab.FolderPath}");
            WriteToLogFile($"–í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {selectedCategories.Count}");
            
            if (selectedCategories.Count > 0)
            {
                WriteToLogFile("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:");
                foreach (var category in selectedCategories.Take(10)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                {
                    WriteToLogFile($"  ‚Ä¢ {category}");
                }
                if (selectedCategories.Count > 10)
                {
                    WriteToLogFile($"  ... –∏ –µ—â–µ {selectedCategories.Count - 10} –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
                }
            }

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
                if (!Directory.Exists(tab.ModelsFolder))
                {
                    WriteToLogFile($"‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {tab.ModelsFolder}");
                    MessageBox.Show($"–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:\n{tab.ModelsFolder}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (!Directory.Exists(tab.FolderPath))
                {
                    Directory.CreateDirectory(tab.FolderPath);
                    WriteToLogFile($"‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {tab.FolderPath}");
                }

                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ .rvt —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ "–ú–æ–¥–µ–ª–∏" –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ –≤–∫–ª–∞–¥–∫–∏
                var modelsFolder = Path.Combine(tab.FolderPath, "–ú–æ–¥–µ–ª–∏");
                WriteToLogFile($"–ü–æ–∏—Å–∫ Revit —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {modelsFolder}");
                
                if (!Directory.Exists(modelsFolder))
                {
                    WriteToLogFile($"‚ùå –ü–∞–ø–∫–∞ '–ú–æ–¥–µ–ª–∏' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {modelsFolder}");
                    MessageBox.Show($"–ü–∞–ø–∫–∞ '–ú–æ–¥–µ–ª–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–ø–∫–µ –≤–∫–ª–∞–¥–∫–∏:\n{modelsFolder}\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É '–ú–æ–¥–µ–ª–∏' –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ—ë Revit —Ñ–∞–π–ª—ã.", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                
                var rvtFiles = Directory.GetFiles(modelsFolder, "*.rvt", SearchOption.AllDirectories);
                WriteToLogFile($"–ù–∞–π–¥–µ–Ω–æ {rvtFiles.Length} .rvt —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞");

                if (rvtFiles.Length == 0)
                {
                    WriteToLogFile("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ .rvt —Ñ–∞–π–ª–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ");
                    MessageBox.Show("–í –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ .rvt —Ñ–∞–π–ª–æ–≤", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                // –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                var progressWindow = new ExportProgressWindow();
                progressWindow.Show();

                // –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                Task.Run(() => PerformExportWithFilters(rvtFiles.ToList(), modelsFolder, tab.FolderPath, selectedCategories, progressWindow));
            }
            catch (Exception ex)
            {
                WriteToLogFile($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞: {ex.Message}");
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void ShowProjectsScreen()
        {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —ç–∫—Ä–∞–Ω–∞
            LoadProjects();
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            MainGrid.Children.Clear();
            
            var grid = new Grid();
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(300) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(5) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            
            // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            var leftPanel = CreateProjectsLeftPanel();
            Grid.SetColumn(leftPanel, 0);
            grid.Children.Add(leftPanel);
            
            // GridSplitter
            var splitter = new GridSplitter
            {
                Width = 5,
                Background = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                HorizontalAlignment = HorizontalAlignment.Stretch
            };
            Grid.SetColumn(splitter, 1);
            grid.Children.Add(splitter);
            
            // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            var rightPanel = CreateWelcomeRightPanel();
            Grid.SetColumn(rightPanel, 2);
            grid.Children.Add(rightPanel);
            
            MainGrid.Children.Add(grid);
        }

        private Border CreateProjectsLeftPanel()
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                BorderThickness = new Thickness(1),
                Margin = new Thickness(20, 20, 10, 20)
            };

            var stackPanel = new StackPanel { Margin = new Thickness(20) };
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            var title = new TextBlock
            {
                Text = "Revit Exporter",
                FontSize = 24,
                FontWeight = FontWeights.Bold,
                HorizontalAlignment = HorizontalAlignment.Center,
                Margin = new Thickness(0, 0, 0, 30),
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            stackPanel.Children.Add(title);
            
            // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
            var subtitle = new TextBlock
            {
                Text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
                FontSize = 14,
                Margin = new Thickness(0, 0, 0, 15),
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            stackPanel.Children.Add(subtitle);
            
            // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            var scrollViewer = new ScrollViewer
            {
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                MaxHeight = 400
            };
            var projectsList = new StackPanel();
            
            foreach (var project in _projects)
            {
                var projectContainer = new Grid();
                projectContainer.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
                projectContainer.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });
                
                var projectButton = new Button
                {
                    Content = $"üìÅ {project.Name}",
                    Height = 50,
                    Margin = new Thickness(0, 0, 0, 15),
                    Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                    BorderThickness = new Thickness(1),
                    BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                    HorizontalAlignment = HorizontalAlignment.Stretch,
                    HorizontalContentAlignment = HorizontalAlignment.Left,
                    Padding = new Thickness(15, 0, 0, 0),
                    FontSize = 14
                };
                projectButton.Click += (s, e) => ShowProjectScreen(project.Name);
                Grid.SetColumn(projectButton, 0);
                projectContainer.Children.Add(projectButton);
                
                // –ö–Ω–æ–ø–∫–∞ —Å —Ç—Ä–µ–º—è —Ç–æ—á–∫–∞–º–∏
                var menuButton = new Button
                {
                    Content = "‚ãÆ",
                    Width = 30,
                    Height = 50,
                    Margin = new Thickness(0, 0, 10, 15),
                    Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                    BorderThickness = new Thickness(1),
                    BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                    FontSize = 16,
                    FontWeight = FontWeights.Bold,
                    VerticalAlignment = VerticalAlignment.Top,
                    HorizontalAlignment = HorizontalAlignment.Right
                };
                menuButton.Click += (s, e) => ShowProjectContextMenu(project.Name, menuButton);
                Grid.SetColumn(menuButton, 1);
                projectContainer.Children.Add(menuButton);
                
                projectsList.Children.Add(projectContainer);
            }
            
            scrollViewer.Content = projectsList;
            stackPanel.Children.Add(scrollViewer);
            
            // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            var addNewButton = new Button
            {
                Content = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
                Height = 50,
                Margin = new Thickness(0, 20, 0, 10),
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 14
            };
            addNewButton.Click += AddProject_Click;
            stackPanel.Children.Add(addNewButton);
            
            // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            var addExistingButton = new Button
            {
                Content = "üìÅ –î–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç",
                Height = 50,
                Margin = new Thickness(0, 0, 0, 0),
                Background = new SolidColorBrush(Color.FromRgb(40, 167, 69)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 14
            };
            addExistingButton.Click += AddExistingProject_Click;
            stackPanel.Children.Add(addExistingButton);
            
            // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
            var refreshButton = new Button
            {
                Content = "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã",
                Height = 50,
                Margin = new Thickness(0, 5, 0, 0),
                Background = new SolidColorBrush(Color.FromRgb(23, 162, 184)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 14
            };
            refreshButton.Click += (s, e) => RefreshProjects();
            stackPanel.Children.Add(refreshButton);
            
            border.Child = stackPanel;
            return border;
        }

        private Border CreateWelcomeRightPanel()
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(248, 249, 250))
            };

            var stackPanel = new StackPanel { Margin = new Thickness(30) };
            
            var welcomeText = new TextBlock
            {
                Text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Revit Exporter!",
                FontSize = 24,
                FontWeight = FontWeights.Bold,
                HorizontalAlignment = HorizontalAlignment.Center,
                Margin = new Thickness(0, 50, 0, 20),
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            stackPanel.Children.Add(welcomeText);
            
            var descriptionText = new TextBlock
            {
                Text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –≤—ã–≥—Ä—É–∑–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Revit.",
                FontSize = 16,
                HorizontalAlignment = HorizontalAlignment.Center,
                TextWrapping = TextWrapping.Wrap,
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            stackPanel.Children.Add(descriptionText);
            
            border.Child = stackPanel;
            return border;
        }

        private void ShowProjectScreen(string projectName)
        {
            _currentProjectName = projectName;
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            MainGrid.Children.Clear();
            
            var grid = new Grid();
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(300) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(5) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            
            // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –°–ø–∏—Å–æ–∫ –≤—ã–≥—Ä—É–∑–æ–∫
            var leftPanel = CreateExportsLeftPanel(projectName);
            Grid.SetColumn(leftPanel, 0);
            grid.Children.Add(leftPanel);
            
            // GridSplitter
            var splitter = new GridSplitter
            {
                Width = 5,
                Background = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                HorizontalAlignment = HorizontalAlignment.Stretch
            };
            Grid.SetColumn(splitter, 1);
            grid.Children.Add(splitter);
            
            // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –°–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–∞—è)
            var rightPanel = CreateExportsRightPanel(projectName);
            Grid.SetColumn(rightPanel, 2);
            grid.Children.Add(rightPanel);
            
            MainGrid.Children.Add(grid);
        }

        private Border CreateExportsLeftPanel(string projectName)
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                BorderThickness = new Thickness(1),
                Margin = new Thickness(20, 20, 10, 20)
            };

            var stackPanel = new StackPanel { Margin = new Thickness(20) };
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
            var headerPanel = new StackPanel { Orientation = Orientation.Horizontal, Margin = new Thickness(0, 0, 0, 20) };
            
            var backButton = new Button
            {
                Content = "‚Üê",
                FontSize = 18,
                Width = 40,
                Height = 40,
                Background = new SolidColorBrush(Color.FromRgb(108, 117, 125)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                Margin = new Thickness(0, 0, 15, 0)
            };
            backButton.Click += (s, e) => ShowProjectsScreen();
            headerPanel.Children.Add(backButton);
            
            var title = new TextBlock
            {
                Text = projectName,
                FontSize = 20,
                FontWeight = FontWeights.Bold,
                VerticalAlignment = VerticalAlignment.Center,
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            headerPanel.Children.Add(title);
            stackPanel.Children.Add(headerPanel);
            
            // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
            var subtitle = new TextBlock
            {
                Text = "–í—Å–µ –≤—ã–≥—Ä—É–∑–∫–∏:",
                FontSize = 14,
                Margin = new Thickness(0, 0, 0, 15),
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            stackPanel.Children.Add(subtitle);
            
            // –°–ø–∏—Å–æ–∫ –≤—ã–≥—Ä—É–∑–æ–∫
            var scrollViewer = new ScrollViewer
            {
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                MaxHeight = 400
            };
            var exportsList = new StackPanel();
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            var project = _projects.Find(p => p.Name == projectName);
            if (project != null)
            {
                foreach (var export in project.Exports)
                {
                    var exportContainer = new Grid();
                    exportContainer.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
                    exportContainer.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });
                    
                    var exportButton = new Button
                    {
                        Content = $"üì§ {export.Name}",
                        Height = 50,
                        Margin = new Thickness(0, 0, 0, 15),
                        Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                        BorderThickness = new Thickness(1),
                        BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                        HorizontalAlignment = HorizontalAlignment.Stretch,
                        HorizontalContentAlignment = HorizontalAlignment.Left,
                        Padding = new Thickness(15, 0, 0, 0),
                        FontSize = 14
                    };
                    exportButton.Click += (s, e) => ShowExportInRightPanel(projectName, export.Name);
                    Grid.SetColumn(exportButton, 0);
                    exportContainer.Children.Add(exportButton);
                    
                    // –ö–Ω–æ–ø–∫–∞ —Å —Ç—Ä–µ–º—è —Ç–æ—á–∫–∞–º–∏ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏
                    var exportMenuButton = new Button
                    {
                        Content = "‚ãÆ",
                        Width = 30,
                        Height = 50,
                        Margin = new Thickness(0, 0, 10, 15),
                        Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                        BorderThickness = new Thickness(1),
                        BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                        FontSize = 16,
                        FontWeight = FontWeights.Bold,
                        VerticalAlignment = VerticalAlignment.Top,
                        HorizontalAlignment = HorizontalAlignment.Right
                    };
                    exportMenuButton.Click += (s, e) => ShowExportContextMenu(projectName, export.Name, exportMenuButton);
                    Grid.SetColumn(exportMenuButton, 1);
                    exportContainer.Children.Add(exportMenuButton);
                    
                    exportsList.Children.Add(exportContainer);
                }
            }
            
            scrollViewer.Content = exportsList;
            stackPanel.Children.Add(scrollViewer);
            
            // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–≥—Ä—É–∑–∫–∏
            var addButton = new Button
            {
                Content = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã–≥—Ä—É–∑–∫—É",
                Height = 50,
                Margin = new Thickness(0, 20, 0, 0),
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 14
            };
            addButton.Click += (s, e) => AddExport_Click(projectName);
            stackPanel.Children.Add(addButton);
            
            border.Child = stackPanel;
            return border;
        }

        private Border CreateExportsRightPanel(string projectName)
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(248, 249, 250))
            };

            var stackPanel = new StackPanel { Margin = new Thickness(30) };
            
            var welcomeText = new TextBlock
            {
                Text = $"–ü—Ä–æ–µ–∫—Ç: {projectName}",
                FontSize = 24,
                FontWeight = FontWeights.Bold,
                HorizontalAlignment = HorizontalAlignment.Center,
                Margin = new Thickness(0, 50, 0, 20),
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            stackPanel.Children.Add(welcomeText);
            
            var descriptionText = new TextBlock
            {
                Text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–≥—Ä—É–∑–∫—É –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                FontSize = 16,
                HorizontalAlignment = HorizontalAlignment.Center,
                TextWrapping = TextWrapping.Wrap,
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            stackPanel.Children.Add(descriptionText);
            
            border.Child = stackPanel;
            return border;
        }

        private void ShowExportInRightPanel(string projectName, string exportName)
        {
            _currentExportName = exportName;
            
            
            // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –≤ MainGrid –∏ –∑–∞–º–µ–Ω—è–µ–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            var grid = MainGrid.Children[0] as Grid;
            if (grid != null && grid.Children.Count >= 3)
            {
                // –ü–æ–ª—É—á–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É
                var project = _projects.Find(p => p.Name == projectName);
                var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
                
                if (export != null)
                {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    var firstTabToShow = export.Tabs.FirstOrDefault();
                    if (firstTabToShow != null)
                    {
                        var rightPanel = CreateTabSettingsRightPanel(projectName, exportName, firstTabToShow.Name);
                        Grid.SetColumn(rightPanel, 2);
                        grid.Children.RemoveAt(2); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
                        grid.Children.Add(rightPanel); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                    }
                    else
                    {
                        // –ï—Å–ª–∏ –≤–∫–ª–∞–¥–æ–∫ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
                        var rightPanel = CreateEmptyExportRightPanel(projectName, exportName);
                        Grid.SetColumn(rightPanel, 2);
                        grid.Children.RemoveAt(2);
                        grid.Children.Add(rightPanel);
                    }
                }
                else
                {
                    MessageBox.Show($"–í—ã–≥—Ä—É–∑–∫–∞ '{exportName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ '{projectName}'", 
                        "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            else
            {
                MessageBox.Show($"Grid –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:\ngrid != null: {grid != null}\ngrid.Children.Count: {(grid?.Children.Count ?? 0)}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private Border CreateEmptyExportRightPanel(string projectName, string exportName)
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(248, 249, 250))
            };

            var stackPanel = new StackPanel { Margin = new Thickness(30) };
            
            var welcomeText = new TextBlock
            {
                Text = $"üì§ {exportName}",
                FontSize = 24,
                FontWeight = FontWeights.Bold,
                HorizontalAlignment = HorizontalAlignment.Center,
                Margin = new Thickness(0, 50, 0, 20),
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            stackPanel.Children.Add(welcomeText);
            
            var descriptionText = new TextBlock
            {
                Text = "–£ —ç—Ç–æ–π –≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∫–ª–∞–¥–æ–∫.\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
                FontSize = 16,
                HorizontalAlignment = HorizontalAlignment.Center,
                TextWrapping = TextWrapping.Wrap,
                Margin = new Thickness(0, 0, 0, 30),
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            stackPanel.Children.Add(descriptionText);
            
            // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
            var createTabButton = new Button
            {
                Content = "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É",
                Height = 50,
                Width = 200,
                Margin = new Thickness(0, 0, 0, 0),
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 16,
                FontWeight = FontWeights.Bold,
                HorizontalAlignment = HorizontalAlignment.Center
            };
            createTabButton.Click += (s, e) => AddTab_Click(projectName, exportName);
            stackPanel.Children.Add(createTabButton);
            
            border.Child = stackPanel;
            return border;
        }

        private Border CreateExportTabsRightPanel(string projectName, string exportName)
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(248, 249, 250))
            };

            var grid = new Grid();
            grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });
            grid.RowDefinitions.Add(new RowDefinition { Height = new GridLength(1, GridUnitType.Star) });
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤—ã–≥—Ä—É–∑–∫–∏
            var headerPanel = new StackPanel { Margin = new Thickness(20, 20, 20, 10) };
            var title = new TextBlock
            {
                Text = $"üì§ {exportName}",
                FontSize = 20,
                FontWeight = FontWeights.Bold,
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            headerPanel.Children.Add(title);
            
            var subtitle = new TextBlock
            {
                Text = "–í–∫–ª–∞–¥–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                FontSize = 14,
                Margin = new Thickness(0, 5, 0, 0),
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            headerPanel.Children.Add(subtitle);
            Grid.SetRow(headerPanel, 0);
            grid.Children.Add(headerPanel);
            
            // –°–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫
            var tabsPanel = new StackPanel { Margin = new Thickness(20, 0, 20, 20) };
            var scrollViewer = new ScrollViewer { VerticalScrollBarVisibility = ScrollBarVisibility.Auto };
            var tabsList = new StackPanel();
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É
            var project = _projects.Find(p => p.Name == projectName);
            var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
            if (export != null)
            {
                foreach (var tab in export.Tabs)
                {
                    var tabButton = new Button
                    {
                        Content = $"üìã {tab.Name}",
                        Height = 50,
                        Margin = new Thickness(0, 0, 0, 10),
                        Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                        BorderThickness = new Thickness(1),
                        BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                        HorizontalAlignment = HorizontalAlignment.Stretch,
                        HorizontalContentAlignment = HorizontalAlignment.Left,
                        Padding = new Thickness(15, 0, 0, 0),
                        FontSize = 14
                    };
                    tabButton.Click += (s, e) => ShowTabSettingsInRightPanel(projectName, exportName, tab.Name);
                    tabsList.Children.Add(tabButton);
                }
            }
            
            scrollViewer.Content = tabsList;
            tabsPanel.Children.Add(scrollViewer);
            
            // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
            var addButton = new Button
            {
                Content = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥–∫—É",
                Height = 40,
                Margin = new Thickness(0, 10, 0, 0),
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 14
            };
            addButton.Click += (s, e) => AddTab_Click(projectName, exportName);
            tabsPanel.Children.Add(addButton);
            
            Grid.SetRow(tabsPanel, 1);
            grid.Children.Add(tabsPanel);
            
            border.Child = grid;
            return border;
        }

        private void ShowTabSettingsInRightPanel(string projectName, string exportName, string tabName)
        {
            // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –≤ MainGrid –∏ –∑–∞–º–µ–Ω—è–µ–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤–∫–ª–∞–¥–∫–∏
            var grid = MainGrid.Children[0] as Grid;
            if (grid != null && grid.Children.Count >= 3)
            {
                var rightPanel = CreateTabSettingsRightPanel(projectName, exportName, tabName);
                Grid.SetColumn(rightPanel, 2);
                grid.Children.RemoveAt(2); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
                grid.Children.Add(rightPanel); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            }
        }

        private void ShowExportScreen(string projectName, string exportName)
        {
            _currentExportName = exportName;
            MainGrid.Children.Clear();
            
            var grid = new Grid();
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(300) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(5) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            
            // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –°–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫
            var leftPanel = CreateTabsLeftPanel(projectName, exportName);
            Grid.SetColumn(leftPanel, 0);
            grid.Children.Add(leftPanel);
            
            // GridSplitter
            var splitter = new GridSplitter
            {
                Width = 5,
                Background = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                HorizontalAlignment = HorizontalAlignment.Stretch
            };
            Grid.SetColumn(splitter, 1);
            grid.Children.Add(splitter);
            
            // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∫–ª–∞–¥–∫–∏
            var rightPanel = CreateTabSettingsRightPanel(projectName, exportName, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É");
            Grid.SetColumn(rightPanel, 2);
            grid.Children.Add(rightPanel);
            
            MainGrid.Children.Add(grid);
        }

        private Border CreateTabsLeftPanel(string projectName, string exportName)
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                BorderThickness = new Thickness(1),
                Margin = new Thickness(20, 20, 10, 20)
            };

            var stackPanel = new StackPanel { Margin = new Thickness(20) };
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
            var headerPanel = new StackPanel { Orientation = Orientation.Horizontal, Margin = new Thickness(0, 0, 0, 20) };
            
            var backButton = new Button
            {
                Content = "‚Üê",
                FontSize = 18,
                Width = 40,
                Height = 40,
                Background = new SolidColorBrush(Color.FromRgb(108, 117, 125)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                Margin = new Thickness(0, 0, 15, 0)
            };
            backButton.Click += (s, e) => ShowProjectScreen(projectName);
            headerPanel.Children.Add(backButton);
            
            var title = new TextBlock
            {
                Text = exportName,
                FontSize = 20,
                FontWeight = FontWeights.Bold,
                VerticalAlignment = VerticalAlignment.Center,
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            headerPanel.Children.Add(title);
            stackPanel.Children.Add(headerPanel);
            
            // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
            var subtitle = new TextBlock
            {
                Text = "–í–∫–ª–∞–¥–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                FontSize = 14,
                Margin = new Thickness(0, 0, 0, 15),
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
            };
            stackPanel.Children.Add(subtitle);
            
            // –°–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫
            var scrollViewer = new ScrollViewer
            {
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                MaxHeight = 400
            };
            var tabsList = new StackPanel();
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É
            var project = _projects.Find(p => p.Name == projectName);
            var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
            if (export != null)
            {
                foreach (var tab in export.Tabs)
                {
                    var tabButton = new Button
                    {
                        Content = $"üìã {tab.Name}",
                        Height = 50,
                        Margin = new Thickness(0, 0, 0, 15),
                        Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                        BorderThickness = new Thickness(1),
                        BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                        HorizontalAlignment = HorizontalAlignment.Stretch,
                        HorizontalContentAlignment = HorizontalAlignment.Left,
                        Padding = new Thickness(15, 0, 0, 0),
                        FontSize = 14
                    };
                    tabButton.Click += (s, e) => ShowTabSettingsScreen(projectName, exportName, tab.Name);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ü–ö–ú
                    var contextMenu = new ContextMenu();
                    
                    var renameItem = new MenuItem
                    {
                        Header = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
                        Icon = new TextBlock { Text = "‚úèÔ∏è", FontSize = 14 }
                    };
                    renameItem.Click += (s, e) => RenameTab(projectName, exportName, tab.Name);
                    contextMenu.Items.Add(renameItem);
                    
                    var deleteItem = new MenuItem
                    {
                        Header = "–£–¥–∞–ª–∏—Ç—å",
                        Icon = new TextBlock { Text = "üóëÔ∏è", FontSize = 14 }
                    };
                    deleteItem.Click += (s, e) => DeleteTab(projectName, exportName, tab.Name);
                    contextMenu.Items.Add(deleteItem);
                    
                    tabButton.ContextMenu = contextMenu;
                    tabsList.Children.Add(tabButton);
                }
            }
            
            scrollViewer.Content = tabsList;
            stackPanel.Children.Add(scrollViewer);
            
            // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
            var addButton = new Button
            {
                Content = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥–∫—É",
                Height = 50,
                Margin = new Thickness(0, 20, 0, 0),
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 14
            };
            addButton.Click += (s, e) => AddTab_Click(projectName, exportName);
            stackPanel.Children.Add(addButton);
            
            border.Child = stackPanel;
            return border;
        }

        private Border CreateTabSettingsRightPanel(string projectName, string exportName, string tabName)
        {
            var border = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(248, 249, 250))
            };

            var grid = new Grid();
            grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto }); // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto }); // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
            grid.RowDefinitions.Add(new RowDefinition { Height = new GridLength(1, GridUnitType.Star) }); // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            var headerPanel = new StackPanel { Margin = new Thickness(20, 20, 20, 10) };
            var title = new TextBlock
            {
                Text = $"üì§ {exportName} - {tabName}",
                FontSize = 18,
                FontWeight = FontWeights.Bold,
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            headerPanel.Children.Add(title);
            Grid.SetRow(headerPanel, 0);
            grid.Children.Add(headerPanel);
            
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
            var tabsPanel = new StackPanel 
            { 
                Orientation = Orientation.Horizontal,
                Margin = new Thickness(20, 0, 20, 10)
            };
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É –∏ —Å–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
            var project = _projects.Find(p => p.Name == projectName);
            var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
            if (export != null)
            {
                foreach (var tab in export.Tabs)
                {
                    var tabButton = new Button
                    {
                        Content = tab.Name,
                        Height = 35,
                        MinWidth = 100,
                        Margin = new Thickness(0, 0, 5, 0),
                        Background = tab.Name == tabName ? 
                            new SolidColorBrush(Color.FromRgb(0, 123, 255)) : 
                            new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                        Foreground = tab.Name == tabName ? 
                            Brushes.White : 
                            new SolidColorBrush(Color.FromRgb(33, 37, 41)),
                        BorderThickness = new Thickness(1),
                        BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                        FontSize = 12
                    };
                    tabButton.Click += (s, e) => ShowTabSettingsInRightPanel(projectName, exportName, tab.Name);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ü–ö–ú
                    var contextMenu = new ContextMenu();
                    
                    var renameItem = new MenuItem
                    {
                        Header = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
                        Icon = new TextBlock { Text = "‚úèÔ∏è", FontSize = 14 }
                    };
                    renameItem.Click += (s, e) => RenameTab(projectName, exportName, tab.Name);
                    contextMenu.Items.Add(renameItem);
                    
                    var deleteItem = new MenuItem
                    {
                        Header = "–£–¥–∞–ª–∏—Ç—å",
                        Icon = new TextBlock { Text = "üóëÔ∏è", FontSize = 14 }
                    };
                    deleteItem.Click += (s, e) => DeleteTab(projectName, exportName, tab.Name);
                    contextMenu.Items.Add(deleteItem);
                    
                    tabButton.ContextMenu = contextMenu;
                    tabsPanel.Children.Add(tabButton);
                }
                
                // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
                var addTabButton = new Button
                {
                    Content = "+",
                    Height = 35,
                    Width = 50, // –ü–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã –æ—Ç –æ–±—ã—á–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ (100/2)
                    Margin = new Thickness(0, 0, 5, 0),
                    Background = new SolidColorBrush(Color.FromRgb(40, 167, 69)), // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
                    Foreground = Brushes.White,
                    BorderThickness = new Thickness(1),
                    BorderBrush = new SolidColorBrush(Color.FromRgb(40, 167, 69)),
                    FontSize = 16,
                    FontWeight = FontWeights.Bold
                };
                addTabButton.Click += (s, e) => AddTabFromHorizontalPanel(projectName, exportName);
                tabsPanel.Children.Add(addTabButton);
            }
            
            Grid.SetRow(tabsPanel, 1);
            grid.Children.Add(tabsPanel);
            
            // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ - –ø–µ—Ä–µ—á–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            var contentPanel = new ScrollViewer 
            { 
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                Margin = new Thickness(20, 0, 20, 20)
            };
            
            var parametersStack = new StackPanel();
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            var parametersTitle = new TextBlock
            {
                Text = "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                FontSize = 16,
                FontWeight = FontWeights.SemiBold,
                Margin = new Thickness(0, 0, 0, 15),
                Foreground = new SolidColorBrush(Color.FromRgb(73, 80, 87))
            };
            parametersStack.Children.Add(parametersTitle);
            
            // –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            var parametersList = new StackPanel();
            
            // –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
            var sampleParameters = new[]
            {
                "üìÅ –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–¥–µ–ª—è–º–∏",
                "üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            };
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä "–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–¥–µ–ª—è–º–∏"
            var modelsPathBorder = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                BorderThickness = new Thickness(1),
                CornerRadius = new CornerRadius(4),
                Padding = new Thickness(15, 10, 15, 10),
                Margin = new Thickness(0, 0, 0, 8)
            };
            
            var modelsPathGrid = new Grid();
            modelsPathGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            modelsPathGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });
            
            var modelsPathText = new TextBlock
            {
                Text = "üìÅ –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–¥–µ–ª—è–º–∏:",
                FontSize = 14,
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41)),
                VerticalAlignment = VerticalAlignment.Center
            };
            Grid.SetColumn(modelsPathText, 0);
            modelsPathGrid.Children.Add(modelsPathText);
            
            var browseModelsButton = new Button
            {
                Content = "–û–±–∑–æ—Ä",
                Width = 80,
                Height = 30,
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 12
            };
            browseModelsButton.Click += (s, e) => BrowseModelsFolder_Click(projectName, exportName, tabName);
            Grid.SetColumn(browseModelsButton, 1);
            modelsPathGrid.Children.Add(browseModelsButton);
            
            modelsPathBorder.Child = modelsPathGrid;
            parametersList.Children.Add(modelsPathBorder);
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            var viewResultsBorder = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                BorderThickness = new Thickness(1),
                CornerRadius = new CornerRadius(4),
                Padding = new Thickness(15, 10, 15, 10),
                Margin = new Thickness(0, 0, 0, 8)
            };
            
            var viewResultsGrid = new Grid();
            viewResultsGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            viewResultsGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });
            
            var viewResultsText = new TextBlock
            {
                Text = "üìÇ –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
                FontSize = 14,
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41)),
                VerticalAlignment = VerticalAlignment.Center
            };
            Grid.SetColumn(viewResultsText, 0);
            viewResultsGrid.Children.Add(viewResultsText);
            
            var viewResultsButton = new Button
            {
                Content = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                Width = 150,
                Height = 30,
                Background = new SolidColorBrush(Color.FromRgb(40, 167, 69)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 12
            };
            viewResultsButton.Click += (s, e) => ViewResultsFolder_Click(projectName, exportName, tabName);
            Grid.SetColumn(viewResultsButton, 1);
            viewResultsGrid.Children.Add(viewResultsButton);
            
            viewResultsBorder.Child = viewResultsGrid;
            parametersList.Children.Add(viewResultsBorder);
            
            parametersStack.Children.Add(parametersList);
            
            // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            var exportButton = new Button
            {
                Content = "üöÄ –ù–∞—á–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç",
                Height = 50,
                Margin = new Thickness(0, 20, 0, 0),
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 16,
                FontWeight = FontWeights.Bold
            };
            exportButton.Click += (s, e) => StartExport_Click(projectName, exportName, tabName);
            parametersStack.Children.Add(exportButton);
            
            // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ TabContentView
            var currentTab = export?.Tabs.FirstOrDefault(t => t.Name == tabName);
            if (currentTab != null)
            {
                try
                {
                    WriteToLogFile($"MainWindow: Creating TabContentView for tab '{tabName}'");
                    _currentTab = currentTab; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
                    var tabContentView = new TabContentView(currentTab, this); // –ü–µ—Ä–µ–¥–∞–µ–º MainWindow –∫–∞–∫ ExportView
                    WriteToLogFile($"MainWindow: TabContentView created successfully for tab '{tabName}'");
                    
                    Grid.SetRow(tabContentView, 2);
                    grid.Children.Add(tabContentView);
                }
                catch (Exception ex)
                {
                    WriteToLogFile($"MainWindow: Exception creating TabContentView for tab '{tabName}': {ex.Message}");
                    WriteToLogFile($"MainWindow: Stack trace: {ex.StackTrace}");
                    
                    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                    contentPanel.Content = parametersStack;
                    Grid.SetRow(contentPanel, 2);
                    grid.Children.Add(contentPanel);
                }
            }
            else
            {
                // –ï—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                var notFoundContent = new TextBlock
                {
                    Text = "–í–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    FontSize = 14,
                    Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125)),
                    Margin = new Thickness(20),
                    HorizontalAlignment = HorizontalAlignment.Center,
                    VerticalAlignment = VerticalAlignment.Center
                };
                Grid.SetRow(notFoundContent, 2);
                grid.Children.Add(notFoundContent);
            }
            
            border.Child = grid;
            return border;
        }

        private void ShowTabSettingsScreen(string projectName, string exportName, string tabName)
        {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
            MessageBox.Show($"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∫–ª–∞–¥–∫–∏: {tabName}", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void AddProject_Click(object sender, RoutedEventArgs e)
        {
            var createProjectWindow = new AddProjectWindow();
            if (createProjectWindow.ShowDialog() == true)
            {
                try
                {
                    var projectName = createProjectWindow.ProjectName;
                    var projectPath = Path.Combine("C:\\DataViewer", "–ü—Ä–æ–µ–∫—Ç—ã", projectName);
                    
                    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
                    if (!Directory.Exists(projectPath))
                    {
                        Directory.CreateDirectory(projectPath);
                    }
                    
                    var newProject = new Project
                    {
                        Name = projectName,
                        FolderPath = projectPath
                    };

                    _projects.Add(newProject);
                    SaveProjects();
                    ShowProjectsScreen();
                    
                    MessageBox.Show($"–ü—Ä–æ–µ–∫—Ç '{projectName}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ:\n{projectPath}", 
                        "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {ex.Message}", 
                        "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void AddExistingProject_Click(object sender, RoutedEventArgs e)
        {
            using (var dialog = new System.Windows.Forms.FolderBrowserDialog())
            {
                dialog.Description = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞";
                dialog.ShowNewFolderButton = false;
                
                if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    try
                    {
                        var projectPath = dialog.SelectedPath;
                        var projectName = Path.GetFileName(projectPath);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç
                        if (_projects.Any(p => p.FolderPath.Equals(projectPath, StringComparison.OrdinalIgnoreCase)))
                        {
                            MessageBox.Show("–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                MessageBoxButton.OK, MessageBoxImage.Warning);
                            return;
                        }
                        
                        // –°–∫–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
                        var project = ScanProjectFolder(projectPath, projectName);
                        
                        if (project != null)
                        {
                            _projects.Add(project);
                            SaveProjects();
                            ShowProjectsScreen();
                            
                            MessageBox.Show($"–ü—Ä–æ–µ–∫—Ç '{projectName}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n" +
                                          $"–ù–∞–π–¥–µ–Ω–æ –≤—ã–≥—Ä—É–∑–æ–∫: {project.Exports.Count}\n" +
                                          $"–ù–∞–π–¥–µ–Ω–æ –≤–∫–ª–∞–¥–æ–∫: {project.Exports.Sum(exp => exp.Tabs.Count)}", 
                                          "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: {ex.Message}", 
                            "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }

        private Project ScanProjectFolder(string projectPath, string projectName)
        {
            try
            {
                var project = new Project
                {
                    Name = projectName,
                    FolderPath = projectPath
                };

                WriteToLogFile($"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {projectPath}");

                // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –≤—ã–≥—Ä—É–∑–æ–∫
                if (Directory.Exists(projectPath))
                {
                    var exportFolders = Directory.GetDirectories(projectPath);
                    WriteToLogFile($"–ù–∞–π–¥–µ–Ω–æ {exportFolders.Length} –ø–∞–ø–æ–∫ –≤—ã–≥—Ä—É–∑–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ '{projectName}'");
                    
                    foreach (var exportFolder in exportFolders)
                    {
                        var exportName = Path.GetFileName(exportFolder);
                        WriteToLogFile($"  –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≥—Ä—É–∑–∫–∏: {exportName} ({exportFolder})");
                        
                        var export = new Export
                        {
                            Name = exportName,
                            FolderPath = exportFolder
                        };

                        // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –≤–Ω—É—Ç—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–∏
                        var tabFolders = Directory.GetDirectories(exportFolder);
                        WriteToLogFile($"    –ù–∞–π–¥–µ–Ω–æ {tabFolders.Length} –ø–∞–ø–æ–∫ –≤–∫–ª–∞–¥–æ–∫ –≤ –≤—ã–≥—Ä—É–∑–∫–µ '{exportName}'");
                        
                        foreach (var tabFolder in tabFolders)
                        {
                            var tabName = Path.GetFileName(tabFolder);
                            WriteToLogFile($"      –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏: {tabName} ({tabFolder})");
                            
                            var tab = new ExportTab
                            {
                                Name = tabName,
                                FolderPath = tabFolder,
                                RevitVersion = "2023" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            };

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ "–ú–æ–¥–µ–ª–∏" –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å
                            var modelsPath = Path.Combine(tabFolder, "–ú–æ–¥–µ–ª–∏");
                            if (Directory.Exists(modelsPath))
                            {
                                tab.ModelsFolder = modelsPath;
                                WriteToLogFile($"      ‚úì –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ '–ú–æ–¥–µ–ª–∏' –≤ –≤–∫–ª–∞–¥–∫–µ '{tabName}': {modelsPath}");
                                
                                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ .rvt —Ñ–∞–π–ª–æ–≤
                                var rvtFiles = Directory.GetFiles(modelsPath, "*.rvt", SearchOption.AllDirectories);
                                WriteToLogFile($"      ‚úì –ù–∞–π–¥–µ–Ω–æ {rvtFiles.Length} .rvt —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ '–ú–æ–¥–µ–ª–∏'");
                            }
                            else
                            {
                                WriteToLogFile($"      ‚ö†Ô∏è –ü–∞–ø–∫–∞ '–ú–æ–¥–µ–ª–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∫–ª–∞–¥–∫–µ '{tabName}'");
                            }

                            export.Tabs.Add(tab);
                        }

                        project.Exports.Add(export);
                        WriteToLogFile($"    ‚úì –í—ã–≥—Ä—É–∑–∫–∞ '{exportName}' –¥–æ–±–∞–≤–ª–µ–Ω–∞: {export.Tabs.Count} –≤–∫–ª–∞–¥–æ–∫");
                    }
                }
                else
                {
                    WriteToLogFile($"‚ùå –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {projectPath}");
                }

                WriteToLogFile($"‚úì –ü—Ä–æ–µ–∫—Ç '{projectName}' –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω: {project.Exports.Count} –≤—ã–≥—Ä—É–∑–æ–∫");
                return project;
            }
            catch (Exception ex)
            {
                WriteToLogFile($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ '{projectName}': {ex.Message}");
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                return null;
            }
        }

        private void AddExport_Click(string projectName)
        {
            var addExportWindow = new AddExportWindow();
            if (addExportWindow.ShowDialog() == true)
            {
                var project = _projects.Find(p => p.Name == projectName);
                if (project != null)
                {
                    try
                    {
                        var exportName = addExportWindow.ExportName;
                        var exportFolderPath = Path.Combine(project.FolderPath, exportName);
                        
                        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –≤—ã–≥—Ä—É–∑–∫–∏
                        Directory.CreateDirectory(exportFolderPath);
                        
                        var newExport = new Export
                        {
                            Name = exportName,
                            FolderPath = exportFolderPath
                        };

                        project.Exports.Add(newExport);
                        SaveProjects();
                        ShowProjectScreen(projectName);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤—ã–≥—Ä—É–∑–∫–∏: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }

        private void AddTab_Click(string projectName, string exportName)
        {
            var project = _projects.Find(p => p.Name == projectName);
            var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
            if (export != null)
            {
                try
                {
                    var tabNumber = export.Tabs.Count + 1;
                    var tabName = $"–í–∫–ª–∞–¥–∫–∞ {tabNumber}";
                    var tabFolderPath = Path.Combine(export.FolderPath, tabName);
                    
                    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
                    Directory.CreateDirectory(tabFolderPath);
                    
                    var newTab = new ExportTab
                    {
                        Name = tabName,
                        FolderPath = tabFolderPath,
                        RevitVersion = "2023"
                    };

                    export.Tabs.Add(newTab);
                    SaveProjects();
                    
                    // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏
                    var grid = MainGrid.Children[0] as Grid;
                    if (grid != null && grid.Children.Count >= 3)
                    {
                        var rightPanel = CreateTabSettingsRightPanel(projectName, exportName, newTab.Name);
                        Grid.SetColumn(rightPanel, 2);
                        grid.Children.RemoveAt(2);
                        grid.Children.Add(rightPanel);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤–∫–ª–∞–¥–∫–∏: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        public void GoBackToProjects()
        {
            ShowProjectsScreen();
        }

        private void AddTabFromHorizontalPanel(string projectName, string exportName)
        {
            var project = _projects.Find(p => p.Name == projectName);
            var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
            if (export != null)
            {
                try
                {
                    var tabNumber = export.Tabs.Count + 1;
                    var tabName = $"–í–∫–ª–∞–¥–∫–∞ {tabNumber}";
                    var tabFolderPath = Path.Combine(export.FolderPath, tabName);
                    
                    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
                    Directory.CreateDirectory(tabFolderPath);
                    
                    var newTab = new ExportTab
                    {
                        Name = tabName,
                        FolderPath = tabFolderPath,
                        RevitVersion = "2023"
                    };

                    export.Tabs.Add(newTab);
                    SaveProjects();
                    
                    // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏
                    var grid = MainGrid.Children[0] as Grid;
                    if (grid != null && grid.Children.Count >= 3)
                    {
                        var rightPanel = CreateTabSettingsRightPanel(projectName, exportName, newTab.Name);
                        Grid.SetColumn(rightPanel, 2);
                        grid.Children.RemoveAt(2);
                        grid.Children.Add(rightPanel);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤–∫–ª–∞–¥–∫–∏: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void ShowProjectContextMenu(string projectName, Button menuButton)
        {
            var contextMenu = new ContextMenu();
            
            var renameItem = new MenuItem
            {
                Header = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
                Icon = new TextBlock { Text = "‚úèÔ∏è", FontSize = 14 }
            };
            renameItem.Click += (s, e) => RenameProject(projectName);
            contextMenu.Items.Add(renameItem);
            
            var deleteItem = new MenuItem
            {
                Header = "–£–¥–∞–ª–∏—Ç—å",
                Icon = new TextBlock { Text = "üóëÔ∏è", FontSize = 14 }
            };
            deleteItem.Click += (s, e) => DeleteProject(projectName);
            contextMenu.Items.Add(deleteItem);
            
            contextMenu.PlacementTarget = menuButton;
            contextMenu.Placement = System.Windows.Controls.Primitives.PlacementMode.Bottom;
            contextMenu.IsOpen = true;
        }

        private void ShowExportContextMenu(string projectName, string exportName, Button menuButton)
        {
            var contextMenu = new ContextMenu();
            
            var renameItem = new MenuItem
            {
                Header = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
                Icon = new TextBlock { Text = "‚úèÔ∏è", FontSize = 14 }
            };
            renameItem.Click += (s, e) => RenameExport(projectName, exportName);
            contextMenu.Items.Add(renameItem);
            
            var deleteItem = new MenuItem
            {
                Header = "–£–¥–∞–ª–∏—Ç—å",
                Icon = new TextBlock { Text = "üóëÔ∏è", FontSize = 14 }
            };
            deleteItem.Click += (s, e) => DeleteExport(projectName, exportName);
            contextMenu.Items.Add(deleteItem);
            
            contextMenu.PlacementTarget = menuButton;
            contextMenu.Placement = System.Windows.Controls.Primitives.PlacementMode.Bottom;
            contextMenu.IsOpen = true;
        }

        private void RenameProject(string projectName)
        {
            var renameWindow = new RenameWindow(projectName);
            if (renameWindow.ShowDialog() == true)
            {
                var project = _projects.Find(p => p.Name == projectName);
                if (project != null && !string.IsNullOrWhiteSpace(renameWindow.NewName))
                {
                    try
                    {
                        var oldPath = project.FolderPath;
                        var newPath = Path.Combine(Path.GetDirectoryName(oldPath), renameWindow.NewName);
                        
                        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É
                        Directory.Move(oldPath, newPath);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
                        project.Name = renameWindow.NewName;
                        project.FolderPath = newPath;
                        
                        SaveProjects();
                        ShowProjectsScreen();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }

        private void DeleteProject(string projectName)
        {
            var result = MessageBox.Show(
                $"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç '{projectName}'?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç –≤—Å—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞.",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                MessageBoxButton.YesNo,
                MessageBoxImage.Warning);
                
            if (result == MessageBoxResult.Yes)
            {
                try
                {
                    var project = _projects.Find(p => p.Name == projectName);
                    if (project != null)
                    {
                        // –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
                        if (Directory.Exists(project.FolderPath))
                        {
                            Directory.Delete(project.FolderPath, true);
                        }
                        
                        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
                        _projects.RemoveAll(p => p.Name == projectName);
                        SaveProjects();
                        ShowProjectsScreen();
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void RenameExport(string projectName, string exportName)
        {
            var renameWindow = new RenameWindow(exportName);
            if (renameWindow.ShowDialog() == true)
            {
                var project = _projects.Find(p => p.Name == projectName);
                var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
                if (export != null && !string.IsNullOrWhiteSpace(renameWindow.NewName))
                {
                    try
                    {
                        var oldPath = export.FolderPath;
                        var newPath = Path.Combine(Path.GetDirectoryName(oldPath), renameWindow.NewName);
                        
                        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É –≤—ã–≥—Ä—É–∑–∫–∏
                        Directory.Move(oldPath, newPath);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–≥—Ä—É–∑–∫–∏
                        export.Name = renameWindow.NewName;
                        export.FolderPath = newPath;
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
                        foreach (var tab in export.Tabs)
                        {
                            var oldTabPath = tab.FolderPath;
                            var newTabPath = Path.Combine(newPath, Path.GetFileName(oldTabPath));
                            tab.FolderPath = newTabPath;
                        }
                        
                        SaveProjects();
                        ShowProjectScreen(projectName);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤—ã–≥—Ä—É–∑–∫–∏: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }

        private void DeleteExport(string projectName, string exportName)
        {
            var result = MessageBox.Show(
                $"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–≥—Ä—É–∑–∫—É '{exportName}'?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç –≤—Å—é –ø–∞–ø–∫—É –≤—ã–≥—Ä—É–∑–∫–∏.",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                MessageBoxButton.YesNo,
                MessageBoxImage.Warning);
                
            if (result == MessageBoxResult.Yes)
            {
                try
                {
                    var project = _projects.Find(p => p.Name == projectName);
                    var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
                    if (export != null)
                    {
                        // –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –≤—ã–≥—Ä—É–∑–∫–∏
                        if (Directory.Exists(export.FolderPath))
                        {
                            Directory.Delete(export.FolderPath, true);
                        }
                        
                        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–≥—Ä—É–∑–æ–∫
                        project.Exports.Remove(export);
                        SaveProjects();
                        ShowProjectScreen(projectName);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤—ã–≥—Ä—É–∑–∫–∏: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void RenameTab(string projectName, string exportName, string tabName)
        {
            var renameWindow = new RenameWindow(tabName);
            if (renameWindow.ShowDialog() == true)
            {
                var project = _projects.Find(p => p.Name == projectName);
                var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
                var tab = export?.Tabs.FirstOrDefault(t => t.Name == tabName);
                
                if (tab != null && !string.IsNullOrWhiteSpace(renameWindow.NewName))
                {
                    try
                    {
                        var oldPath = tab.FolderPath;
                        var newPath = Path.Combine(Path.GetDirectoryName(oldPath), renameWindow.NewName);
                        
                        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
                        Directory.Move(oldPath, newPath);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
                        tab.Name = renameWindow.NewName;
                        tab.FolderPath = newPath;
                        
                        SaveProjects();
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                        var grid = MainGrid.Children[0] as Grid;
                        if (grid != null && grid.Children.Count >= 3)
                        {
                            var rightPanel = CreateTabSettingsRightPanel(projectName, exportName, tab.Name);
                            Grid.SetColumn(rightPanel, 2);
                            grid.Children.RemoveAt(2);
                            grid.Children.Add(rightPanel);
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤–∫–ª–∞–¥–∫–∏: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }

        private void DeleteTab(string projectName, string exportName, string tabName)
        {
            var result = MessageBox.Show(
                $"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∫–ª–∞–¥–∫—É '{tabName}'?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç –ø–∞–ø–∫—É –≤–∫–ª–∞–¥–∫–∏.",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                MessageBoxButton.YesNo,
                MessageBoxImage.Warning);
                
            if (result == MessageBoxResult.Yes)
            {
                try
                {
                    var project = _projects.Find(p => p.Name == projectName);
                    var export = project?.Exports.FirstOrDefault(e => e.Name == exportName);
                    
                    if (export != null)
                    {
                        var tabToRemove = export.Tabs.FirstOrDefault(t => t.Name == tabName);
                        if (tabToRemove != null)
                        {
                            // –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
                            if (Directory.Exists(tabToRemove.FolderPath))
                            {
                                Directory.Delete(tabToRemove.FolderPath, true);
                            }
                            
                            export.Tabs.Remove(tabToRemove);
                        }
                        SaveProjects();
                        
                        // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∫–ª–∞–¥–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–≥—Ä—É–∑–∫–∏
                        if (export.Tabs.Count == 0)
                        {
                            ShowProjectScreen(projectName);
                        }
                        else
                        {
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –æ—Å—Ç–∞–≤—à—É—é—Å—è –≤–∫–ª–∞–¥–∫—É
                            var firstTab = export.Tabs.FirstOrDefault();
                            if (firstTab != null)
                            {
                                var grid = MainGrid.Children[0] as Grid;
                                if (grid != null && grid.Children.Count >= 3)
                                {
                                    var rightPanel = CreateTabSettingsRightPanel(projectName, exportName, firstTab.Name);
                                    Grid.SetColumn(rightPanel, 2);
                                    grid.Children.RemoveAt(2);
                                    grid.Children.Add(rightPanel);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤–∫–ª–∞–¥–∫–∏: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void BrowseModelsFolder_Click(string projectName, string exportName, string tabName)
        {
            var dialog = new System.Windows.Forms.FolderBrowserDialog
            {
                Description = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –º–æ–¥–µ–ª—è–º–∏ Revit",
                ShowNewFolderButton = false
            };

            if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                try
                {
                    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –≤–∫–ª–∞–¥–∫–∏
                    var projectPath = Path.Combine("C:\\DataViewer", "–ü—Ä–æ–µ–∫—Ç—ã", projectName);
                    var exportPath = Path.Combine(projectPath, exportName);
                    var tabPath = Path.Combine(exportPath, tabName);
                    var modelsPath = Path.Combine(tabPath, "–ú–æ–¥–µ–ª–∏");


                    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É "–ú–æ–¥–µ–ª–∏", –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    if (Directory.Exists(modelsPath))
                    {
                        Directory.Delete(modelsPath, true);
                    }

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É "–ú–æ–¥–µ–ª–∏"
                    Directory.CreateDirectory(modelsPath);

                    // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ .rvt —Ñ–∞–π–ª—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∏ –ø–æ–¥—Å—á–µ—Ç–æ–º
                    int copiedFilesCount = CopyRvtFilesRecursively(dialog.SelectedPath, modelsPath);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª–∞—Å—å
                    if (Directory.Exists(modelsPath))
                    {
                        MessageBox.Show($"–ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–∞–ø–∫—É:\n{modelsPath}\n\n–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ .rvt —Ñ–∞–π–ª–æ–≤: {copiedFilesCount}", 
                            "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                    else
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {modelsPath}", 
                            "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π:\n{ex.Message}", 
                        "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void ViewResultsFolder_Click(string projectName, string exportName, string tabName)
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –≤–∫–ª–∞–¥–∫–∏
                var projectPath = Path.Combine("C:\\DataViewer", "–ü—Ä–æ–µ–∫—Ç—ã", projectName);
                var exportPath = Path.Combine(projectPath, exportName);
                var tabPath = Path.Combine(exportPath, tabName);

                // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (!Directory.Exists(tabPath))
                {
                    Directory.CreateDirectory(tabPath);
                }

                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ Windows
                System.Diagnostics.Process.Start("explorer.exe", tabPath);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n{ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private int CopyRvtFilesRecursively(string sourceDir, string targetDir)
        {
            int copiedFilesCount = 0;
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!Directory.Exists(targetDir))
            {
                Directory.CreateDirectory(targetDir);
            }

            // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ .rvt —Ñ–∞–π–ª—ã –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
            var rvtFiles = Directory.GetFiles(sourceDir, "*.rvt");
            foreach (var file in rvtFiles)
            {
                var fileName = Path.GetFileName(file);
                var targetFile = Path.Combine(targetDir, fileName);
                File.Copy(file, targetFile, true);
                copiedFilesCount++;
            }

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
            var subDirs = Directory.GetDirectories(sourceDir);
            foreach (var subDir in subDirs)
            {
                var dirName = Path.GetFileName(subDir);
                var targetSubDir = Path.Combine(targetDir, dirName);
                copiedFilesCount += CopyRvtFilesRecursively(subDir, targetSubDir);
            }

            return copiedFilesCount;
        }

        private void StartExport_Click(string projectName, string exportName, string tabName)
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if (string.IsNullOrEmpty(projectName))
                {
                    MessageBox.Show("–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                if (string.IsNullOrEmpty(exportName))
                {
                    MessageBox.Show("–ò–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                if (string.IsNullOrEmpty(tabName))
                {
                    MessageBox.Show("–ò–º—è –≤–∫–ª–∞–¥–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ "–ú–æ–¥–µ–ª–∏"
                var projectPath = Path.Combine("C:\\DataViewer", "–ü—Ä–æ–µ–∫—Ç—ã", projectName);
                var exportPath = Path.Combine(projectPath, exportName);
                var tabPath = Path.Combine(exportPath, tabName);
                var modelsPath = Path.Combine(tabPath, "–ú–æ–¥–µ–ª–∏");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ "–ú–æ–¥–µ–ª–∏"
                if (!Directory.Exists(modelsPath))
                {
                    MessageBox.Show("–ü–∞–ø–∫–∞ '–ú–æ–¥–µ–ª–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –º–æ–¥–µ–ª—è–º–∏.", 
                        "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ .rvt —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ "–ú–æ–¥–µ–ª–∏" (–≤–∫–ª—é—á–∞—è –ø–æ–¥–ø–∞–ø–∫–∏)
                var rvtFiles = GetAllRvtFiles(modelsPath);
                
                if (rvtFiles.Count == 0)
                {
                    MessageBox.Show("–í –ø–∞–ø–∫–µ '–ú–æ–¥–µ–ª–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ .rvt —Ñ–∞–π–ª–æ–≤.", 
                        "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                var progressWindow = new ExportProgressWindow();
                if (progressWindow == null)
                {
                    MessageBox.Show("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                progressWindow.SetTotalModels(rvtFiles.Count);
                progressWindow.Show();

                // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
                var resultsPath = tabPath; // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
                if (!Directory.Exists(resultsPath))
                {
                    Directory.CreateDirectory(resultsPath);
                }

                // –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º UI
                try
                {
                    PerformExportWithUIUpdates(rvtFiles, modelsPath, resultsPath, progressWindow);
                }
                catch (Exception ex)
                {
                    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –≤ PerformExport: {ex.Message}");
                    System.Diagnostics.Debug.WriteLine($"StackTrace: {ex.StackTrace}");
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                    progressWindow.Close();
                    MessageBox.Show($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:\n{ex.Message}\n\nStackTrace:\n{ex.StackTrace}", 
                        "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
                
                // –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω - —Ç–∞–π–º–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ PerformExportWithUIUpdates
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:\n{ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void PerformExportWithFilters(List<string> rvtFiles, string modelsPath, string resultsPath, List<string> selectedCategories, ExportProgressWindow progressWindow)
        {
            // –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            var startTime = DateTime.Now;
            
            try
            {
                // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –ª–æ–≥-—Ñ–∞–π–ª—É –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, –≥–¥–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è CSV
                var logFileName = $"CivilX_Detailed_Export_Log_{DateTime.Now:yyyy-MM-dd_HH-mm-ss}.txt";
                _currentLogFilePath = Path.Combine(resultsPath, logFileName);
                
                var successCount = 0;
                var errorCount = 0;
                var errorMessages = new List<string>();

                WriteToLogFile($"=== –ù–ê–ß–ê–õ–û –≠–ö–°–ü–û–†–¢–ê –° –§–ò–õ–¨–¢–†–ê–ú–ò ===");
                WriteToLogFile($"–§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {rvtFiles.Count}");
                WriteToLogFile($"–í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {selectedCategories.Count}");
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥
                WriteDetailedLog("=== –ù–ê–ß–ê–õ–û –î–ï–¢–ê–õ–¨–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –≠–ö–°–ü–û–†–¢–ê ===");
                WriteDetailedLog($"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {startTime:yyyy-MM-dd HH:mm:ss}");
                WriteDetailedLog($"–ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {resultsPath}");
                WriteDetailedLog($"–ü–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏: {modelsPath}");
                WriteDetailedLog($"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {rvtFiles.Count}");
                WriteDetailedLog($"–í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {selectedCategories.Count} –∏–∑ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π");

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π .rvt —Ñ–∞–π–ª
                for (int i = 0; i < rvtFiles.Count; i++)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—Ç–º–µ–Ω–∞
                    if (progressWindow.IsCancelled)
                    {
                        break;
                    }

                    var rvtFile = rvtFiles[i];
                    var fileName = Path.GetFileName(rvtFile);

                    try
                    {
                        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        var relativePath = GetRelativePath(modelsPath, rvtFile);
                        var outputFileName = relativePath.Replace("\\", "_").Replace("/", "_").Replace(".rvt", ".csv");
                        var outputFile = Path.Combine(resultsPath, outputFileName);

                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        UpdateProgressWithUI(progressWindow, i, rvtFiles.Count, fileName, 10);

                        // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .rvt —Ñ–∞–π–ª–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
                        ExportRvtFileDataWithFilters(rvtFile, outputFile, selectedCategories, progressWindow, i, rvtFiles.Count);

                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        UpdateProgressWithUI(progressWindow, i + 1, rvtFiles.Count, fileName, 100);

                        successCount++;
                    }
                catch (Exception ex)
                {
                    errorCount++;
                    var errorMessage = $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {fileName}: {ex.Message}";
                    errorMessages.Add(errorMessage);
                    WriteToLogFile($"‚ùå {errorMessage}");
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ InternalException, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if (ex.Message.Contains("InternalException"))
                    {
                        WriteToLogFile($"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª {fileName} –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞–Ω –≤ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π –≤–µ—Ä—Å–∏–∏ Revit");
                        WriteToLogFile($"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é –≤ Revit –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏");
                    }
                }
                }

                // –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                var endTime = DateTime.Now;
                var duration = endTime - startTime;

                // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                WriteDetailedLog($"\n=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –≠–ö–°–ü–û–†–¢–ê ===");
                WriteDetailedLog($"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {endTime:yyyy-MM-dd HH:mm:ss.fff}");
                WriteDetailedLog($"–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration.TotalMinutes:F2} –º–∏–Ω—É—Ç ({duration.TotalSeconds:F2} —Å–µ–∫—É–Ω–¥)");
                WriteDetailedLog($"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –≠–ö–°–ü–û–†–¢–ê:");
                WriteDetailedLog($"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {successCount}");
                WriteDetailedLog($"  ‚Ä¢ –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {errorCount}");
                WriteDetailedLog($"  ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {rvtFiles.Count}");
                WriteDetailedLog($"  ‚Ä¢ –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {resultsPath}");
                WriteDetailedLog($"  ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {_currentLogFilePath}");
                WriteDetailedLog("=== –ö–û–ù–ï–¶ –î–ï–¢–ê–õ–¨–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===");

                // –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω - –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                System.Diagnostics.Debug.WriteLine("üîç MainWindow - –í–´–ó–û–í progressWindow.CompleteExport()");
                WriteDetailedLog("üîç MainWindow - –í–´–ó–û–í progressWindow.CompleteExport()");
                try
                {
                    WriteDetailedLog("üîç MainWindow - –í–•–û–î–ò–ú –í TRY –ë–õ–û–ö CompleteExport");
                    progressWindow.CompleteExport();
                    WriteDetailedLog("üîç MainWindow - CompleteExport –í–´–ü–û–õ–ù–ï–ù –ë–ï–ó –û–®–ò–ë–û–ö");
                }
                catch (Exception ex)
                {
                    WriteDetailedLog($"‚ùå MainWindow - –û–®–ò–ë–ö–ê –í CompleteExport: {ex.Message}");
                    WriteDetailedLog($"‚ùå MainWindow - StackTrace: {ex.StackTrace}");
                    WriteToLogFile($"‚ùå –û—à–∏–±–∫–∞ –≤ CompleteExport: {ex.Message}");
                    WriteToLogFile($"‚ùå StackTrace: {ex.StackTrace}");
                }
                System.Diagnostics.Debug.WriteLine("üîç MainWindow - progressWindow.CompleteExport() –í–´–ü–û–õ–ù–ï–ù");
                WriteDetailedLog("üîç MainWindow - progressWindow.CompleteExport() –í–´–ü–û–õ–ù–ï–ù");

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                System.Diagnostics.Debug.WriteLine("üîç MainWindow - —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ");
                WriteDetailedLog("üîç MainWindow - —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ");
                var resultMessage = $"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n" +
                                  $"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successCount} —Ñ–∞–π–ª–æ–≤\n" +
                                  $"‚ùå –û—à–∏–±–æ–∫: {errorCount} —Ñ–∞–π–ª–æ–≤\n" +
                                  $"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration.TotalMinutes:F1} –º–∏–Ω—É—Ç\n" +
                                  $"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {resultsPath}";

                if (errorMessages.Count > 0)
                {
                    resultMessage += $"\n\n–û—à–∏–±–∫–∏:\n{string.Join("\n", errorMessages.Take(5))}";
                    if (errorMessages.Count > 5)
                    {
                        resultMessage += $"\n... –∏ –µ—â–µ {errorMessages.Count - 5} –æ—à–∏–±–æ–∫";
                    }
                }

                WriteToLogFile($"=== –≠–ö–°–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù ===");
                WriteToLogFile($"–£—Å–ø–µ—à–Ω–æ: {successCount}, –û—à–∏–±–æ–∫: {errorCount}, –í—Ä–µ–º—è: {duration.TotalMinutes:F1} –º–∏–Ω");

                System.Diagnostics.Debug.WriteLine("üîç MainWindow - –ü–û–ö–ê–ó MessageBox.Show");
                WriteDetailedLog("üîç MainWindow - –ü–û–ö–ê–ó MessageBox.Show");
                MessageBox.Show(resultMessage, "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", MessageBoxButton.OK, 
                    errorCount > 0 ? MessageBoxImage.Warning : MessageBoxImage.Information);
                System.Diagnostics.Debug.WriteLine("üîç MainWindow - MessageBox.Show –ó–ê–í–ï–†–®–ï–ù");
                WriteDetailedLog("üîç MainWindow - MessageBox.Show –ó–ê–í–ï–†–®–ï–ù");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå MainWindow - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –±–ª–æ–∫–µ try: {ex.Message}");
                System.Diagnostics.Debug.WriteLine($"‚ùå StackTrace: {ex.StackTrace}");
                WriteDetailedLog($"‚ùå MainWindow - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –±–ª–æ–∫–µ try: {ex.Message}");
                WriteDetailedLog($"‚ùå StackTrace: {ex.StackTrace}");
                WriteToLogFile($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {ex.Message}");
                System.Diagnostics.Debug.WriteLine("üîç MainWindow - –í–´–ó–û–í progressWindow.CompleteExport() –≤ catch");
                WriteDetailedLog("üîç MainWindow - –í–´–ó–û–í progressWindow.CompleteExport() –≤ catch");
                progressWindow.CompleteExport();
                System.Diagnostics.Debug.WriteLine("üîç MainWindow - progressWindow.CompleteExport() –≤ catch –í–´–ü–û–õ–ù–ï–ù");
                WriteDetailedLog("üîç MainWindow - progressWindow.CompleteExport() –≤ catch –í–´–ü–û–õ–ù–ï–ù");
                System.Diagnostics.Debug.WriteLine("üîç MainWindow - –ü–û–ö–ê–ó MessageBox.Show —Å –æ—à–∏–±–∫–æ–π");
                WriteDetailedLog("üîç MainWindow - –ü–û–ö–ê–ó MessageBox.Show —Å –æ—à–∏–±–∫–æ–π");
                MessageBox.Show($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                System.Diagnostics.Debug.WriteLine("üîç MainWindow - MessageBox.Show —Å –æ—à–∏–±–∫–æ–π –ó–ê–í–ï–†–®–ï–ù");
                WriteDetailedLog("üîç MainWindow - MessageBox.Show —Å –æ—à–∏–±–∫–æ–π –ó–ê–í–ï–†–®–ï–ù");
            }
        }

        private void PerformExportWithUIUpdates(List<string> rvtFiles, string modelsPath, string resultsPath, ExportProgressWindow progressWindow)
        {
            // –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            var startTime = DateTime.Now;
            
            try
            {
                var successCount = 0;
                var errorCount = 0;
                var errorMessages = new List<string>();

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π .rvt —Ñ–∞–π–ª
                for (int i = 0; i < rvtFiles.Count; i++)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—Ç–º–µ–Ω–∞
                    if (progressWindow.IsCancelled)
                    {
                        break;
                    }

                    var rvtFile = rvtFiles[i];
                    var fileName = Path.GetFileName(rvtFile);

                    try
                    {
                        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        var relativePath = GetRelativePath(modelsPath, rvtFile);
                        var outputFileName = relativePath.Replace("\\", "_").Replace("/", "_").Replace(".rvt", ".csv");
                        var outputFile = Path.Combine(resultsPath, outputFileName);

                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        UpdateProgressWithUI(progressWindow, i, rvtFiles.Count, fileName, 10);

                        // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .rvt —Ñ–∞–π–ª–∞
                        ExportRvtFileData(rvtFile, outputFile, progressWindow, i, rvtFiles.Count);

                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        UpdateProgressWithUI(progressWindow, i + 1, rvtFiles.Count, fileName, 100);

                        successCount++;
                    }
                    catch (Exception ex)
                    {
                        errorCount++;
                        errorMessages.Add($"–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {fileName}: {ex.Message}");
                        UpdateProgressWithUI(progressWindow, i + 1, rvtFiles.Count, fileName, 100);
                    }
                }

                // –ï—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (!progressWindow.IsCancelled)
                {
                    System.Diagnostics.Debug.WriteLine("üîç PerformExportWithUIUpdates - —ç–∫—Å–ø–æ—Ä—Ç –ù–ï –æ—Ç–º–µ–Ω–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç");
                    WriteDetailedLog("üîç PerformExportWithUIUpdates - —ç–∫—Å–ø–æ—Ä—Ç –ù–ï –æ—Ç–º–µ–Ω–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç");
                    // –°–ù–ê–ß–ê–õ–ê –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                    System.Diagnostics.Debug.WriteLine("üîç PerformExportWithUIUpdates - –í–´–ó–û–í progressWindow.CompleteExport()");
                    WriteDetailedLog("üîç PerformExportWithUIUpdates - –í–´–ó–û–í progressWindow.CompleteExport()");
                    progressWindow.CompleteExport();
                    System.Diagnostics.Debug.WriteLine("üîç PerformExportWithUIUpdates - progressWindow.CompleteExport() –í–´–ü–û–õ–ù–ï–ù");
                    WriteDetailedLog("üîç PerformExportWithUIUpdates - progressWindow.CompleteExport() –í–´–ü–û–õ–ù–ï–ù");
                    
                    var resultMessage = $"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successCount} —Ñ–∞–π–ª–æ–≤";
                    if (errorCount > 0)
                    {
                        resultMessage += $"\n–û—à–∏–±–æ–∫: {errorCount}";
                        resultMessage += $"\n\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n{string.Join("\n", errorMessages.Take(5))}";
                        if (errorMessages.Count > 5)
                        {
                            resultMessage += $"\n... –∏ –µ—â–µ {errorMessages.Count - 5} –æ—à–∏–±–æ–∫";
                        }
                    }

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
                    System.Diagnostics.Debug.WriteLine("üîç PerformExportWithUIUpdates - –ü–û–ö–ê–ó MessageBox.Show");
                    WriteDetailedLog("üîç PerformExportWithUIUpdates - –ü–û–ö–ê–ó MessageBox.Show");
                    MessageBox.Show(resultMessage, "–†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞", MessageBoxButton.OK, 
                        errorCount > 0 ? MessageBoxImage.Warning : MessageBoxImage.Information);
                    System.Diagnostics.Debug.WriteLine("üîç PerformExportWithUIUpdates - MessageBox.Show –ó–ê–í–ï–†–®–ï–ù");
                    WriteDetailedLog("üîç PerformExportWithUIUpdates - MessageBox.Show –ó–ê–í–ï–†–®–ï–ù");

                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    System.Diagnostics.Debug.WriteLine("üîç PerformExportWithUIUpdates - –û–¢–ö–†–´–¢–ò–ï –ø–∞–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏");
                    WriteDetailedLog("üîç PerformExportWithUIUpdates - –û–¢–ö–†–´–¢–ò–ï –ø–∞–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏");
                    System.Diagnostics.Process.Start("explorer.exe", resultsPath);
                    System.Diagnostics.Debug.WriteLine("üîç PerformExportWithUIUpdates - –ø–∞–ø–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –û–¢–ö–†–´–¢–ê");
                    WriteDetailedLog("üîç PerformExportWithUIUpdates - –ø–∞–ø–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –û–¢–ö–†–´–¢–ê");
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("üîç PerformExportWithUIUpdates - —ç–∫—Å–ø–æ—Ä—Ç –û–¢–ú–ï–ù–ï–ù");
                    WriteDetailedLog("üîç PerformExportWithUIUpdates - —ç–∫—Å–ø–æ—Ä—Ç –û–¢–ú–ï–ù–ï–ù");
                }
            }
            catch (Exception ex)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
                System.Diagnostics.Debug.WriteLine($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ PerformExport: {ex.Message}");
                System.Diagnostics.Debug.WriteLine($"StackTrace: {ex.StackTrace}");
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
                progressWindow.CompleteExport();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É (–º—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
                MessageBox.Show($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{ex.Message}\n\nStackTrace:\n{ex.StackTrace}", 
                    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                
                throw; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –º–µ—Ç–æ–¥–µ
            }
        }

        private void UpdateProgressWithUI(ExportProgressWindow progressWindow, int processedModels, int totalModels, string currentModel, double currentModelProgress)
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progressWindow.UpdateProgress(processedModels, totalModels, currentModel, currentModelProgress);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
            UpdateUI();
        }

        private void UpdateUI()
        {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
            System.Windows.Forms.Application.DoEvents();
            
            // –¢–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Dispatcher –¥–ª—è WPF
            Dispatcher.BeginInvoke(new Action(() => { }), System.Windows.Threading.DispatcherPriority.Background);
        }

        private string FormatDuration(TimeSpan duration)
        {
            if (duration.TotalDays >= 1)
            {
                return $"{duration.Days}–¥ {duration.Hours}—á {duration.Minutes}–º {duration.Seconds}—Å";
            }
            else if (duration.TotalHours >= 1)
            {
                return $"{duration.Hours}—á {duration.Minutes}–º {duration.Seconds}—Å";
            }
            else if (duration.TotalMinutes >= 1)
            {
                return $"{duration.Minutes}–º {duration.Seconds}—Å";
            }
            else
            {
                return $"{duration.TotalSeconds:F1}—Å";
            }
        }

        private void PerformExport(List<string> rvtFiles, string modelsPath, string resultsPath, ExportProgressWindow progressWindow)
        {
            int successCount = 0;
            int errorCount = 0;
            var errorMessages = new List<string>();

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if (rvtFiles == null || rvtFiles.Count == 0)
                {
                    throw new ArgumentException("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—É—Å—Ç");
                }

                if (progressWindow == null)
                {
                    throw new ArgumentNullException(nameof(progressWindow), "–û–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                }

                if (!Directory.Exists(modelsPath))
                {
                    throw new DirectoryNotFoundException($"–ü–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {modelsPath}");
                }

                if (!Directory.Exists(resultsPath))
                {
                    throw new DirectoryNotFoundException($"–ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {resultsPath}");
                }

                for (int i = 0; i < rvtFiles.Count; i++)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è
                    if (progressWindow.IsCancelled)
                    {
                        break;
                    }

                    var rvtFile = rvtFiles[i];
                    var fileName = Path.GetFileName(rvtFile);

                    try
                    {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        progressWindow.UpdateProgress(i, rvtFiles.Count, fileName, 0);

                    // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏ –∫ .rvt —Ñ–∞–π–ª—É
                    var relativePath = GetRelativePath(modelsPath, rvtFile);
                    var outputFileName = relativePath.Replace("\\", "_").Replace("/", "_").Replace(".rvt", ".csv");
                    var outputFile = Path.Combine(resultsPath, outputFileName);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    progressWindow.UpdateProgress(i, rvtFiles.Count, fileName, 10);

                    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .rvt —Ñ–∞–π–ª–∞
                    ExportRvtFileData(rvtFile, outputFile, progressWindow, i, rvtFiles.Count);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    progressWindow.UpdateProgress(i + 1, rvtFiles.Count, fileName, 100);

                    successCount++;
                }
                catch (Exception ex)
                {
                    errorCount++;
                    errorMessages.Add($"–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {fileName}: {ex.Message}");
                    progressWindow.UpdateProgress(i + 1, rvtFiles.Count, fileName, 100);
                }
            }

                // –ï—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (!progressWindow.IsCancelled)
                {
                    var resultMessage = $"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successCount} —Ñ–∞–π–ª–æ–≤";
                    if (errorCount > 0)
                    {
                        resultMessage += $"\n–û—à–∏–±–æ–∫: {errorCount}";
                        resultMessage += $"\n\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n{string.Join("\n", errorMessages.Take(5))}";
                        if (errorMessages.Count > 5)
                        {
                            resultMessage += $"\n... –∏ –µ—â–µ {errorMessages.Count - 5} –æ—à–∏–±–æ–∫";
                        }
                    }

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
                    MessageBox.Show(resultMessage, "–†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞", MessageBoxButton.OK, 
                        errorCount > 0 ? MessageBoxImage.Warning : MessageBoxImage.Information);

                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    System.Diagnostics.Process.Start("explorer.exe", resultsPath);
                }
            }
            catch (Exception ex)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
                System.Diagnostics.Debug.WriteLine($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ PerformExport: {ex.Message}");
                System.Diagnostics.Debug.WriteLine($"StackTrace: {ex.StackTrace}");
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
                progressWindow.CompleteExport();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É (–º—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
                MessageBox.Show($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{ex.Message}\n\nStackTrace:\n{ex.StackTrace}", 
                    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                
                throw; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –º–µ—Ç–æ–¥–µ
            }
        }

        private List<string> GetAllRvtFiles(string directory)
        {
            var rvtFiles = new List<string>();
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ .rvt —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
            rvtFiles.AddRange(Directory.GetFiles(directory, "*.rvt"));
            
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º .rvt —Ñ–∞–π–ª—ã –∏–∑ –ø–æ–¥–ø–∞–ø–æ–∫
            var subDirs = Directory.GetDirectories(directory);
            foreach (var subDir in subDirs)
            {
                rvtFiles.AddRange(GetAllRvtFiles(subDir));
            }
            
            return rvtFiles;
        }

        private string GetRelativePath(string basePath, string targetPath)
        {
            var baseUri = new Uri(basePath + "\\");
            var targetUri = new Uri(targetPath);
            var relativeUri = baseUri.MakeRelativeUri(targetUri);
            return Uri.UnescapeDataString(relativeUri.ToString());
        }

        private void ExportRvtFileData(string rvtFilePath, string outputFilePath, ExportProgressWindow progressWindow, int currentIndex, int totalFiles)
        {
            Document document = null;
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –≤ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
                if (progressWindow.IsCancelled)
                {
                    return;
                }
                
                var fileName = Path.GetFileName(rvtFilePath);
                
                // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞
                WriteToLogFile($"üîç –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞: {fileName}");
                WriteToLogFile($"üìÅ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {rvtFilePath}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if (!File.Exists(rvtFilePath))
                {
                    throw new FileNotFoundException($"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {rvtFilePath}");
                }

                var fileInfo = new FileInfo(rvtFilePath);
                WriteToLogFile($"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {fileInfo.Length} –±–∞–π—Ç");
                WriteToLogFile($"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {fileInfo.CreationTime}");
                WriteToLogFile($"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {fileInfo.LastWriteTime}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ RevitApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                if (_revitApp == null)
                {
                    throw new Exception("RevitApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–ª–∞–≥–∏–Ω –∑–∞–ø—É—â–µ–Ω –∏–∑ Revit.");
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if (fileInfo.Length == 0)
                {
                    throw new Exception($"–§–∞–π–ª –ø—É—Å—Ç: {rvtFilePath}");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ñ–∞–π–ª Revit
                if (!rvtFilePath.EndsWith(".rvt", StringComparison.OrdinalIgnoreCase))
                {
                    throw new Exception($"–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º Revit: {rvtFilePath}");
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                progressWindow.UpdateProgress(currentIndex, totalFiles, fileName, 20);
                UpdateUI();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                try
                {
                    using (var fileStream = File.Open(rvtFilePath, FileMode.Open, FileAccess.Read, FileShare.Read))
                    {
                        // –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è
                    }
                }
                catch (Exception fileEx)
                {
                    throw new Exception($"–§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {fileEx.Message}");
                }
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç Revit
                try
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ RevitApp –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
                    if (_revitApp.Documents == null)
                    {
                        throw new Exception("RevitApp –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏");
                    }

                    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
                    document = _revitApp.OpenDocumentFile(rvtFilePath);
                }
                catch (Exception openEx)
                {
                    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
                    var errorDetails = new List<string>();
                    errorDetails.Add($"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: {openEx.Message}");
                    errorDetails.Add($"–¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {openEx.GetType().Name}");
                    
                    if (openEx.InnerException != null)
                    {
                        errorDetails.Add($"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {openEx.InnerException.Message}");
                    }
                    
                    errorDetails.Add($"–§–∞–π–ª: {rvtFilePath}");
                    errorDetails.Add($"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {fileInfo.Length} –±–∞–π—Ç");
                    
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                    WriteToLogFile("‚ö†Ô∏è –ü–†–û–ü–£–°–ö–ê–ï–ú –ü–†–û–ë–õ–ï–ú–ù–´–ô –§–ê–ô–õ");
                    return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞—è —ç—Ç–æ—Ç —Ñ–∞–π–ª
                }
                
                if (document == null)
                {
                    throw new Exception($"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç Revit. –§–∞–π–ª: {rvtFilePath}, –†–∞–∑–º–µ—Ä: {fileInfo.Length} –±–∞–π—Ç");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
                if (progressWindow.IsCancelled)
                {
                    SafeCloseDocument(document, rvtFilePath);
                    WriteDetailedLog("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç (–æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞)");
                    return;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                progressWindow.UpdateProgress(currentIndex, totalFiles, fileName, 50);
                UpdateUI();

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                var dataReader = new Services.RevitDataReader();
                var modelName = Path.GetFileNameWithoutExtension(rvtFilePath);
                var elementsData = dataReader.ExtractElementsFromDocument(document, modelName, null, () => progressWindow.IsCancelled);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã
                if (elementsData == null || elementsData.Count == 0)
                {
                    throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ–∫—É–º–µ–Ω—Ç –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º –≤ CSV
                if (progressWindow.IsCancelled)
                {
                    SafeCloseDocument(document, rvtFilePath);
                    WriteDetailedLog("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç (–æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–µ—Ä–µ–¥ CSV)");
                    return;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV
                progressWindow.UpdateProgress(currentIndex, totalFiles, fileName, 80);
                UpdateUI();

                // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
                var exporter = new Services.RevitExporter();
                var csvContent = exporter.ExportToCsv(elementsData, modelName);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CSV —Å–æ–∑–¥–∞–Ω
                if (string.IsNullOrEmpty(csvContent))
                {
                    throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å CSV –∫–æ–Ω—Ç–µ–Ω—Ç.");
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                File.WriteAllText(outputFilePath, csvContent, System.Text.Encoding.UTF8);

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                progressWindow.UpdateProgress(currentIndex, totalFiles, fileName, 95);
                UpdateUI();

                WriteDetailedLog("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                var fileName = Path.GetFileName(rvtFilePath);
                WriteToLogFile($"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞ {fileName}: {ex.Message}");
                
                // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
                var errorContent = CreateDetailedErrorReport(ex, rvtFilePath, "–≠–∫—Å–ø–æ—Ä—Ç –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤");
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π
                File.WriteAllText(outputFilePath, errorContent, System.Text.Encoding.UTF8);
                
                // –ù–ï –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
                WriteToLogFile($"‚ö†Ô∏è –§–∞–π–ª {fileName} –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏");
            }
            finally
            {
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–ª–æ–∫–µ finally
                SafeCloseDocument(document, rvtFilePath);
            }
        }

        private void ExportRvtFileDataWithFilters(string rvtFilePath, string outputFilePath, List<string> selectedCategories, ExportProgressWindow progressWindow, int currentIndex, int totalFiles)
        {
            Document document = null;
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –≤ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
                if (progressWindow.IsCancelled)
                {
                    return;
                }
                
                var fileName = Path.GetFileName(rvtFilePath);
                
                WriteToLogFile($"–≠–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {fileName}");
                WriteToLogFile($"–í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {selectedCategories.Count}");
                
                // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
                WriteDetailedLog($"\n=== –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–ê {currentIndex + 1} –∏–∑ {totalFiles} ===");
                WriteDetailedLog($"–§–∞–π–ª: {fileName}");
                WriteDetailedLog($"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {rvtFilePath}");
                WriteDetailedLog($"–í—ã—Ö–æ–¥–Ω–æ–π CSV: {outputFilePath}");
                WriteDetailedLog($"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {DateTime.Now:yyyy-MM-dd HH:mm:ss.fff}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ RevitApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                if (_revitApp == null)
                {
                    throw new Exception("RevitApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–ª–∞–≥–∏–Ω –∑–∞–ø—É—â–µ–Ω –∏–∑ Revit.");
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if (!File.Exists(rvtFilePath))
                {
                    throw new Exception($"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {rvtFilePath}");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                var fileInfo = new FileInfo(rvtFilePath);
                if (fileInfo.Length == 0)
                {
                    throw new Exception($"–§–∞–π–ª –ø—É—Å—Ç: {rvtFilePath}");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ñ–∞–π–ª Revit
                if (!rvtFilePath.EndsWith(".rvt", StringComparison.OrdinalIgnoreCase))
                {
                    throw new Exception($"–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º Revit: {rvtFilePath}");
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                progressWindow.UpdateProgress(currentIndex, totalFiles, fileName, 20);
                UpdateUI();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                try
                {
                    using (var fileStream = File.Open(rvtFilePath, FileMode.Open, FileAccess.Read, FileShare.Read))
                    {
                        // –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è
                    }
                }
                catch (Exception fileEx)
                {
                    throw new Exception($"–§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {fileEx.Message}");
                }
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç Revit
                try
                {
                    WriteToLogFile($"=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–¢–ö–†–´–¢–ò–Ø –§–ê–ô–õ–ê ===");
                    WriteToLogFile($"–§–∞–π–ª: {rvtFilePath}");
                    WriteToLogFile($"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {fileInfo.Length} –±–∞–π—Ç");
                    WriteToLogFile($"–í–µ—Ä—Å–∏—è Revit: {_revitApp.VersionName}");
                    WriteToLogFile($"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {_revitApp.Documents?.Size ?? -1}");
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
                    WriteToLogFile($"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {fileInfo.CreationTime}");
                    WriteToLogFile($"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {fileInfo.LastWriteTime}");
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ RevitApp –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
                    if (_revitApp.Documents == null)
                    {
                        WriteToLogFile("‚ùå RevitApp.Documents == null");
                        throw new Exception("RevitApp –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏");
                    }
                    
                    WriteToLogFile("‚úì RevitApp.Documents –¥–æ—Å—Ç—É–ø–µ–Ω");
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
                    var openDocs = _revitApp.Documents.Cast<Autodesk.Revit.DB.Document>();
                    var alreadyOpen = openDocs.FirstOrDefault(d => d.PathName.Equals(rvtFilePath, StringComparison.OrdinalIgnoreCase));
                    if (alreadyOpen != null)
                    {
                        WriteToLogFile($"‚ö†Ô∏è –§–∞–π–ª —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –≤ Revit: {alreadyOpen.Title}");
                        document = alreadyOpen;
                    }
                    else
                    {
                        WriteToLogFile("–§–∞–π–ª –Ω–µ –æ—Ç–∫—Ä—ã—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å...");
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)
                        WriteToLogFile("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É...");
                        try
                        {
                            using (var fileStream = System.IO.File.Open(rvtFilePath, System.IO.FileMode.Open, System.IO.FileAccess.Read))
                            {
                                WriteToLogFile("‚úì –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è");
                            }
                        }
                        catch (Exception accessEx)
                        {
                            WriteToLogFile($"‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è: {accessEx.Message}");
                            WriteToLogFile("‚ö†Ô∏è –ü–†–û–ü–£–°–ö–ê–ï–ú –ü–†–û–ë–õ–ï–ú–ù–´–ô –§–ê–ô–õ");
                            return;
                        }
                        
                        // –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                        WriteToLogFile("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é...");
                        
                        try
                        {
                            // –°–ø–æ—Å–æ–± 1: –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ)
                            WriteToLogFile("–°–ø–æ—Å–æ–± 1: –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ...");
                            document = _revitApp.OpenDocumentFile(rvtFilePath);
                            
                            if (document != null)
                            {
                                WriteToLogFile($"‚úì –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º: {document.Title}");
                                WriteDetailedLog($"‚úì –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º");
                                WriteDetailedLog($"  –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document.Title}");
                                WriteDetailedLog($"  –ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É: {document.PathName}");
                                WriteDetailedLog($"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Revit: {_revitApp.Documents.Size}");
                            }
                            else
                            {
                                throw new Exception("OpenDocumentFile –≤–µ—Ä–Ω—É–ª null");
                            }
                        }
                        catch (Exception simpleEx)
                        {
                            WriteToLogFile($"‚ùå –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {simpleEx.Message}");
                            
                            try
                            {
                                // –°–ø–æ—Å–æ–± 2: –° OpenOptions
                                WriteToLogFile("–°–ø–æ—Å–æ–± 2: –° OpenOptions...");
                                var openOptions = new Autodesk.Revit.DB.OpenOptions();
                                openOptions.Audit = false;
                                openOptions.AllowOpeningLocalByWrongUser = true;
                                
                                var modelPath = Autodesk.Revit.DB.ModelPathUtils.ConvertUserVisiblePathToModelPath(rvtFilePath);
                                document = _revitApp.OpenDocumentFile(modelPath, openOptions);
                                
                                if (document != null)
                                {
                                    WriteToLogFile($"‚úì –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç —Å OpenOptions: {document.Title}");
                                }
                                else
                                {
                                    throw new Exception("OpenDocumentFile —Å OpenOptions –≤–µ—Ä–Ω—É–ª null");
                                }
                            }
                            catch (Exception optionsEx)
                            {
                                WriteToLogFile($"‚ùå –°–ø–æ—Å–æ–± —Å OpenOptions –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {optionsEx.Message}");
                                
                                try
                                {
                                // –°–ø–æ—Å–æ–± 3: –° DoNotDetach (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ)
                                WriteToLogFile("–°–ø–æ—Å–æ–± 3: –° DoNotDetach (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ)...");
                                var openOptions = new Autodesk.Revit.DB.OpenOptions();
                                openOptions.DetachFromCentralOption = Autodesk.Revit.DB.DetachFromCentralOption.DoNotDetach;
                                openOptions.Audit = false;
                                    
                                    var modelPath = Autodesk.Revit.DB.ModelPathUtils.ConvertUserVisiblePathToModelPath(rvtFilePath);
                                    document = _revitApp.OpenDocumentFile(modelPath, openOptions);
                                    
                                    if (document != null)
                                    {
                                        WriteToLogFile($"‚úì –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç —Å DetachFromCentralOption: {document.Title}");
                                    }
                                    else
                                    {
                                        throw new Exception("OpenDocumentFile —Å DetachFromCentralOption –≤–µ—Ä–Ω—É–ª null");
                                    }
                                }
                                catch (Exception detachEx)
                                {
                                    WriteToLogFile($"‚ùå –°–ø–æ—Å–æ–± —Å DoNotDetach –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {detachEx.Message}");
                                    
                                    try
                                    {
                                        // –°–ø–æ—Å–æ–± 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)
                                        WriteToLogFile("–°–ø–æ—Å–æ–± 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...");
                                        WriteToLogFile($"–¢–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫: {System.Threading.Thread.CurrentThread.Name ?? "Unnamed"}");
                                        WriteToLogFile($"ID –ø–æ—Ç–æ–∫–∞: {System.Threading.Thread.CurrentThread.ManagedThreadId}");
                                        WriteToLogFile($"IsBackground: {System.Threading.Thread.CurrentThread.IsBackground}");
                                        
                                        // –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –≤ —Ç–æ–º –∂–µ –ø–æ—Ç–æ–∫–µ
                                        var openOptions = new Autodesk.Revit.DB.OpenOptions();
                                        openOptions.DetachFromCentralOption = Autodesk.Revit.DB.DetachFromCentralOption.DoNotDetach;
                                        openOptions.Audit = false;
                                        
                                        var modelPath = Autodesk.Revit.DB.ModelPathUtils.ConvertUserVisiblePathToModelPath(rvtFilePath);
                                        document = _revitApp.OpenDocumentFile(modelPath, openOptions);
                                        
                                        if (document != null)
                                        {
                                            WriteToLogFile($"‚úì –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {document.Title}");
                                        }
                                        else
                                        {
                                            throw new Exception("–û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–µ—Ä–Ω—É–ª–æ null");
                                        }
                                    }
                                    catch (Exception exactEx)
                                    {
                                        WriteToLogFile($"‚ùå –°–ø–æ—Å–æ–± —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {exactEx.Message}");
                                        
                                        try
                                        {
                                            // –°–ø–æ—Å–æ–± 5: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã IsBackground: True)
                                            WriteToLogFile("–°–ø–æ—Å–æ–± 5: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ Dispatcher...");
                                            
                                            Autodesk.Revit.DB.Document mainThreadDocument = null;
                                            Exception mainThreadException = null;
                                            
                                            // –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ UI
                                            this.Dispatcher.Invoke(() =>
                                            {
                                                try
                                                {
                                                    WriteToLogFile("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ UI...");
                                                    var openOptions = new Autodesk.Revit.DB.OpenOptions();
                                                    openOptions.DetachFromCentralOption = Autodesk.Revit.DB.DetachFromCentralOption.DoNotDetach;
                                                    openOptions.Audit = false;
                                                    
                                                    var modelPath = Autodesk.Revit.DB.ModelPathUtils.ConvertUserVisiblePathToModelPath(rvtFilePath);
                                                    mainThreadDocument = _revitApp.OpenDocumentFile(modelPath, openOptions);
                                                    
                                                    if (mainThreadDocument != null)
                                                    {
                                                        WriteToLogFile($"‚úì –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ: {mainThreadDocument.Title}");
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    mainThreadException = ex;
                                                    WriteToLogFile($"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ: {ex.Message}");
                                                }
                                            });
                                            
                                            if (mainThreadDocument != null)
                                            {
                                                document = mainThreadDocument;
                                                WriteToLogFile($"‚úì –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ: {document.Title}");
                                            }
                                            else if (mainThreadException != null)
                                            {
                                                throw mainThreadException;
                                            }
                                            else
                                            {
                                                throw new Exception("–û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –≤–µ—Ä–Ω—É–ª–æ null");
                                            }
                                        }
                                        catch (Exception mainThreadEx)
                                        {
                                            WriteToLogFile($"‚ùå –í—Å–µ —Å–ø–æ—Å–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏:");
                                            WriteToLogFile($"  –ü—Ä–æ—Å—Ç–æ–π: {simpleEx.Message}");
                                            WriteToLogFile($"  OpenOptions: {optionsEx.Message}");
                                            WriteToLogFile($"  DoNotDetach: {detachEx.Message}");
                                            WriteToLogFile($"  –ö–æ–Ω—Ç–µ–∫—Å—Ç: {exactEx.Message}");
                                            WriteToLogFile($"  –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫: {mainThreadEx.Message}");
                                            WriteToLogFile("‚ö†Ô∏è –ü–†–û–ü–£–°–ö–ê–ï–ú –ü–†–û–ë–õ–ï–ú–ù–´–ô –§–ê–ô–õ");
                                            return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞—è —ç—Ç–æ—Ç —Ñ–∞–π–ª
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception openEx)
                {
                    WriteToLogFile($"‚ùå –û–®–ò–ë–ö–ê –û–¢–ö–†–´–¢–ò–Ø –§–ê–ô–õ–ê:");
                    WriteToLogFile($"  –°–æ–æ–±—â–µ–Ω–∏–µ: {openEx.Message}");
                    WriteToLogFile($"  –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {openEx.GetType().Name}");
                    WriteToLogFile($"  StackTrace: {openEx.StackTrace}");
                    
                    if (openEx.InnerException != null)
                    {
                        WriteToLogFile($"  –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {openEx.InnerException.Message}");
                        WriteToLogFile($"  –¢–∏–ø –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏: {openEx.InnerException.GetType().Name}");
                    }
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    WriteToLogFile($"=== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===");
                    WriteToLogFile($"RevitApp == null: {_revitApp == null}");
                    WriteToLogFile($"RevitApp.Documents == null: {_revitApp?.Documents == null}");
                    WriteToLogFile($"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {File.Exists(rvtFilePath)}");
                    WriteToLogFile($"–§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è: {CanReadFile(rvtFilePath)}");
                    
                    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
                    var errorDetails = new List<string>();
                    errorDetails.Add($"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: {openEx.Message}");
                    errorDetails.Add($"–¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {openEx.GetType().Name}");
                    
                    if (openEx.InnerException != null)
                    {
                        errorDetails.Add($"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {openEx.InnerException.Message}");
                    }
                    
                    errorDetails.Add($"–§–∞–π–ª: {rvtFilePath}");
                    errorDetails.Add($"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {fileInfo.Length} –±–∞–π—Ç");
                    
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                    WriteToLogFile("‚ö†Ô∏è –ü–†–û–ü–£–°–ö–ê–ï–ú –ü–†–û–ë–õ–ï–ú–ù–´–ô –§–ê–ô–õ");
                    return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞—è —ç—Ç–æ—Ç —Ñ–∞–π–ª
                }
                
                if (document == null)
                {
                    throw new Exception($"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç Revit. –§–∞–π–ª: {rvtFilePath}, –†–∞–∑–º–µ—Ä: {fileInfo.Length} –±–∞–π—Ç");
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                progressWindow.UpdateProgress(currentIndex, totalFiles, fileName, 50);
                UpdateUI();

               // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —É—Ä–æ–≤–Ω–µ Revit API
               WriteDetailedLog("üîß –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —É—Ä–æ–≤–Ω–µ Revit API...");
               var categoryFilter = CreateCategoryFilter(selectedCategories);
               
               // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
               var nonFilterableCategories = selectedCategories.Where(cat => IsNonFilterableCategory(cat)).ToList();
               
               // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –° —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ —É—Ä–æ–≤–Ω–µ API
               WriteDetailedLog("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ —É—Ä–æ–≤–Ω–µ API...");
               var dataReader = new Services.RevitDataReader();
               var modelName = Path.GetFileNameWithoutExtension(rvtFilePath);
               var elementsData = dataReader.ExtractElementsFromDocumentWithFilter(document, modelName, categoryFilter, null, () => progressWindow.IsCancelled, WriteDetailedLog, nonFilterableCategories);
               
               WriteToLogFile($"–ò–∑–≤–ª–µ—á–µ–Ω–æ {elementsData.Count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ —É—Ä–æ–≤–Ω–µ API");
               WriteDetailedLog($"üìä –ö–û–õ–ò–ß–ï–°–¢–í–û –≠–õ–ï–ú–ï–ù–¢–û–í –ü–û–°–õ–ï API –§–ò–õ–¨–¢–†–ê–¶–ò–ò: {elementsData.Count}");

                WriteToLogFile($"–ò–∑–≤–ª–µ—á–µ–Ω–æ {elementsData.Count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã
                if (elementsData == null || elementsData.Count == 0)
                {
                    WriteToLogFile("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º");
                    // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π CSV —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
                    var emptyCsvContent = $"ModelName,ElementId,Category,ParameterName,ParameterValue\n" +
                                        $"\"{modelName}\",\"N/A\",\"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è\",\"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\",\"{string.Join("; ", selectedCategories)}\"\n" +
                                        $"\"{modelName}\",\"N/A\",\"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è\",\"–†–µ–∑—É–ª—å—Ç–∞—Ç\",\"–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\"\n";
                    File.WriteAllText(outputFilePath, emptyCsvContent, System.Text.Encoding.UTF8);
                    WriteToLogFile($"–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π CSV —Ñ–∞–π–ª: {outputFilePath}");
                    return;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV
                progressWindow.UpdateProgress(currentIndex, totalFiles, fileName, 80);
                UpdateUI();

                // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
                var exporter = new Services.RevitExporter();
                var csvContent = exporter.ExportToCsv(elementsData, modelName);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CSV —Å–æ–∑–¥–∞–Ω
                if (string.IsNullOrEmpty(csvContent))
                {
                    throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å CSV –∫–æ–Ω—Ç–µ–Ω—Ç.");
                }

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º CSV –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                var filteredCsvContent = csvContent;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                File.WriteAllText(outputFilePath, filteredCsvContent, System.Text.Encoding.UTF8);

                WriteToLogFile($"‚úì CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {outputFilePath}");

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                progressWindow.UpdateProgress(currentIndex, totalFiles, fileName, 95);
                UpdateUI();

                WriteDetailedLog("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                var fileName = Path.GetFileName(rvtFilePath);
                WriteToLogFile($"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞ {fileName}: {ex.Message}");
                
                // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
                var errorContent = CreateDetailedErrorReport(ex, rvtFilePath, "–≠–∫—Å–ø–æ—Ä—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏", selectedCategories);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π
                File.WriteAllText(outputFilePath, errorContent, System.Text.Encoding.UTF8);
                
                // –ù–ï –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
                WriteToLogFile($"‚ö†Ô∏è –§–∞–π–ª {fileName} –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏");
            }
            finally
            {
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–ª–æ–∫–µ finally
                SafeCloseDocument(document, rvtFilePath);
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        /// </summary>
        private string CreateDetailedErrorReport(Exception ex, string rvtFilePath, string exportType, List<string> selectedCategories = null)
        {
            var fileName = Path.GetFileName(rvtFilePath);
            var fileInfo = new FileInfo(rvtFilePath);
            var timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            
            var report = new StringBuilder();
            report.AppendLine("ModelName,ElementId,Category,ParameterName,ParameterValue");
            report.AppendLine($"\"{fileName}\",\"ERROR\",\"–°–∏—Å—Ç–µ–º–∞\",\"–¢–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞\",\"{exportType}\"");
            report.AppendLine($"\"{fileName}\",\"ERROR\",\"–°–∏—Å—Ç–µ–º–∞\",\"–í—Ä–µ–º—è –æ—à–∏–±–∫–∏\",\"{timestamp}\"");
            report.AppendLine($"\"{fileName}\",\"ERROR\",\"–°–∏—Å—Ç–µ–º–∞\",\"–§–∞–π–ª\",\"{rvtFilePath}\"");
            report.AppendLine($"\"{fileName}\",\"ERROR\",\"–°–∏—Å—Ç–µ–º–∞\",\"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞\",\"{fileInfo.Length} –±–∞–π—Ç\"");
            report.AppendLine($"\"{fileName}\",\"ERROR\",\"–°–∏—Å—Ç–µ–º–∞\",\"–¢–∏–ø –æ—à–∏–±–∫–∏\",\"{ex.GetType().Name}\"");
            report.AppendLine($"\"{fileName}\",\"ERROR\",\"–°–∏—Å—Ç–µ–º–∞\",\"–°–æ–æ–±—â–µ–Ω–∏–µ\",\"{ex.Message}\"");
            
            if (selectedCategories != null && selectedCategories.Count > 0)
            {
                report.AppendLine($"\"{fileName}\",\"ERROR\",\"–°–∏—Å—Ç–µ–º–∞\",\"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\",\"{string.Join("; ", selectedCategories)}\"");
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
            report.AppendLine($"\"{fileName}\",\"ERROR\",\"–°–∏—Å—Ç–µ–º–∞\",\"–í–µ—Ä—Å–∏—è Revit\",\"{_revitApp?.VersionName ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\"");
            report.AppendLine($"\"{fileName}\",\"ERROR\",\"–°–∏—Å—Ç–µ–º–∞\",\"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\",\"{_revitApp?.Documents?.Size ?? -1}\"");
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é
            if (ex.Message.Contains("InternalException"))
            {
                report.AppendLine($"\"{fileName}\",\"ERROR\",\"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è\",\"–ü—Ä–æ–±–ª–µ–º–∞\",\"–§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞–Ω –≤ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π –≤–µ—Ä—Å–∏–∏ Revit\"");
                report.AppendLine($"\"{fileName}\",\"ERROR\",\"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è\",\"–†–µ—à–µ–Ω–∏–µ\",\"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é –≤ Revit –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\"");
            }
            else if (ex.Message.Contains("–Ω–µ –Ω–∞–π–¥–µ–Ω"))
            {
                report.AppendLine($"\"{fileName}\",\"ERROR\",\"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è\",\"–ü—Ä–æ–±–ª–µ–º–∞\",\"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\"");
                report.AppendLine($"\"{fileName}\",\"ERROR\",\"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è\",\"–†–µ—à–µ–Ω–∏–µ\",\"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞\"");
            }
            else if (ex.Message.Contains("–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"))
            {
                report.AppendLine($"\"{fileName}\",\"ERROR\",\"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è\",\"–ü—Ä–æ–±–ª–µ–º–∞\",\"–§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º\"");
                report.AppendLine($"\"{fileName}\",\"ERROR\",\"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è\",\"–†–µ—à–µ–Ω–∏–µ\",\"–ó–∞–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Revit –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\"");
            }
            else
            {
                report.AppendLine($"\"{fileName}\",\"ERROR\",\"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è\",\"–ü—Ä–æ–±–ª–µ–º–∞\",\"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞\"");
                report.AppendLine($"\"{fileName}\",\"ERROR\",\"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è\",\"–†–µ—à–µ–Ω–∏–µ\",\"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É —Å —ç—Ç–∏–º –æ—Ç—á–µ—Ç–æ–º\"");
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º StackTrace (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫)
            var stackTrace = ex.StackTrace?.Split('\n').Take(5).ToArray() ?? new string[0];
            for (int i = 0; i < stackTrace.Length; i++)
            {
                report.AppendLine($"\"{fileName}\",\"ERROR\",\"StackTrace\",\"–°—Ç—Ä–æ–∫–∞ {i + 1}\",\"{stackTrace[i].Trim()}\"");
            }
            
            return report.ToString();
        }

        #region Authentication Methods

        private async void CheckAuthentication()
        {
            try
            {
                var token = _authService.GetStoredToken();
                
                if (!string.IsNullOrEmpty(token))
                {
                    var isValid = await _authService.ValidateTokenAsync(token);
                    if (isValid)
                    {
                        _currentUser = await _authService.GetUserInfoAsync(token);
                        ShowMainScreen();
                        return;
                    }
                    else
                    {
                        _authService.ClearToken();
                    }
                }
                
                ShowAuthScreen();
            }
            catch (Exception ex)
            {
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                ShowAuthScreen();
            }
        }

        private void ShowAuthScreen()
        {
            AuthScreen.Visibility = Visibility.Visible;
            MainScreen.Visibility = Visibility.Collapsed;
        }

        private void ShowMainScreen()
        {
            AuthScreen.Visibility = Visibility.Collapsed;
            MainScreen.Visibility = Visibility.Visible;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
            LoadProjects();
            ShowProjectsScreen();
        }

        private void LoginTabButton_Click(object sender, RoutedEventArgs e)
        {
            SwitchToLoginTab();
        }

        private void RegisterTabButton_Click(object sender, RoutedEventArgs e)
        {
            SwitchToRegisterTab();
        }

        private void SwitchToLoginTab()
        {
            LoginForm.Visibility = Visibility.Visible;
            RegisterForm.Visibility = Visibility.Collapsed;
            
            LoginTabButton.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#14b8a6"));
            LoginTabButton.BorderThickness = new Thickness(0, 0, 0, 2);
            LoginTabButton.BorderBrush = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#14b8a6"));
            
            RegisterTabButton.Foreground = new SolidColorBrush(Colors.White);
            RegisterTabButton.BorderThickness = new Thickness(0);
            
            HideMessages();
        }

        private void SwitchToRegisterTab()
        {
            LoginForm.Visibility = Visibility.Collapsed;
            RegisterForm.Visibility = Visibility.Visible;
            
            RegisterTabButton.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#14b8a6"));
            RegisterTabButton.BorderThickness = new Thickness(0, 0, 0, 2);
            RegisterTabButton.BorderBrush = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#14b8a6"));
            
            LoginTabButton.Foreground = new SolidColorBrush(Colors.White);
            LoginTabButton.BorderThickness = new Thickness(0);
            
            HideMessages();
        }

        private async void LoginButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                HideMessages();
                
                var email = LoginEmail.Text.Trim();
                var password = LoginPassword.Password;
                
                if (string.IsNullOrEmpty(email) || string.IsNullOrEmpty(password))
                {
                    ShowError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
                    return;
                }
                
                LoginButton.Content = "–í—Ö–æ–¥...";
                LoginButton.IsEnabled = false;
                
                var result = await _authService.LoginAsync(email, password);
                
                if (result.Success)
                {
                    _authService.SaveToken(result.Token);
                    _currentUser = result.User;
                    
                    ShowSuccess("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É...");
                    await Task.Delay(1500);
                    
                    ShowMainScreen();
                }
                else
                {
                    string errorMessage = result.ErrorMessage ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                    ShowError($"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {errorMessage}");
                }
            }
            catch (Exception ex)
            {
                ShowError($"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {ex.Message}\n\n–î–µ—Ç–∞–ª–∏:\n{ex.StackTrace}");
            }
            finally
            {
                LoginButton.Content = "–í–æ–π—Ç–∏";
                LoginButton.IsEnabled = true;
            }
        }

        private async void RegisterButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                HideMessages();
                
                var userType = (RegisterUserType.SelectedItem as ComboBoxItem)?.Tag?.ToString();
                var name = RegisterUserName.Text.Trim();
                var login = RegisterLogin.Text.Trim();
                var email = RegisterEmail.Text.Trim();
                var password = RegisterPassword.Password;
                var passwordConfirm = RegisterPasswordConfirm.Password;
                
                if (string.IsNullOrEmpty(userType) || userType == "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø")
                {
                    ShowError("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                    return;
                }
                
                if (string.IsNullOrEmpty(name) || string.IsNullOrEmpty(login) || 
                    string.IsNullOrEmpty(email) || string.IsNullOrEmpty(password))
                {
                    ShowError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
                    return;
                }
                
                if (password != passwordConfirm)
                {
                    ShowError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
                    return;
                }
                
                RegisterButton.Content = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...";
                RegisterButton.IsEnabled = false;
                
                var result = await _authService.RegisterAsync(login, email, password);
                
                if (result.Success)
                {
                    _authService.SaveToken(result.Token);
                    _currentUser = result.User;
                    
                    ShowSuccess("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É...");
                    await Task.Delay(1500);
                    
                    ShowMainScreen();
                }
                else
                {
                    string errorMessage = result.ErrorMessage ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                    ShowError($"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {errorMessage}");
                }
            }
            catch (Exception ex)
            {
                ShowError($"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {ex.Message}\n\n–î–µ—Ç–∞–ª–∏:\n{ex.StackTrace}");
            }
            finally
            {
                RegisterButton.Content = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è";
                RegisterButton.IsEnabled = true;
            }
        }

        private void ShowError(string message)
        {
            ErrorMessageText.Text = message;
            ErrorMessage.Visibility = Visibility.Visible;
            SuccessMessage.Visibility = Visibility.Collapsed;
        }

        private void ShowSuccess(string message)
        {
            SuccessMessageText.Text = message;
            SuccessMessage.Visibility = Visibility.Visible;
            ErrorMessage.Visibility = Visibility.Collapsed;
        }

        private void HideMessages()
        {
            ErrorMessage.Visibility = Visibility.Collapsed;
            SuccessMessage.Visibility = Visibility.Collapsed;
        }

        public void Logout()
        {
            _authService.ClearToken();
            _currentUser = null;
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            LoginEmail.Text = "";
            LoginPassword.Password = "";
            RegisterUserType.SelectedIndex = 0;
            RegisterUserName.Text = "";
            RegisterLogin.Text = "";
            RegisterEmail.Text = "";
            RegisterPassword.Password = "";
            RegisterPasswordConfirm.Password = "";
            
            ShowAuthScreen();
        }

        #endregion

        #region User Profile Methods

        private async void LoadUserInfo(StackPanel parentPanel)
        {
            try
            {
                if (_authService == null)
                {
                    var errorText = new TextBlock
                    {
                        Text = "–û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                        Foreground = new SolidColorBrush(Colors.Red),
                        FontSize = 14,
                        Margin = new Thickness(0, 20, 0, 0)
                    };
                    parentPanel.Children.Add(errorText);
                    return;
                }

                var token = _authService.GetStoredToken();
                if (string.IsNullOrEmpty(token))
                {
                    var errorText = new TextBlock
                    {
                        Text = "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                        Foreground = new SolidColorBrush(Colors.Red),
                        FontSize = 14,
                        Margin = new Thickness(0, 20, 0, 0)
                    };
                    parentPanel.Children.Add(errorText);
                    return;
                }

                var userInfo = await _authService.GetUserInfoAsync(token);
                if (userInfo == null)
                {
                    var errorText = new TextBlock
                    {
                        Text = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
                        Foreground = new SolidColorBrush(Colors.Red),
                        FontSize = 14,
                        Margin = new Thickness(0, 20, 0, 0)
                    };
                    parentPanel.Children.Add(errorText);
                    return;
                }

                // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                var infoPanel = new StackPanel
                {
                    Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                    Margin = new Thickness(20, 20, 20, 0)
                };

                // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                AddInfoField(infoPanel, "–ò–º—è:", userInfo.Name ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ");
                
                // –õ–æ–≥–∏–Ω
                AddInfoField(infoPanel, "–õ–æ–≥–∏–Ω:", userInfo.Login ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ");
                
                // Email
                AddInfoField(infoPanel, "Email:", userInfo.Email ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ");
                
                // –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                var userTypeText = userInfo.UserType == "user" ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" : "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è";
                AddInfoField(infoPanel, "–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userTypeText);
                
                // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if (!string.IsNullOrEmpty(userInfo.CompanyName))
                {
                    AddInfoField(infoPanel, "–ö–æ–º–ø–∞–Ω–∏—è:", userInfo.CompanyName);
                }
                
                // –¢–µ–ª–µ—Ñ–æ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if (!string.IsNullOrEmpty(userInfo.Phone))
                {
                    AddInfoField(infoPanel, "–¢–µ–ª–µ—Ñ–æ–Ω:", userInfo.Phone);
                }
                
                // –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                if (userInfo.CreatedAt != null)
                {
                    AddInfoField(infoPanel, "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", userInfo.CreatedAt);
                }

                parentPanel.Children.Add(infoPanel);
            }
            catch (Exception ex)
            {
                var errorText = new TextBlock
                {
                    Text = $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {ex.Message}",
                    Foreground = new SolidColorBrush(Colors.Red),
                    FontSize = 14,
                    Margin = new Thickness(0, 20, 0, 0)
                };
                parentPanel.Children.Add(errorText);
            }
        }

        private void AddInfoField(StackPanel parent, string label, string value)
        {
            var fieldPanel = new StackPanel { Margin = new Thickness(0, 0, 0, 15) };
            
            var labelText = new TextBlock
            {
                Text = label,
                FontSize = 12,
                FontWeight = FontWeights.SemiBold,
                Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125)),
                Margin = new Thickness(0, 0, 0, 5)
            };
            
            var valueText = new TextBlock
            {
                Text = value,
                FontSize = 14,
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            
            fieldPanel.Children.Add(labelText);
            fieldPanel.Children.Add(valueText);
            parent.Children.Add(fieldPanel);
        }

        private async void LoadUserProducts(StackPanel parentPanel)
        {
            try
            {
                if (_authService == null)
                {
                    var errorText = new TextBlock
                    {
                        Text = "–û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                        Foreground = new SolidColorBrush(Colors.Red),
                        FontSize = 14,
                        Margin = new Thickness(0, 20, 0, 0)
                    };
                    parentPanel.Children.Add(errorText);
                    return;
                }

                var token = _authService.GetStoredToken();
                if (string.IsNullOrEmpty(token))
                {
                    var errorText = new TextBlock
                    {
                        Text = "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                        Foreground = new SolidColorBrush(Colors.Red),
                        FontSize = 14,
                        Margin = new Thickness(0, 20, 0, 0)
                    };
                    parentPanel.Children.Add(errorText);
                    return;
                }

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
                var products = await GetUserProductsAsync(token);
                if (products == null || products.Count == 0)
                {
                    var noProductsText = new TextBlock
                    {
                        Text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏.",
                        Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125)),
                        FontSize = 14,
                        Margin = new Thickness(0, 20, 0, 0),
                        TextWrapping = TextWrapping.Wrap,
                        HorizontalAlignment = HorizontalAlignment.Center
                    };
                    parentPanel.Children.Add(noProductsText);
                    return;
                }

                // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                CreateProductsTable(parentPanel, products);
            }
            catch (Exception ex)
            {
                var errorText = new TextBlock
                {
                    Text = $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {ex.Message}",
                    Foreground = new SolidColorBrush(Colors.Red),
                    FontSize = 14,
                    Margin = new Thickness(0, 20, 0, 0)
                };
                parentPanel.Children.Add(errorText);
            }
        }

        private void LoadProfileEditForm(StackPanel parentPanel)
        {
            try
            {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
                var editText = new TextBlock
                {
                    Text = "–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏",
                    Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125)),
                    FontSize = 14,
                    Margin = new Thickness(0, 20, 0, 0),
                    TextWrapping = TextWrapping.Wrap
                };
                parentPanel.Children.Add(editText);
            }
            catch (Exception ex)
            {
                var errorText = new TextBlock
                {
                    Text = $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {ex.Message}",
                    Foreground = new SolidColorBrush(Colors.Red),
                    FontSize = 14,
                    Margin = new Thickness(0, 20, 0, 0)
                };
                parentPanel.Children.Add(errorText);
            }
        }

        private async Task<List<ProductInfo>> GetUserProductsAsync(string token)
        {
            try
            {
                using (var httpClient = new System.Net.Http.HttpClient())
                {
                    httpClient.DefaultRequestHeaders.Authorization = 
                        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                    var response = await httpClient.GetAsync("http://civilx.ru/auth-api.php/api/user-products");
                    var responseContent = await response.Content.ReadAsStringAsync();

                    if (response.IsSuccessStatusCode)
                    {
                        var result = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<UserProductsResponse>(responseContent);
                        return result.Products ?? new List<ProductInfo>();
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {ex.Message}");
            }
            
            return new List<ProductInfo>();
        }

        private void CreateProductsTable(StackPanel parentPanel, List<ProductInfo> products)
        {
            // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å —Ç–∞–±–ª–∏—Ü–µ–π
            var tablePanel = new StackPanel
            {
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                Margin = new Thickness(20, 20, 20, 0)
            };

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            var headerPanel = new Grid();
            headerPanel.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            headerPanel.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(100) });
            headerPanel.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(100) });
            headerPanel.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(120) });

            var headerProduct = new TextBlock
            {
                Text = "–ü—Ä–æ–¥—É–∫—Ç",
                FontWeight = FontWeights.Bold,
                FontSize = 14,
                Margin = new Thickness(10, 10, 10, 10),
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            Grid.SetColumn(headerProduct, 0);

            var headerStatus = new TextBlock
            {
                Text = "–°—Ç–∞—Ç—É—Å",
                FontWeight = FontWeights.Bold,
                FontSize = 14,
                Margin = new Thickness(10, 10, 10, 10),
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            Grid.SetColumn(headerStatus, 1);

            var headerExpires = new TextBlock
            {
                Text = "–ò—Å—Ç–µ–∫–∞–µ—Ç",
                FontWeight = FontWeights.Bold,
                FontSize = 14,
                Margin = new Thickness(10, 10, 10, 10),
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            Grid.SetColumn(headerExpires, 2);

            var headerAction = new TextBlock
            {
                Text = "–î–µ–π—Å—Ç–≤–∏–µ",
                FontWeight = FontWeights.Bold,
                FontSize = 14,
                Margin = new Thickness(10, 10, 10, 10),
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            Grid.SetColumn(headerAction, 3);

            headerPanel.Children.Add(headerProduct);
            headerPanel.Children.Add(headerStatus);
            headerPanel.Children.Add(headerExpires);
            headerPanel.Children.Add(headerAction);

            tablePanel.Children.Add(headerPanel);

            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            foreach (var product in products)
            {
                var rowPanel = new Grid();
                rowPanel.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
                rowPanel.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(100) });
                rowPanel.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(100) });
                rowPanel.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(120) });

                // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
                var productName = new TextBlock
                {
                    Text = GetProductDisplayName(product.ProductName),
                    FontSize = 14,
                    Margin = new Thickness(10, 10, 10, 10),
                    Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                };
                Grid.SetColumn(productName, 0);

                // –°—Ç–∞—Ç—É—Å
                var statusText = new TextBlock
                {
                    Text = GetStatusDisplayText(product.ActivationStatus),
                    FontSize = 12,
                    Margin = new Thickness(10, 10, 10, 10),
                    Foreground = new SolidColorBrush(GetStatusColor(product.ActivationStatus))
                };
                Grid.SetColumn(statusText, 1);

                // –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                var expiresText = new TextBlock
                {
                    Text = product.ExpiresAt?.ToString("dd.MM.yyyy") ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    FontSize = 12,
                    Margin = new Thickness(10, 10, 10, 10),
                    Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
                };
                Grid.SetColumn(expiresText, 2);

                // –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
                var actionButton = new Button
                {
                    Content = GetActionButtonText(product.ActivationStatus),
                    Height = 30,
                    FontSize = 12,
                    Margin = new Thickness(5, 5, 5, 5),
                    Background = new SolidColorBrush(GetActionButtonColor(product.ActivationStatus)),
                    Foreground = Brushes.White,
                    BorderThickness = new Thickness(0)
                };
                actionButton.Click += (s, e) => HandleProductAction(product);
                Grid.SetColumn(actionButton, 3);

                rowPanel.Children.Add(productName);
                rowPanel.Children.Add(statusText);
                rowPanel.Children.Add(expiresText);
                rowPanel.Children.Add(actionButton);

                tablePanel.Children.Add(rowPanel);
            }

            parentPanel.Children.Add(tablePanel);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            CreateSubscriptionStatusBlock(parentPanel);
        }

        private string GetProductDisplayName(string productName)
        {
            switch (productName?.ToLower())
            {
                case "dataviewer":
                    return "DataViewer";
                default:
                    return productName ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç";
            }
        }

        private string GetStatusDisplayText(string status)
        {
            switch (status?.ToLower())
            {
                case "activated":
                    return "–ê–∫—Ç–∏–≤–µ–Ω";
                case "pending":
                    return "–û–∂–∏–¥–∞–µ—Ç";
                case "ready":
                    return "–ì–æ—Ç–æ–≤";
                case "expired":
                    return "–ò—Å—Ç–µ–∫";
                default:
                    return status ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            }
        }

        private Color GetStatusColor(string status)
        {
            switch (status?.ToLower())
            {
                case "activated":
                    return Color.FromRgb(40, 167, 69); // –ó–µ–ª–µ–Ω—ã–π
                case "pending":
                    return Color.FromRgb(255, 193, 7); // –ñ–µ–ª—Ç—ã–π
                case "ready":
                    return Color.FromRgb(255, 193, 7); // –ñ–µ–ª—Ç—ã–π –¥–ª—è "–ì–æ—Ç–æ–≤"
                case "expired":
                    return Color.FromRgb(220, 53, 69); // –ö—Ä–∞—Å–Ω—ã–π
                default:
                    return Color.FromRgb(108, 117, 125); // –°–µ—Ä—ã–π
            }
        }

        private string GetActionButtonText(string status)
        {
            switch (status?.ToLower())
            {
                case "activated":
                    return "–û—Ç–º–µ–Ω–∏—Ç—å";
                case "pending":
                    return "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å";
                case "ready":
                    return "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å";
                case "expired":
                    return "–ü—Ä–æ–¥–ª–∏—Ç—å";
                default:
                    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            }
        }

        private Color GetActionButtonColor(string status)
        {
            switch (status?.ToLower())
            {
                case "activated":
                    return Color.FromRgb(220, 53, 69); // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
                case "pending":
                    return Color.FromRgb(0, 123, 255); // –°–∏–Ω–∏–π
                case "ready":
                    return Color.FromRgb(40, 167, 69); // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
                case "expired":
                    return Color.FromRgb(255, 193, 7); // –ñ–µ–ª—Ç—ã–π
                default:
                    return Color.FromRgb(108, 117, 125); // –°–µ—Ä—ã–π
            }
        }

        private async void HandleProductAction(ProductInfo product)
        {
            switch (product.ActivationStatus?.ToLower())
            {
                case "ready":
                    await ActivateProductAsync(product);
                    break;
                case "pending":
                    // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç
                    ActivateProduct(product);
                    break;
                case "expired":
                    // –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É - –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç
                    try
                    {
                        System.Diagnostics.Process.Start("http://civilx.ru");
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–∞–π—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                    break;
                case "activated":
                    await DeactivateProductAsync(product);
                    break;
            }
        }

        private async Task ActivateProductAsync(ProductInfo product)
        {
            try
            {
                System.Diagnostics.Debug.WriteLine($"ActivateProductAsync: Starting activation for product ID {product.Id}");
                
                var token = _authService.GetStoredToken();
                if (string.IsNullOrEmpty(token))
                {
                    System.Diagnostics.Debug.WriteLine("ActivateProductAsync: Token not found");
                    MessageBox.Show("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                System.Diagnostics.Debug.WriteLine($"ActivateProductAsync: Token found, making API request");

                using (var client = new System.Net.Http.HttpClient())
                {
                    client.DefaultRequestHeaders.Authorization = 
                        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                    
                    var requestData = new { product_id = product.Id };
                    var json = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(requestData);
                    var content = new System.Net.Http.StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    
                    System.Diagnostics.Debug.WriteLine($"ActivateProductAsync: Sending request to API with product_id: {product.Id}");
                    
                    var response = await client.PostAsync("http://civilx.ru/auth-api.php/api/activate-product", content);
                    var responseContent = await response.Content.ReadAsStringAsync();
                    
                    System.Diagnostics.Debug.WriteLine($"ActivateProductAsync: Response status: {response.StatusCode}");
                    System.Diagnostics.Debug.WriteLine($"ActivateProductAsync: Response content: {responseContent}");
                    
                    if (response.IsSuccessStatusCode)
                    {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ
                        product.ActivationStatus = "activated";
                        
                        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç –ª–æ–∫–∞–ª—å–Ω–æ
                        _activatedProduct = product;
                        SaveActivatedProduct();
                        // UpdateUserStatusIndicator(); // –£–±—Ä–∞–Ω–æ - –∫–Ω–æ–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
                        UpdateSubscriptionStatusBlock();
                        
                        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                        ShowUserProfileScreen();
                        
                        MessageBox.Show($"–ü—Ä–æ–¥—É–∫—Ç {GetProductDisplayName(product.ProductName)} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                    else
                    {
                        var errorResult = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<Dictionary<string, object>>(responseContent);
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {(errorResult.ContainsKey("error") ? errorResult["error"] : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async Task DeactivateProductAsync(ProductInfo product)
        {
            try
            {
                System.Diagnostics.Debug.WriteLine($"DeactivateProductAsync: Starting deactivation for product ID {product.Id}");
                
                var token = _authService.GetStoredToken();
                if (string.IsNullOrEmpty(token))
                {
                    System.Diagnostics.Debug.WriteLine("DeactivateProductAsync: Token not found");
                    MessageBox.Show("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                System.Diagnostics.Debug.WriteLine($"DeactivateProductAsync: Token found, making API request");

                using (var client = new System.Net.Http.HttpClient())
                {
                    client.DefaultRequestHeaders.Authorization = 
                        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                    
                    var requestData = new { product_id = product.Id };
                    var json = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(requestData);
                    var content = new System.Net.Http.StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    
                    System.Diagnostics.Debug.WriteLine($"DeactivateProductAsync: Sending request to API with product_id: {product.Id}");
                    
                    var response = await client.PostAsync("http://civilx.ru/auth-api.php/api/deactivate-product", content);
                    var responseContent = await response.Content.ReadAsStringAsync();
                    
                    System.Diagnostics.Debug.WriteLine($"DeactivateProductAsync: Response status: {response.StatusCode}");
                    System.Diagnostics.Debug.WriteLine($"DeactivateProductAsync: Response content: {responseContent}");
                    
                    if (response.IsSuccessStatusCode)
                    {
                        var result = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<Dictionary<string, object>>(responseContent);
                        var newStatus = result.ContainsKey("new_status") ? result["new_status"].ToString() : "ready";
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ
                        product.ActivationStatus = newStatus;
                        
                        // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç, –æ—á–∏—â–∞–µ–º –µ–≥–æ
                        if (_activatedProduct != null && _activatedProduct.Id == product.Id)
                        {
                            _activatedProduct = null;
                            SaveActivatedProduct();
                        }
                        
                        // UpdateUserStatusIndicator(); // –£–±—Ä–∞–Ω–æ - –∫–Ω–æ–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
                        UpdateSubscriptionStatusBlock();
                        
                        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                        ShowUserProfileScreen();
                        
                        MessageBox.Show($"–ü—Ä–æ–¥—É–∫—Ç {GetProductDisplayName(product.ProductName)} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω!", "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                    else
                    {
                        var errorResult = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<Dictionary<string, object>>(responseContent);
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {(errorResult.ContainsKey("error") ? errorResult["error"] : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async void ActivateProduct(ProductInfo product)
        {
            try
            {
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç –ª–æ–∫–∞–ª—å–Ω–æ
                _activatedProduct = product;
                SaveActivatedProduct();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ - —É–±—Ä–∞–Ω–æ
                // UpdateUserStatusIndicator();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                UpdateSubscriptionStatusBlock();
                
                MessageBox.Show($"–ü—Ä–æ–¥—É–∫—Ç {GetProductDisplayName(product.ProductName)} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–≥–∏–Ω–∞", "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        // –ú–µ—Ç–æ–¥—ã —É–±—Ä–∞–Ω—ã - –∫–Ω–æ–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
        // private async void UpdateUserStatusIndicator() { ... }
        // private void SetUserIcon(string icon, Color backgroundColor) { ... }

        private void CreateSubscriptionStatusBlock(StackPanel parentPanel)
        {
            // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            var statusBlock = new Border
            {
                Background = new SolidColorBrush(Color.FromRgb(248, 249, 250)),
                BorderThickness = new Thickness(2),
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                Margin = new Thickness(20, 20, 20, 0),
                CornerRadius = new CornerRadius(8)
            };

            var statusPanel = new StackPanel
            {
                Margin = new Thickness(20)
            };

            var statusTitle = new TextBlock
            {
                Text = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–ª–∞–≥–∏–Ω–∞",
                FontSize = 16,
                FontWeight = FontWeights.Bold,
                Margin = new Thickness(0, 0, 0, 15),
                Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
            };
            statusPanel.Children.Add(statusTitle);

            // –ë–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            var productBlock = new StackPanel
            {
                Name = "ActivatedProductBlock",
                Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                Margin = new Thickness(0, 0, 0, 10),
                MinHeight = 80
            };

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
            LoadActivatedProduct();
            UpdateSubscriptionStatusBlock();

            statusPanel.Children.Add(productBlock);
            statusBlock.Child = statusPanel;
            parentPanel.Children.Add(statusBlock);
        }

        private void UpdateSubscriptionStatusBlock()
        {
            var productBlock = FindName("ActivatedProductBlock") as StackPanel;
            if (productBlock == null) return;

            productBlock.Children.Clear();

            if (_activatedProduct == null)
            {
                // –ù–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                var emptyText = new TextBlock
                {
                    Text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞\n–ù–∞–∂–º–∏—Ç–µ '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—ã—à–µ",
                    FontSize = 14,
                    Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125)),
                    HorizontalAlignment = HorizontalAlignment.Center,
                    VerticalAlignment = VerticalAlignment.Center,
                    TextAlignment = TextAlignment.Center,
                    Margin = new Thickness(20)
                };
                productBlock.Children.Add(emptyText);
            }
            else
            {
                // –ï—Å—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
                var productInfo = new StackPanel
                {
                    Margin = new Thickness(20)
                };

                var productName = new TextBlock
                {
                    Text = $"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç: {GetProductDisplayName(_activatedProduct.ProductName)}",
                    FontSize = 16,
                    FontWeight = FontWeights.Bold,
                    Foreground = new SolidColorBrush(Color.FromRgb(40, 167, 69)),
                    Margin = new Thickness(0, 0, 0, 10)
                };

                var productStatus = new TextBlock
                {
                    Text = $"–°—Ç–∞—Ç—É—Å: {GetStatusDisplayText(_activatedProduct.ActivationStatus)}",
                    FontSize = 14,
                    Foreground = new SolidColorBrush(GetStatusColor(_activatedProduct.ActivationStatus)),
                    Margin = new Thickness(0, 0, 0, 5)
                };

                var productExpires = new TextBlock
                {
                    Text = $"–ò—Å—Ç–µ–∫–∞–µ—Ç: {_activatedProduct.ExpiresAt?.ToString("dd.MM.yyyy") ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}",
                    FontSize = 14,
                    Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125)),
                    Margin = new Thickness(0, 0, 0, 10)
                };

                var deactivateButton = new Button
                {
                    Content = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                    Height = 30,
                    Width = 120,
                    Background = new SolidColorBrush(Color.FromRgb(220, 53, 69)),
                    Foreground = Brushes.White,
                    BorderThickness = new Thickness(0),
                    FontSize = 12,
                    HorizontalAlignment = HorizontalAlignment.Left
                };
                deactivateButton.Click += (s, e) => DeactivateProduct();

                productInfo.Children.Add(productName);
                productInfo.Children.Add(productStatus);
                productInfo.Children.Add(productExpires);
                productInfo.Children.Add(deactivateButton);

                productBlock.Children.Add(productInfo);
            }
        }

        private void DeactivateProduct()
        {
            var result = MessageBox.Show("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç?", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (result == MessageBoxResult.Yes)
            {
                _activatedProduct = null;
                SaveActivatedProduct();
                // UpdateUserStatusIndicator(); // –£–±—Ä–∞–Ω–æ
                UpdateSubscriptionStatusBlock();
                MessageBox.Show("–ü—Ä–æ–¥—É–∫—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        private void SaveActivatedProduct()
        {
            try
            {
                var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                var civilXPath = Path.Combine(appDataPath, "CivilX", "DataViewer");
                Directory.CreateDirectory(civilXPath);
                var filePath = Path.Combine(civilXPath, "activated_product.json");

                if (_activatedProduct == null)
                {
                    if (File.Exists(filePath))
                    {
                        File.Delete(filePath);
                    }
                }
                else
                {
                    var json = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(_activatedProduct);
                    File.WriteAllText(filePath, json, System.Text.Encoding.UTF8);
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {ex.Message}");
            }
        }

        private void LoadActivatedProduct()
        {
            try
            {
                var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                var civilXPath = Path.Combine(appDataPath, "CivilX", "DataViewer");
                var filePath = Path.Combine(civilXPath, "activated_product.json");

                if (File.Exists(filePath))
                {
                    var json = File.ReadAllText(filePath, System.Text.Encoding.UTF8);
                    _activatedProduct = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<ProductInfo>(json);
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {ex.Message}");
                _activatedProduct = null;
            }
        }

        private void CheckPluginGroupSync()
        {
            try
            {
                var token = _authService.GetStoredToken();
                if (string.IsNullOrEmpty(token))
                {
                    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø–ª–∞–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    DisablePluginSync();
                    return;
                }

                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–ª–∞–≥–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
                // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –º–µ—Ç–æ–¥–µ
                EnablePlugin();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã –ø–ª–∞–≥–∏–Ω–∞: {ex.Message}");
                DisablePluginSync();
            }
        }

        private async void CheckPluginGroup()
        {
            try
            {
                var token = _authService.GetStoredToken();
                if (string.IsNullOrEmpty(token))
                {
                    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø–ª–∞–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    DisablePlugin();
                    return;
                }

                using (var client = new System.Net.Http.HttpClient())
                {
                    client.DefaultRequestHeaders.Authorization = 
                        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                    
                    var requestData = new { plugin_group = PLUGIN_GROUP };
                    var json = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(requestData);
                    var content = new System.Net.Http.StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    
                    var response = await client.PostAsync("http://civilx.ru/auth-api.php/api/check-plugin-group", content);
                    var responseContent = await response.Content.ReadAsStringAsync();
                    
                    if (response.IsSuccessStatusCode)
                    {
                        var result = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<Dictionary<string, object>>(responseContent);
                        var hasActiveSubscription = Convert.ToBoolean(result["has_active_subscription"]);
                        
                        if (hasActiveSubscription)
                        {
                            EnablePlugin();
                        }
                        else
                        {
                            DisablePlugin();
                        }
                    }
                    else
                    {
                        DisablePlugin();
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã –ø–ª–∞–≥–∏–Ω–∞: {ex.Message}");
                DisablePlugin();
            }
        }

        private void EnablePlugin()
        {
            // –ü–ª–∞–≥–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
            System.Diagnostics.Debug.WriteLine($"–ü–ª–∞–≥–∏–Ω {PLUGIN_GROUP} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
        }

        private void DisablePluginSync()
        {
            // –ü–ª–∞–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            MessageBox.Show(
                $"–ü–ª–∞–≥–∏–Ω {PLUGIN_GROUP} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É {PLUGIN_GROUP}.",
                "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞",
                MessageBoxButton.OK,
                MessageBoxImage.Warning
            );
            
            // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–ª–∞–≥–∏–Ω–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
            WriteToLogFile("‚ö†Ô∏è –ü–ª–∞–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
        }

        private void DisablePlugin()
        {
            // –ü–ª–∞–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            MessageBox.Show(
                $"–ü–ª–∞–≥–∏–Ω {PLUGIN_GROUP} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É {PLUGIN_GROUP}.",
                "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞",
                MessageBoxButton.OK,
                MessageBoxImage.Warning
            );
            
            // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–ª–∞–≥–∏–Ω–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
            WriteToLogFile("‚ö†Ô∏è –ü–ª–∞–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
        }

        #endregion

        protected override void OnClosed(EventArgs e)
        {
            try
            {
                System.Diagnostics.Debug.WriteLine("üîç MainWindow.OnClosed() - –ù–ê–ß–ê–õ–û");
                WriteDetailedLog("üîç MainWindow.OnClosed() - –ù–ê–ß–ê–õ–û");
                System.Diagnostics.Debug.WriteLine($"üîç MainWindow.OnClosed() - –ø—Ä–∏—á–∏–Ω–∞: {e?.ToString() ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}");
                WriteDetailedLog($"üîç MainWindow.OnClosed() - –ø—Ä–∏—á–∏–Ω–∞: {e?.ToString() ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}");
                
                // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤
                var stackTrace = new System.Diagnostics.StackTrace(true);
                System.Diagnostics.Debug.WriteLine($"üîç MainWindow.OnClosed() - StackTrace:");
                WriteDetailedLog($"üîç MainWindow.OnClosed() - StackTrace:");
                for (int i = 0; i < Math.Min(10, stackTrace.FrameCount); i++)
                {
                    var frame = stackTrace.GetFrame(i);
                    var frameInfo = $"  {i}: {frame.GetMethod()?.DeclaringType?.Name}.{frame.GetMethod()?.Name}";
                    System.Diagnostics.Debug.WriteLine(frameInfo);
                    WriteDetailedLog(frameInfo);
                }
                
                base.OnClosed(e);
                System.Diagnostics.Debug.WriteLine("üîç MainWindow.OnClosed() - –ó–ê–í–ï–†–®–ï–ù");
                WriteDetailedLog("üîç MainWindow.OnClosed() - –ó–ê–í–ï–†–®–ï–ù");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå MainWindow.OnClosed() - –û–®–ò–ë–ö–ê: {ex.Message}");
                System.Diagnostics.Debug.WriteLine($"‚ùå StackTrace: {ex.StackTrace}");
                WriteDetailedLog($"‚ùå MainWindow.OnClosed() - –û–®–ò–ë–ö–ê: {ex.Message}");
                WriteDetailedLog($"‚ùå StackTrace: {ex.StackTrace}");
            }
        }

        private void WriteToLogFile(string message)
        {
            try
            {
                string logPath = @"C:\Users\dimag\AppData\Roaming\CivilX\DataViewer\dataviewer_log.txt";
                string logMessage = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {message}";
                
                // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                string logDir = Path.GetDirectoryName(logPath);
                if (!Directory.Exists(logDir))
                {
                    Directory.CreateDirectory(logDir);
                }
                
                File.AppendAllText(logPath, logMessage + Environment.NewLine);
            }
            catch
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            }
        }

        public void WriteDetailedLog(string message)
        {
            try
            {
                if (!string.IsNullOrEmpty(_currentLogFilePath))
                {
                    var timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
                    var logEntry = $"[{timestamp}] {message}\n";
                    File.AppendAllText(_currentLogFilePath, logEntry, System.Text.Encoding.UTF8);
                }
            }
            catch (Exception ex)
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥: {ex.Message}");
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —É—Ä–æ–≤–Ω–µ Revit API
        /// </summary>
        private Autodesk.Revit.DB.ElementFilter CreateCategoryFilter(List<string> selectedCategories)
        {
            if (selectedCategories == null || selectedCategories.Count == 0)
            {
                return null; // –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            }

            var categoryFilters = new List<Autodesk.Revit.DB.ElementFilter>();
            var matchedCategories = new List<string>();
            var unmatchedCategories = new List<string>();

            var nonFilterableCategories = new List<string>();

            foreach (var categoryName in selectedCategories)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º–æ–π (view-—ç–ª–µ–º–µ–Ω—Ç—ã)
                if (IsNonFilterableCategory(categoryName))
                {
                    nonFilterableCategories.Add(categoryName);
                    WriteDetailedLog($"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{categoryName}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç API-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é (view-—ç–ª–µ–º–µ–Ω—Ç)");
                    continue;
                }

                var builtInCategory = GetBuiltInCategoryByName(categoryName);
                if (builtInCategory != Autodesk.Revit.DB.BuiltInCategory.INVALID)
                {
                    var categoryFilter = new Autodesk.Revit.DB.ElementCategoryFilter(builtInCategory);
                    categoryFilters.Add(categoryFilter);
                    matchedCategories.Add(categoryName);
                }
                else
                {
                    unmatchedCategories.Add(categoryName);
                }
            }

            WriteDetailedLog($"üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:");
            WriteDetailedLog($"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å BuiltInCategory: {matchedCategories.Count}");
            WriteDetailedLog($"  ‚Ä¢ –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {unmatchedCategories.Count}");
            WriteDetailedLog($"  ‚Ä¢ –ù–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (view-—ç–ª–µ–º–µ–Ω—Ç—ã): {nonFilterableCategories.Count}");

            if (unmatchedCategories.Count > 0)
            {
                WriteDetailedLog($"  ‚Ä¢ –ù–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {string.Join(", ", unmatchedCategories.Take(5))}");
                if (unmatchedCategories.Count > 5)
                {
                    WriteDetailedLog($"  ‚Ä¢ ... –∏ –µ—â–µ {unmatchedCategories.Count - 5} –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
                }
            }

            if (nonFilterableCategories.Count > 0)
            {
                WriteDetailedLog($"  ‚Ä¢ –ù–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {string.Join(", ", nonFilterableCategories)}");
            }

            if (categoryFilters.Count == 0)
            {
                return null; // –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            }
            else if (categoryFilters.Count == 1)
            {
                return categoryFilters[0]; // –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä
            }
            else
            {
                // –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –æ–±—ä–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ OR
                return new Autodesk.Revit.DB.LogicalOrFilter(categoryFilters);
            }
        }

        /// <summary>
        /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ BuiltInCategory
        /// </summary>
        private Autodesk.Revit.DB.BuiltInCategory GetBuiltInCategoryByName(string categoryName)
        {
            // –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ BuiltInCategory
            var categoryMappings = new Dictionary<string, Autodesk.Revit.DB.BuiltInCategory>(StringComparer.OrdinalIgnoreCase)
            {
                // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                {"–°—Ç–µ–Ω—ã", Autodesk.Revit.DB.BuiltInCategory.OST_Walls},
                {"–°—Ç–µ–Ω–∞", Autodesk.Revit.DB.BuiltInCategory.OST_Walls},
                {"Walls", Autodesk.Revit.DB.BuiltInCategory.OST_Walls},
                {"Wall", Autodesk.Revit.DB.BuiltInCategory.OST_Walls},
                
                {"–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏—è", Autodesk.Revit.DB.BuiltInCategory.OST_Floors},
                {"–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ", Autodesk.Revit.DB.BuiltInCategory.OST_Floors},
                {"Floors", Autodesk.Revit.DB.BuiltInCategory.OST_Floors},
                {"Floor", Autodesk.Revit.DB.BuiltInCategory.OST_Floors},
                
                {"–ö–æ–ª–æ–Ω–Ω—ã", Autodesk.Revit.DB.BuiltInCategory.OST_StructuralColumns},
                {"–ö–æ–ª–æ–Ω–Ω–∞", Autodesk.Revit.DB.BuiltInCategory.OST_StructuralColumns},
                {"Columns", Autodesk.Revit.DB.BuiltInCategory.OST_StructuralColumns},
                {"Column", Autodesk.Revit.DB.BuiltInCategory.OST_StructuralColumns},
                
                {"–ë–∞–ª–∫–∏", Autodesk.Revit.DB.BuiltInCategory.OST_StructuralFraming},
                {"–ë–∞–ª–∫–∞", Autodesk.Revit.DB.BuiltInCategory.OST_StructuralFraming},
                {"Beams", Autodesk.Revit.DB.BuiltInCategory.OST_StructuralFraming},
                {"Beam", Autodesk.Revit.DB.BuiltInCategory.OST_StructuralFraming},
                
                {"–î–≤–µ—Ä–∏", Autodesk.Revit.DB.BuiltInCategory.OST_Doors},
                {"–î–≤–µ—Ä—å", Autodesk.Revit.DB.BuiltInCategory.OST_Doors},
                {"Doors", Autodesk.Revit.DB.BuiltInCategory.OST_Doors},
                {"Door", Autodesk.Revit.DB.BuiltInCategory.OST_Doors},
                
                {"–û–∫–Ω–∞", Autodesk.Revit.DB.BuiltInCategory.OST_Windows},
                {"–û–∫–Ω–æ", Autodesk.Revit.DB.BuiltInCategory.OST_Windows},
                {"Windows", Autodesk.Revit.DB.BuiltInCategory.OST_Windows},
                {"Window", Autodesk.Revit.DB.BuiltInCategory.OST_Windows},
                
                {"–ü–æ—Ç–æ–ª–∫–∏", Autodesk.Revit.DB.BuiltInCategory.OST_Ceilings},
                {"–ü–æ—Ç–æ–ª–æ–∫", Autodesk.Revit.DB.BuiltInCategory.OST_Ceilings},
                {"Ceilings", Autodesk.Revit.DB.BuiltInCategory.OST_Ceilings},
                {"Ceiling", Autodesk.Revit.DB.BuiltInCategory.OST_Ceilings},
                
                {"–ö—Ä—ã—à–∏", Autodesk.Revit.DB.BuiltInCategory.OST_Roofs},
                {"–ö—Ä—ã—à–∞", Autodesk.Revit.DB.BuiltInCategory.OST_Roofs},
                {"Roofs", Autodesk.Revit.DB.BuiltInCategory.OST_Roofs},
                {"Roof", Autodesk.Revit.DB.BuiltInCategory.OST_Roofs},
                
                {"–õ–µ—Å—Ç–Ω–∏—Ü—ã", Autodesk.Revit.DB.BuiltInCategory.OST_Stairs},
                {"–õ–µ—Å—Ç–Ω–∏—Ü–∞", Autodesk.Revit.DB.BuiltInCategory.OST_Stairs},
                {"Stairs", Autodesk.Revit.DB.BuiltInCategory.OST_Stairs},
                {"Stair", Autodesk.Revit.DB.BuiltInCategory.OST_Stairs},
                
                {"–ü–∞–Ω–¥—É—Å—ã", Autodesk.Revit.DB.BuiltInCategory.OST_Ramps},
                {"–ü–∞–Ω–¥—É—Å", Autodesk.Revit.DB.BuiltInCategory.OST_Ramps},
                {"Ramps", Autodesk.Revit.DB.BuiltInCategory.OST_Ramps},
                {"Ramp", Autodesk.Revit.DB.BuiltInCategory.OST_Ramps},
                
                {"–ú–µ–±–µ–ª—å", Autodesk.Revit.DB.BuiltInCategory.OST_Furniture},
                {"Furniture", Autodesk.Revit.DB.BuiltInCategory.OST_Furniture},
                
                {"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", Autodesk.Revit.DB.BuiltInCategory.OST_PlumbingFixtures},
                {"Plumbing Fixtures", Autodesk.Revit.DB.BuiltInCategory.OST_PlumbingFixtures},
                
                {"–û—Å–≤–µ—â–µ–Ω–∏–µ", Autodesk.Revit.DB.BuiltInCategory.OST_LightingFixtures},
                {"Lighting Fixtures", Autodesk.Revit.DB.BuiltInCategory.OST_LightingFixtures},
                
                {"–ê–Ω—Ç—É—Ä–∞–∂", Autodesk.Revit.DB.BuiltInCategory.OST_Site},
                {"Site", Autodesk.Revit.DB.BuiltInCategory.OST_Site},
                
                {"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞", Autodesk.Revit.DB.BuiltInCategory.OST_Rooms},
                {"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", Autodesk.Revit.DB.BuiltInCategory.OST_Rooms},
                {"Rooms", Autodesk.Revit.DB.BuiltInCategory.OST_Rooms},
                {"Room", Autodesk.Revit.DB.BuiltInCategory.OST_Rooms},
                
                {"–ó–æ–Ω—ã", Autodesk.Revit.DB.BuiltInCategory.OST_Areas},
                {"–ó–æ–Ω–∞", Autodesk.Revit.DB.BuiltInCategory.OST_Areas},
                {"Areas", Autodesk.Revit.DB.BuiltInCategory.OST_Areas},
                {"Area", Autodesk.Revit.DB.BuiltInCategory.OST_Areas}
            };

            if (categoryMappings.TryGetValue(categoryName, out var builtInCategory))
            {
                return builtInCategory;
            }

            // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            foreach (var mapping in categoryMappings)
            {
                if (categoryName.IndexOf(mapping.Key, StringComparison.OrdinalIgnoreCase) >= 0 ||
                    mapping.Key.IndexOf(categoryName, StringComparison.OrdinalIgnoreCase) >= 0)
                {
                    return mapping.Value;
                }
            }

            return Autodesk.Revit.DB.BuiltInCategory.INVALID;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º–æ–π —á–µ—Ä–µ–∑ ElementCategoryFilter
        /// </summary>
        private bool IsNonFilterableCategory(string categoryName)
        {
            var nonFilterableCategories = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
            {
                "–õ–∏—Å—Ç—ã", "–õ–∏—Å—Ç", "Sheets", "Sheet",
                "–õ–∏–Ω–∏–∏", "–õ–∏–Ω–∏—è", "Lines", "Line", 
                "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", "Schedules", "Schedule",
                "–í–∏–¥—ã", "–í–∏–¥", "Views", "View",
                "–ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏", "–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è", "Annotations", "Annotation",
                "–†–∞–∑–º–µ—Ä—ã", "–†–∞–∑–º–µ—Ä", "Dimensions", "Dimension",
                "–¢–µ–∫—Å—Ç", "Text", "–¢–µ–∫—Å—Ç—ã", "Texts",
                "–ú–µ—Ç–∫–∏", "–ú–µ—Ç–∫–∞", "Tags", "Tag",
                "–°–∏–º–≤–æ–ª—ã", "–°–∏–º–≤–æ–ª", "Symbols", "Symbol"
            };

            return nonFilterableCategories.Contains(categoryName);
        }

        /// <summary>
        /// –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç Revit —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        /// </summary>
        private void SafeCloseDocument(Document document, string filePath)
        {
            WriteDetailedLog($"üîç SafeCloseDocument - –ù–ê–ß–ê–õ–û –¥–ª—è —Ñ–∞–π–ª–∞: {Path.GetFileName(filePath)}");
            WriteDetailedLog($"üîç SafeCloseDocument - Thread ID: {System.Threading.Thread.CurrentThread.ManagedThreadId}");
            
            if (document == null)
            {
                WriteDetailedLog("‚ö†Ô∏è SafeCloseDocument - –¥–æ–∫—É–º–µ–Ω—Ç null, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ");
                return;
            }

            WriteDetailedLog("üîç SafeCloseDocument - –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ null, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å");
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –µ—â–µ –æ—Ç–∫—Ä—ã—Ç
                WriteDetailedLog("üîç SafeCloseDocument - –ø—Ä–æ–≤–µ—Ä—è–µ–º IsValidObject");
                bool isValid = document.IsValidObject;
                WriteDetailedLog($"üîç SafeCloseDocument - IsValidObject = {isValid}");
                
                if (isValid)
                {
                    WriteDetailedLog("üîç SafeCloseDocument - –¥–æ–∫—É–º–µ–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å");
                    try
                    {
                        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π
                        WriteDetailedLog("üîç SafeCloseDocument - –≤—ã–∑—ã–≤–∞–µ–º document.Close(false)");
                        document.Close(false);
                        WriteDetailedLog("‚úÖ SafeCloseDocument - document.Close() –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                    }
                    catch (System.Runtime.InteropServices.SEHException sehEx)
                    {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SEHException –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã–∑–æ–≤–∞ Close()
                        WriteDetailedLog($"‚ùå SafeCloseDocument - SEHException –≤ document.Close(): {sehEx.Message}");
                        WriteDetailedLog($"‚ùå SafeCloseDocument - SEHException StackTrace: {sehEx.StackTrace}");
                        WriteDetailedLog("‚ö†Ô∏è SafeCloseDocument - SEHException –≤ document.Close(), –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º");
                        // –ù–µ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    }
                    catch (Exception ex)
                    {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                        WriteDetailedLog($"‚ùå SafeCloseDocument - Exception –≤ document.Close(): {ex.Message}");
                        WriteDetailedLog($"‚ùå SafeCloseDocument - Exception StackTrace: {ex.StackTrace}");
                        WriteDetailedLog("‚ö†Ô∏è SafeCloseDocument - Exception –≤ document.Close(), –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º");
                    }
                    WriteDetailedLog("‚úÖ SafeCloseDocument - –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
                }
                else
                {
                    WriteDetailedLog("‚ö†Ô∏è SafeCloseDocument - –¥–æ–∫—É–º–µ–Ω—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω");
                }
            }
            catch (System.Runtime.InteropServices.SEHException sehEx)
            {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SEHException (–≤–Ω–µ—à–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–∑–¥–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
                WriteDetailedLog($"‚ùå SafeCloseDocument - SEHException: {sehEx.Message}");
                WriteDetailedLog($"‚ùå SafeCloseDocument - SEHException StackTrace: {sehEx.StackTrace}");
                WriteDetailedLog($"‚ö†Ô∏è SEHException –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {sehEx.Message}");
                WriteToLogFile($"‚ö†Ô∏è SEHException –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {Path.GetFileName(filePath)}: {sehEx.Message}");
                WriteToLogFile($"‚ö†Ô∏è –≠—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å COM-–æ–±—ä–µ–∫—Ç–∞–º–∏ Revit");
                WriteToLogFile($"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã");
                WriteDetailedLog("üîç SafeCloseDocument - SEHException –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º");
            }
            catch (System.Runtime.InteropServices.COMException comEx)
            {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º COMException
                WriteDetailedLog($"‚ö†Ô∏è COMException –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {comEx.Message}");
                WriteToLogFile($"‚ö†Ô∏è COMException –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {Path.GetFileName(filePath)}: {comEx.Message}");
                WriteToLogFile($"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã");
            }
            catch (Exception ex)
            {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                WriteDetailedLog($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {ex.Message}");
                WriteToLogFile($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {Path.GetFileName(filePath)}: {ex.Message}");
                WriteToLogFile($"‚ö†Ô∏è –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {ex.GetType().Name}");
                WriteToLogFile($"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã");
                WriteDetailedLog("üîç SafeCloseDocument - –æ–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º");
            }
            
            WriteDetailedLog($"üîç SafeCloseDocument - –ó–ê–í–ï–†–®–ï–ù–ò–ï –¥–ª—è —Ñ–∞–π–ª–∞: {Path.GetFileName(filePath)}");
        }

        private bool CanReadFile(string filePath)
        {
            try
            {
                using (var fileStream = File.Open(filePath, FileMode.Open, FileAccess.Read, FileShare.Read))
                {
                    return true;
                }
            }
            catch
            {
                return false;
            }
        }

        // ExternalEvent –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤
        private Autodesk.Revit.UI.ExternalEvent _openDocumentEvent;
        private OpenDocumentRequest _openDocumentRequest;

        private void InitializeExternalEvent()
        {
            _openDocumentRequest = new OpenDocumentRequest();
            _openDocumentEvent = Autodesk.Revit.UI.ExternalEvent.Create(_openDocumentRequest);
        }

        private Autodesk.Revit.DB.Document OpenDocumentSafely(string filePath)
        {
            try
            {
                WriteToLogFile($"–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞: {filePath}");
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ExternalEvent –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                if (_openDocumentEvent == null)
                {
                    InitializeExternalEvent();
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                _openDocumentRequest.SetFilePath(filePath);
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ ExternalEvent
                var result = _openDocumentEvent.Raise();
                WriteToLogFile($"ExternalEvent.Raise() —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}");
                
                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (ExternalEvent –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
                System.Threading.Thread.Sleep(5000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 5 —Å–µ–∫—É–Ω–¥
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                var document = _openDocumentRequest.GetDocument();
                var exception = _openDocumentRequest.GetException();
                
                if (document != null)
                {
                    WriteToLogFile($"‚úì –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ ExternalEvent: {document.Title}");
                    return document;
                }
                else if (exception != null)
                {
                    WriteToLogFile($"‚ùå –û—à–∏–±–∫–∞ –≤ ExternalEvent: {exception.Message}");
                    throw new Exception($"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ ExternalEvent: {exception.Message}", exception);
                }
                else
                {
                    WriteToLogFile($"‚ùå ExternalEvent –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è, –Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç");
                    return null;
                }
            }
            catch (Exception ex)
            {
                WriteToLogFile($"‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ —É–∂–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
        /// </summary>
        /// <param name="allElementsData">–í—Å–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã</param>
        /// <param name="selectedCategories">–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</param>
        /// <returns>–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã</returns>
        private List<Models.RevitElementData> ApplyCategoryFilters(List<Models.RevitElementData> allElementsData, List<string> selectedCategories)
        {
            try
            {
                WriteToLogFile($"=== –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –§–ò–õ–¨–¢–†–û–í –ö–ê–¢–ï–ì–û–†–ò–ô ===");
                WriteToLogFile($"–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {allElementsData.Count}");
                WriteToLogFile($"–í—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {selectedCategories.Count}");
                
                if (selectedCategories.Count == 0)
                {
                    WriteToLogFile("‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã");
                    return allElementsData;
                }

                var filteredElements = new List<Models.RevitElementData>();
                
                foreach (var elementData in allElementsData)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                    if (selectedCategories.Contains(elementData.Category))
                    {
                        filteredElements.Add(elementData);
                    }
                }
                
                WriteToLogFile($"–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {filteredElements.Count}");
                WriteToLogFile($"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {((double)(allElementsData.Count - filteredElements.Count) / allElementsData.Count * 100):F1}%");
                
                return filteredElements;
            }
            catch (Exception ex)
            {
                WriteToLogFile($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {ex.Message}");
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                return allElementsData;
            }
        }

    }

    // –ö–ª–∞—Å—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ ExternalEvent
    public class OpenDocumentRequest : Autodesk.Revit.UI.IExternalEventHandler
    {
        private string _filePath;
        private Autodesk.Revit.DB.Document _document;
        private Exception _exception;

        public void SetFilePath(string filePath)
        {
            _filePath = filePath;
            _document = null;
            _exception = null;
        }

        public Autodesk.Revit.DB.Document GetDocument()
        {
            return _document;
        }

        public Exception GetException()
        {
            return _exception;
        }

        public void Execute(Autodesk.Revit.UI.UIApplication app)
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Revit
                var revitApp = app.Application;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
                var existingDoc = revitApp.Documents.Cast<Autodesk.Revit.DB.Document>()
                    .FirstOrDefault(d => d.PathName.Equals(_filePath, StringComparison.OrdinalIgnoreCase));
                
                if (existingDoc != null)
                {
                    _document = existingDoc;
                    return;
                }

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è
                _document = OpenModelWithOptimization(revitApp, _filePath);
                
                if (_document == null)
                {
                    throw new Exception("OpenDocumentFile –≤–µ—Ä–Ω—É–ª null");
                }
            }
            catch (Exception ex)
            {
                _exception = ex;
                _document = null;
            }
        }

        private Autodesk.Revit.DB.Document OpenModelWithOptimization(Autodesk.Revit.ApplicationServices.Application revitApp, string filePath)
        {
            try
            {
                // –ù–û–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                try
                {
                    return OpenWithMaximumOptimization(revitApp, filePath);
                }
                catch (Exception ex)
                {
                    // Fallback –∫ —É–ª—å—Ç—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    try
                    {
                        return OpenWithUltraOptimization(revitApp, filePath);
                    }
                    catch (Exception ex2)
                    {
                        // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–æ–≥–∏–∫–µ
                        return OpenWithStandardLogic(revitApp, filePath);
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–µ–ª–∏: {ex.Message}", ex);
            }
        }

        private Autodesk.Revit.DB.Document OpenWithMaximumOptimization(Autodesk.Revit.ApplicationServices.Application revitApp, string filePath)
        {
            try
            {
                // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ê–ì–†–ï–°–°–ò–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
                var openOptions = new Autodesk.Revit.DB.OpenOptions();
                openOptions.DetachFromCentralOption = Autodesk.Revit.DB.DetachFromCentralOption.DetachAndPreserveWorksets;
                openOptions.Audit = false; // –û—Ç–∫–ª—é—á–∞–µ–º –∞—É–¥–∏—Ç
                openOptions.AllowOpeningLocalByWrongUser = true;
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –í–°–ï —Ä–∞–±–æ—á–∏–µ –Ω–∞–±–æ—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                var worksetConfig = new Autodesk.Revit.DB.WorksetConfiguration(Autodesk.Revit.DB.WorksetConfigurationOption.CloseAllWorksets);
                openOptions.SetOpenWorksetsConfiguration(worksetConfig);
                
                var modelPath = Autodesk.Revit.DB.ModelPathUtils.ConvertUserVisiblePathToModelPath(filePath);
                var document = revitApp.OpenDocumentFile(modelPath, openOptions);
                
                if (document != null)
                {
                    return document;
                }
                
                throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏");
            }
            catch (Exception ex)
            {
                throw new Exception($"–û—à–∏–±–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {ex.Message}", ex);
            }
        }

        private Autodesk.Revit.DB.Document OpenWithUltraOptimization(Autodesk.Revit.ApplicationServices.Application revitApp, string filePath)
        {
            try
            {
                // –£–õ–¨–¢–†–ê –ê–ì–†–ï–°–°–ò–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò - —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤
                var openOptions = new Autodesk.Revit.DB.OpenOptions();
                openOptions.DetachFromCentralOption = Autodesk.Revit.DB.DetachFromCentralOption.DetachAndPreserveWorksets;
                openOptions.Audit = false; // –û—Ç–∫–ª—é—á–∞–µ–º –∞—É–¥–∏—Ç
                openOptions.AllowOpeningLocalByWrongUser = true;
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –í–°–ï —Ä–∞–±–æ—á–∏–µ –Ω–∞–±–æ—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                var worksetConfig = new Autodesk.Revit.DB.WorksetConfiguration(Autodesk.Revit.DB.WorksetConfigurationOption.CloseAllWorksets);
                openOptions.SetOpenWorksetsConfiguration(worksetConfig);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                openOptions.AllowOpeningLocalByWrongUser = true;
                
                var modelPath = Autodesk.Revit.DB.ModelPathUtils.ConvertUserVisiblePathToModelPath(filePath);
                var document = revitApp.OpenDocumentFile(modelPath, openOptions);
                
                if (document != null)
                {
                    return document;
                }
                
                throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å —É–ª—å—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏");
            }
            catch (Exception ex)
            {
                throw new Exception($"–û—à–∏–±–∫–∞ —É–ª—å—Ç—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {ex.Message}", ex);
            }
        }

        private Autodesk.Revit.DB.Document OpenWithExtremeOptimization(Autodesk.Revit.ApplicationServices.Application revitApp, string filePath)
        {
            try
            {
                // –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò - –¥–ª—è —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
                var openOptions = new Autodesk.Revit.DB.OpenOptions();
                openOptions.DetachFromCentralOption = Autodesk.Revit.DB.DetachFromCentralOption.DetachAndPreserveWorksets;
                openOptions.Audit = false; // –û—Ç–∫–ª—é—á–∞–µ–º –∞—É–¥–∏—Ç
                openOptions.AllowOpeningLocalByWrongUser = true;
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –í–°–ï —Ä–∞–±–æ—á–∏–µ –Ω–∞–±–æ—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                var worksetConfig = new Autodesk.Revit.DB.WorksetConfiguration(Autodesk.Revit.DB.WorksetConfigurationOption.CloseAllWorksets);
                openOptions.SetOpenWorksetsConfiguration(worksetConfig);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                openOptions.AllowOpeningLocalByWrongUser = true;
                
                var modelPath = Autodesk.Revit.DB.ModelPathUtils.ConvertUserVisiblePathToModelPath(filePath);
                var document = revitApp.OpenDocumentFile(modelPath, openOptions);
                
                if (document != null)
                {
                    return document;
                }
                
                throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏");
            }
            catch (Exception ex)
            {
                throw new Exception($"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {ex.Message}", ex);
            }
        }

        private Autodesk.Revit.DB.Document OpenWithStandardLogic(Autodesk.Revit.ApplicationServices.Application revitApp, string filePath)
        {
            try
            {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
                Autodesk.Revit.DB.Document tempDoc = null;
                bool isWorkshared = false;
                
                try
                {
                    // –ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞
                    tempDoc = revitApp.OpenDocumentFile(filePath);
                    if (tempDoc != null)
                    {
                        isWorkshared = tempDoc.IsWorkshared;
                        
                        // –ï—Å–ª–∏ —ç—Ç–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
                        if (isWorkshared)
                        {
                            tempDoc.Close(false);
                            return OpenWorksharedModel(revitApp, filePath);
                        }
                        else
                        {
                            // –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                            return tempDoc;
                        }
                    }
                }
                catch (Exception ex)
                {
                    // –ï—Å–ª–∏ –±—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —Å OpenOptions
                    if (tempDoc != null)
                    {
                        tempDoc.Close(false);
                    }
                    return OpenWithFallbackOptions(revitApp, filePath);
                }
                
                return tempDoc;
            }
            catch (Exception ex)
            {
                throw new Exception($"–û—à–∏–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏: {ex.Message}", ex);
            }
        }

        private Autodesk.Revit.DB.Document OpenWorksharedModel(Autodesk.Revit.ApplicationServices.Application revitApp, string filePath)
        {
            try
            {
                // –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                var openOptions = new Autodesk.Revit.DB.OpenOptions();
                openOptions.DetachFromCentralOption = Autodesk.Revit.DB.DetachFromCentralOption.DetachAndPreserveWorksets;
                openOptions.Audit = false; // –û—Ç–∫–ª—é—á–∞–µ–º –∞—É–¥–∏—Ç
                openOptions.AllowOpeningLocalByWrongUser = true;
                
                // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø —Ä–∞–±–æ—á–∏—Ö –Ω–∞–±–æ—Ä–æ–≤
                var worksetConfig = new Autodesk.Revit.DB.WorksetConfiguration(Autodesk.Revit.DB.WorksetConfigurationOption.CloseAllWorksets);
                openOptions.SetOpenWorksetsConfiguration(worksetConfig);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                openOptions.AllowOpeningLocalByWrongUser = true;
                
                var modelPath = Autodesk.Revit.DB.ModelPathUtils.ConvertUserVisiblePathToModelPath(filePath);
                var document = revitApp.OpenDocumentFile(modelPath, openOptions);
                
                if (document != null)
                {
                    return document;
                }
                
                // Fallback: –ø—Ä–æ–±—É–µ–º –±–µ–∑ –æ—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                return OpenWithFallbackOptions(revitApp, filePath);
            }
            catch (Exception ex)
            {
                // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –æ—Ç–∫—Ä—ã—Ç–∏—é
                return OpenWithFallbackOptions(revitApp, filePath);
            }
        }

        private Autodesk.Revit.DB.Document OpenWithFallbackOptions(Autodesk.Revit.ApplicationServices.Application revitApp, string filePath)
        {
            try
            {
                // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
                var openOptions = new Autodesk.Revit.DB.OpenOptions();
                openOptions.DetachFromCentralOption = Autodesk.Revit.DB.DetachFromCentralOption.DoNotDetach;
                openOptions.Audit = false; // –û—Ç–∫–ª—é—á–∞–µ–º –∞—É–¥–∏—Ç
                openOptions.AllowOpeningLocalByWrongUser = true;
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                openOptions.AllowOpeningLocalByWrongUser = true;
                
                var modelPath = Autodesk.Revit.DB.ModelPathUtils.ConvertUserVisiblePathToModelPath(filePath);
                var document = revitApp.OpenDocumentFile(modelPath, openOptions);
                
                if (document != null)
                {
                    return document;
                }
            }
            catch (Exception optionsEx)
            {
                try
                {
                    // –°–ø–æ—Å–æ–± 2: –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ
                    var document = revitApp.OpenDocumentFile(filePath);
                    if (document != null)
                    {
                        return document;
                    }
                }
                catch (Exception simpleEx)
                {
                    throw new Exception($"–í—Å–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏. OpenOptions: {optionsEx.Message}, –ü—Ä–æ—Å—Ç–æ–π: {simpleEx.Message}");
                }
            }
            
            return null;
        }

        public string GetName()
        {
            return "OpenDocumentRequest";
        }
    }

    // –ö–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
}