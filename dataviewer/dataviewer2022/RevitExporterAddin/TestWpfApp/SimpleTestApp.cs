using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace SimpleTestApp
{
    public class SimpleMainWindow : Window
    {
        private LogWindow _logWindow;
        private List<string> _projects = new List<string> { "–ü—Ä–æ–µ–∫—Ç 1", "–ü—Ä–æ–µ–∫—Ç 2", "–ü—Ä–æ–µ–∫—Ç 3" };
        private Dictionary<string, List<string>> _exports = new Dictionary<string, List<string>>
        {
            { "–ü—Ä–æ–µ–∫—Ç 1", new List<string> { "–í—ã–≥—Ä—É–∑–∫–∞ 1", "–í—ã–≥—Ä—É–∑–∫–∞ 2" } },
            { "–ü—Ä–æ–µ–∫—Ç 2", new List<string> { "–í—ã–≥—Ä—É–∑–∫–∞ A", "–í—ã–≥—Ä—É–∑–∫–∞ B" } },
            { "–ü—Ä–æ–µ–∫—Ç 3", new List<string> { "–í—ã–≥—Ä—É–∑–∫–∞ X", "–í—ã–≥—Ä—É–∑–∫–∞ Y" } }
        };

        public SimpleMainWindow()
        {
            Title = "CustomViewer - –û–ö–ù–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø";
            Width = 1200;
            Height = 700;
            WindowStartupLocation = WindowStartupLocation.CenterScreen;
            Background = new SolidColorBrush(Color.FromRgb(248, 249, 250));
            
            _logWindow = new LogWindow();
            _logWindow.Show();
            
            Log("=== SimpleMainWindow –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ===");
            CreateUI();
            Log("=== SimpleMainWindow –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω ===");
        }

        private void CreateUI()
        {
            try
            {
                Log("CreateUI: –Ω–∞—á–∞–ª–æ");
                var grid = new Grid();
                grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
                grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(5, GridUnitType.Pixel) });
                grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
                Log("CreateUI: Grid —Å–æ–∑–¥–∞–Ω —Å 3 –∫–æ–ª–æ–Ω–∫–∞–º–∏ (–ª–µ–≤–∞—è, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –ø—Ä–∞–≤–∞—è)");
                
                // –°–û–ó–î–ê–ï–ú –ö–û–ù–¢–ï–ô–ù–ï–† –î–õ–Ø –ü–†–û–ï–ö–¢–û–í
                var projectContainer = new Grid();
                Log("CreateUI: projectContainer —Å–æ–∑–¥–∞–Ω –±–µ–∑ ColumnDefinitions");
                
                                 var leftPanel = CreateProjectsPanel();
                 Log(string.Format("CreateUI: leftPanel —Å–æ–∑–¥–∞–Ω, —Ç–∏–ø: {0}", leftPanel.GetType().Name));
                 
                 var rightPanel = CreateInitialRightPanel();
                 Log(string.Format("CreateUI: rightPanel —Å–æ–∑–¥–∞–Ω, —Ç–∏–ø: {0}", rightPanel.GetType().Name));
                 
                 Log("CreateUI: –ø–∞–Ω–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã");
                
                                                  // –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ö–û–õ–û–ù–ö–ò –î–õ–Ø –ü–ê–ù–ï–õ–ï–ô
                 Grid.SetColumn(leftPanel, 0);
                 Grid.SetColumn(rightPanel, 2);
                 Log("CreateUI: –∫–æ–ª–æ–Ω–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–ª–µ–≤–∞—è=0, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å=1, –ø—Ä–∞–≤–∞—è=2)");
                 
                 // –î–û–ë–ê–í–õ–Ø–ï–ú –ü–ê–ù–ï–õ–ò –°–ù–ê–ß–ê–õ–ê
                 grid.Children.Add(leftPanel);
                 grid.Children.Add(rightPanel);
                 Log(string.Format("CreateUI: –ø–∞–Ω–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã, grid.Children.Count = {0}", grid.Children.Count));
                 
                 // –ü–û–¢–û–ú –î–û–ë–ê–í–õ–Ø–ï–ú GridSplitter –ú–ï–ñ–î–£ –ü–ê–ù–ï–õ–Ø–ú–ò (–≤ –∏–Ω–¥–µ–∫—Å 1)
                 var splitter = new GridSplitter
                 {
                     Width = 5,
                     Background = new SolidColorBrush(Color.FromRgb(200, 200, 200)),
                     HorizontalAlignment = HorizontalAlignment.Center,
                     VerticalAlignment = VerticalAlignment.Stretch,
                     Margin = new Thickness(0, 10, 0, 10)
                 };
                 Grid.SetColumn(splitter, 1);
                 grid.Children.Insert(1, splitter);
                 Log(string.Format("CreateUI: GridSplitter –≤—Å—Ç–∞–≤–ª–µ–Ω –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏ –≤ –∏–Ω–¥–µ–∫—Å 1, —Ç–∏–ø: {0}", splitter.GetType().Name));
                 
                 // –ü–†–û–í–ï–†–Ø–ï–ú —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                 Log(string.Format("CreateUI: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ grid.Children.Count = {0}", grid.Children.Count));
                 if (grid.Children.Count >= 3)
                 {
                     Log(string.Format("CreateUI: –ª–µ–≤–∞—è –ø–∞–Ω–µ–ª—å –≤ –∏–Ω–¥–µ–∫—Å–µ 0: {0}", grid.Children[0].GetType().Name));
                     Log(string.Format("CreateUI: GridSplitter –≤ –∏–Ω–¥–µ–∫—Å–µ 1: {0}", grid.Children[1].GetType().Name));
                     Log(string.Format("CreateUI: –ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –≤ –∏–Ω–¥–µ–∫—Å–µ 2: {0}", grid.Children[2].GetType().Name));
                 }
                
                Content = grid;
                Log("CreateUI: Content —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                Log("CreateUI: –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –≤ CreateUI: {0}", ex.Message));
            }
        }

        private Border CreateProjectsPanel()
        {
            try
            {
                Log("CreateProjectsPanel: –Ω–∞—á–∞–ª–æ");
                var border = new Border
                {
                    Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                    BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                    BorderThickness = new Thickness(1),
                    Margin = new Thickness(20, 20, 10, 20)
                };

                var stackPanel = new StackPanel { Margin = new Thickness(20) };
                
                var title = new TextBlock
                {
                    Text = "–ü—Ä–æ–µ–∫—Ç—ã",
                    FontSize = 24,
                    FontWeight = FontWeights.Bold,
                    Margin = new Thickness(0, 0, 0, 30),
                    Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                };
                stackPanel.Children.Add(title);
                Log("CreateProjectsPanel: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω");

                foreach (var project in _projects)
                {
                    var projectButton = new Button
                    {
                        Content = string.Format("üìÅ {0}", project),
                        Height = 50,
                        Margin = new Thickness(0, 0, 0, 15),
                        Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                        BorderThickness = new Thickness(1),
                        BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                        HorizontalAlignment = HorizontalAlignment.Stretch,
                        HorizontalContentAlignment = HorizontalAlignment.Left,
                        Padding = new Thickness(15, 0, 0, 0),
                        FontSize = 14
                    };
                    projectButton.Click += (s, e) => 
                    {
                        Log(string.Format("–ö–õ–ò–ö –ø–æ –ø—Ä–æ–µ–∫—Ç—É: {0}", project));
                        ShowProjectView(project);
                    };
                    stackPanel.Children.Add(projectButton);
                    Log(string.Format("CreateProjectsPanel: –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {0} –¥–æ–±–∞–≤–ª–µ–Ω–∞", project));
                }

                var addButton = new Button
                {
                    Content = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
                    Height = 50,
                    Margin = new Thickness(0, 20, 0, 0),
                    Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                    Foreground = Brushes.White,
                    BorderThickness = new Thickness(0),
                    FontSize = 14
                };
                addButton.Click += AddProject_Click;
                stackPanel.Children.Add(addButton);
                Log("CreateProjectsPanel: –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞");

                border.Child = stackPanel;
                Log("CreateProjectsPanel: –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
                return border;
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –≤ CreateProjectsPanel: {0}", ex.Message));
                return new Border();
            }
        }

        private Border CreateInitialRightPanel()
        {
            try
            {
                Log("CreateInitialRightPanel: –Ω–∞—á–∞–ª–æ");
                var border = new Border
                {
                    Background = new SolidColorBrush(Color.FromRgb(248, 249, 250))
                };

                var stackPanel = new StackPanel { Margin = new Thickness(30) };
                
                var title = new TextBlock
                {
                    Text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
                    FontSize = 24,
                    FontWeight = FontWeights.Bold,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    Margin = new Thickness(0, 0, 0, 20),
                    Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                };
                stackPanel.Children.Add(title);
                
                var info = new TextBlock
                {
                    Text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                    FontSize = 16,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    TextWrapping = TextWrapping.Wrap,
                    Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
                };
                stackPanel.Children.Add(info);
                
                border.Child = stackPanel;
                Log("CreateInitialRightPanel: –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
                return border;
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –≤ CreateInitialRightPanel: {0}", ex.Message));
                return new Border();
            }
        }

        private void ShowProjectView(string projectName)
        {
            try
            {
                Log(string.Format("=== ShowProjectView –ù–ê–ß–ê–õ–û –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {0} ===", projectName));
                
                var grid = Content as Grid;
                Log(string.Format("ShowProjectView: Content —Ç–∏–ø: {0}", Content != null ? Content.GetType().Name : "NULL"));
                Log(string.Format("ShowProjectView: grid —Ç–∏–ø: {0}", grid != null ? grid.GetType().Name : "NULL"));
                Log(string.Format("ShowProjectView: grid.Children.Count = {0}", grid != null ? grid.Children.Count : 0));
                
                if (grid != null && grid.Children.Count > 0)
                {
                    // –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç—å –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
                    var leftPanel = CreateExportsLeftPanel(projectName);
                    var rightPanel = CreateExportsRightPanel(projectName);
                    Log("ShowProjectView: –ø–∞–Ω–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã");
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞–Ω–µ–ª–µ–π
                    Grid.SetColumn(leftPanel, 0);
                    Grid.SetColumn(rightPanel, 2);
                    Log("ShowProjectView: –∫–æ–ª–æ–Ω–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–ª–µ–≤–∞—è=0, –ø—Ä–∞–≤–∞—è=2)");
                    
                                         // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞–Ω–µ–ª–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
                     // –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º GridSplitter –≤ –∏–Ω–¥–µ–∫—Å–µ 1!
                     var splitter = grid.Children[1]; // –°–æ—Ö—Ä–∞–Ω—è–µ–º GridSplitter
                     Log(string.Format("ShowProjectView: —Å–æ—Ö—Ä–∞–Ω—è–µ–º GridSplitter —Ç–∏–ø–∞: {0}", splitter.GetType().Name));
                     
                     // –£–¥–∞–ª—è–µ–º –ø–∞–Ω–µ–ª–∏, –Ω–æ –ù–ï —Ç—Ä–æ–≥–∞–µ–º GridSplitter
                     grid.Children.RemoveAt(2); // –£–¥–∞–ª—è–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
                     grid.Children.RemoveAt(0); // –£–¥–∞–ª—è–µ–º –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å
                     
                     // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è—è GridSplitter –≤ –∏–Ω–¥–µ–∫—Å–µ 1
                     grid.Children.Insert(0, leftPanel);   // –í—Å—Ç–∞–≤–ª—è–µ–º –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ (–∏–Ω–¥–µ–∫—Å 0)
                     grid.Children.Add(rightPanel);        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –≤ –∫–æ–Ω–µ—Ü (–∏–Ω–¥–µ–∫—Å 2)
                     
                     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ GridSplitter –æ—Å—Ç–∞–ª—Å—è –Ω–∞ –º–µ—Å—Ç–µ
                     if (grid.Children[1] != splitter)
                     {
                         Log("–û–®–ò–ë–ö–ê: GridSplitter –±—ã–ª –ø–æ—Ç–µ—Ä—è–Ω!");
                         // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º GridSplitter
                         grid.Children.RemoveAt(1);
                         grid.Children.Insert(1, splitter);
                         Grid.SetColumn(splitter, 1);
                         Log("ShowProjectView: GridSplitter –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                     }
                     else
                     {
                         Log("ShowProjectView: GridSplitter —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
                     }
                     
                                          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–Ω–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                     Log(string.Format("ShowProjectView: –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã grid.Children.Count = {0}", grid.Children.Count));
                     Log(string.Format("ShowProjectView: –ª–µ–≤–∞—è –ø–∞–Ω–µ–ª—å –≤ –∏–Ω–¥–µ–∫—Å–µ 0: {0}", grid.Children[0].GetType().Name));
                     Log(string.Format("ShowProjectView: GridSplitter –≤ –∏–Ω–¥–µ–∫—Å–µ 1: {0}", grid.Children[1].GetType().Name));
                     Log(string.Format("ShowProjectView: –ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –≤ –∏–Ω–¥–µ–∫—Å–µ 2: {0}", grid.Children[2].GetType().Name));
                     
                     Log("ShowProjectView: –ø–∞–Ω–µ–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º grid");
                     
                     // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú UI
                     Log("ShowProjectView: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI");
                     grid.InvalidateVisual();
                     grid.UpdateLayout();
                     this.InvalidateVisual();
                     this.UpdateLayout();
                     Log("ShowProjectView: UI –æ–±–Ω–æ–≤–ª–µ–Ω");
                     
                     Log(string.Format("=== ShowProjectView –ó–ê–í–ï–†–®–ï–ù –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {0} ===", projectName));
                }
                else
                {
                    Log("–û–®–ò–ë–ö–ê: grid –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç!");
                }
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–µ–∫—Ç–∞: {0}", ex.Message));
                Log(string.Format("–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {0}", ex.StackTrace));
            }
        }

        private Border CreateExportsLeftPanel(string projectName)
        {
            try
            {
                Log(string.Format("CreateExportsLeftPanel: –Ω–∞—á–∞–ª–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {0}", projectName));
                var border = new Border
                {
                    Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                    BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                    BorderThickness = new Thickness(1),
                    Margin = new Thickness(20, 20, 10, 20)
                };

                var stackPanel = new StackPanel { Margin = new Thickness(20) };
                
                var headerPanel = new StackPanel { Orientation = Orientation.Horizontal, Margin = new Thickness(0, 0, 0, 20) };
                
                var backButton = new Button
                {
                    Content = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    Height = 35,
                    Width = 80,
                    Background = new SolidColorBrush(Color.FromRgb(108, 117, 125)),
                    Foreground = Brushes.White,
                    BorderThickness = new Thickness(0),
                    FontSize = 12,
                    Margin = new Thickness(0, 0, 10, 0)
                };
                backButton.Click += (s, e) => ShowMainView();
                headerPanel.Children.Add(backButton);
                
                var title = new TextBlock
                {
                    Text = string.Format("–ü—Ä–æ–µ–∫—Ç: {0}", projectName),
                    FontSize = 20,
                    FontWeight = FontWeights.Bold,
                    VerticalAlignment = VerticalAlignment.Center,
                    Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                };
                headerPanel.Children.Add(title);
                stackPanel.Children.Add(headerPanel);

                var exports = _exports.ContainsKey(projectName) ? _exports[projectName] : new List<string>();
                foreach (var export in exports)
                {
                    var exportButton = new Button
                    {
                        Content = string.Format("üìä {0}", export),
                        Height = 45,
                        Margin = new Thickness(0, 0, 0, 10),
                        Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                        BorderThickness = new Thickness(1),
                        BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                        HorizontalAlignment = HorizontalAlignment.Stretch,
                        HorizontalContentAlignment = HorizontalAlignment.Left,
                        Padding = new Thickness(10, 0, 0, 0)
                    };
                    exportButton.Click += (s, e) => SelectExport(export);
                    stackPanel.Children.Add(exportButton);
                }
                
                var addButton = new Button
                {
                    Content = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã–≥—Ä—É–∑–∫—É",
                    Height = 40,
                    Margin = new Thickness(0, 20, 0, 0),
                    Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                    Foreground = Brushes.White,
                    BorderThickness = new Thickness(0),
                    FontSize = 14
                };
                addButton.Click += AddExport_Click;
                stackPanel.Children.Add(addButton);
                
                border.Child = stackPanel;
                Log(string.Format("CreateExportsLeftPanel: –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {0}", projectName));
                return border;
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –≤ CreateExportsLeftPanel: {0}", ex.Message));
                return new Border();
            }
        }
        
                 private Border CreateExportsRightPanel(string projectName)
         {
             try
             {
                 Log(string.Format("CreateExportsRightPanel: –Ω–∞—á–∞–ª–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {0}", projectName));
                 var border = new Border
                 {
                     Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                     BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                     BorderThickness = new Thickness(1),
                     Margin = new Thickness(0, 20, 20, 20)
                 };
                
                var stackPanel = new StackPanel { Margin = new Thickness(30) };
                
                var title = new TextBlock
                {
                    Text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–≥—Ä—É–∑–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
                    FontSize = 18,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    Margin = new Thickness(0, 0, 0, 20),
                    Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125))
                };
                stackPanel.Children.Add(title);
                
                var info = new TextBlock
                {
                    Text = "–í –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—ã–≥—Ä—É–∑–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ—ë –¥–µ—Ç–∞–ª–∏ –∏ –≤–∫–ª–∞–¥–∫–∏.",
                    FontSize = 14,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    TextWrapping = TextWrapping.Wrap,
                    Foreground = new SolidColorBrush(Color.FromRgb(73, 80, 87))
                };
                stackPanel.Children.Add(info);
                
                border.Child = stackPanel;
                Log(string.Format("CreateExportsRightPanel: –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {0}", projectName));
                return border;
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –≤ CreateExportsRightPanel: {0}", ex.Message));
                return new Border();
            }
        }
        
                private void SelectExport(string exportName)
        {
            try
            {
                Log(string.Format("SelectExport –≤—ã–∑–≤–∞–Ω –¥–ª—è: {0}", exportName));
                
                var grid = Content as Grid;
                Log(string.Format("SelectExport: grid.Children.Count = {0}", grid.Children.Count));
                
                if (grid != null && grid.Children.Count >= 3)
                {
                    // –¢–µ–ø–µ—Ä—å –ø–∞–Ω–µ–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ grid:
                    // grid.Children[0] = –ª–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
                    // grid.Children[1] = GridSplitter  
                    // grid.Children[2] = –ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
                    
                    var rightPanel = grid.Children[2] as Border;
                    if (rightPanel != null)
                    {
                        Log("–ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ");
                        
                        var exportView = CreateExportDetailView(exportName);
                        Log(string.Format("CreateExportDetailView —Å–æ–∑–¥–∞–Ω, —Ç–∏–ø: {0}", exportView.GetType().Name));
                        
                        if (exportView != null)
                        {
                            Log("exportView –Ω–µ null, –æ–±–Ω–æ–≤–ª—è–µ–º rightPanel.Child");
                            
                            var currentChild = rightPanel.Child;
                            Log(string.Format("–¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏: {0}", currentChild != null ? currentChild.GetType().Name : "NULL"));
                            
                            rightPanel.Child = exportView;
                            
                            if (rightPanel.Child == exportView)
                            {
                                Log("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
                                
                                // –î–ï–õ–ê–ï–ú –°–û–î–ï–†–ñ–ò–ú–û–ï –†–ê–°–¢–Ø–ì–ò–í–ê–ï–ú–´–ú –ù–ê –í–°–Æ –ü–†–ê–í–£–Æ –ß–ê–°–¢–¨
                                var fe = exportView as FrameworkElement;
                                if (fe != null)
                                {
                                    // –£–ë–ò–†–ê–ï–ú –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ï –†–ê–ó–ú–ï–†–´ - –ü–£–°–¢–¨ –†–ê–°–¢–Ø–ì–ò–í–ê–ï–¢–°–Ø
                                    fe.Width = double.NaN;  // Auto
                                    fe.Height = double.NaN; // Auto
                                    fe.HorizontalAlignment = HorizontalAlignment.Stretch;
                                    fe.VerticalAlignment = VerticalAlignment.Stretch;
                                    
                                    // –î–ï–õ–ê–ï–ú –°–û–î–ï–†–ñ–ò–ú–û–ï –°–ï–†–´–ú –ö–ê–ö –õ–ï–í–ê–Ø –ß–ê–°–¢–¨
                                    var panel = fe as Panel;
                                    if (panel != null)
                                    {
                                        panel.Background = new SolidColorBrush(Color.FromRgb(255, 255, 255));
                                    }
                                    
                                    Log("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–¥–µ–ª–∞–Ω–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º—ã–º –Ω–∞ –≤—Å—é –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å, —Ñ–æ–Ω –±–µ–ª—ã–π");
                                }
                                
                                Log(string.Format("rightPanel.Child —Ä–∞–∑–º–µ—Ä—ã: Width={0}, Height={1}, Visibility={2}", 
                                    rightPanel.Child.RenderSize.Width, rightPanel.Child.RenderSize.Height, rightPanel.Child.Visibility));
                                
                                rightPanel.InvalidateVisual();
                                rightPanel.UpdateLayout();
                                
                                Log(string.Format("–ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è rightPanel.Child —Ä–∞–∑–º–µ—Ä—ã: Width={0}, Height={1}", 
                                    rightPanel.Child.RenderSize.Width, rightPanel.Child.RenderSize.Height));
                                
                                Log("UI –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
                                
                                this.InvalidateVisual();
                                this.UpdateLayout();
                                Log("–í–°–ï –û–ö–ù–û –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
                            }
                            else
                            {
                                Log("–û–®–ò–ë–ö–ê: rightPanel.Child –Ω–µ —Ä–∞–≤–µ–Ω exportView –ø–æ—Å–ª–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è!");
                            }
                        }
                        else
                        {
                            Log("–û–®–ò–ë–ö–ê: exportView —Ä–∞–≤–µ–Ω null!");
                        }
                    }
                    else
                    {
                        Log("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –≤ grid.Children[2]");
                    }
                }
                else
                {
                    Log(string.Format("Grid –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –î–µ—Ç–µ–π: {0}", grid != null ? grid.Children.Count : 0));
                }
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—ã–≥—Ä—É–∑–∫–∏: {0}", ex.Message));
                Log(string.Format("–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {0}", ex.StackTrace));
            }
        }
        
        private UIElement CreateExportDetailView(string exportName)
        {
            try
            {
                Log(string.Format("CreateExportDetailView –≤—ã–∑–≤–∞–Ω –¥–ª—è: {0}", exportName));
                
                // –°–û–ó–î–ê–ï–ú Grid –í–ú–ï–°–¢–û StackPanel –î–õ–Ø –õ–£–ß–®–ï–ì–û –ö–û–ù–¢–†–û–õ–Ø
                var grid = new Grid();
                grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto }); // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto }); // –í–∫–ª–∞–¥–∫–∏
                grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto }); // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
                grid.RowDefinitions.Add(new RowDefinition { Height = new GridLength(1, GridUnitType.Star) }); // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏
                Log("Grid —Å–æ–∑–¥–∞–Ω —Å —Ä—è–¥–∞–º–∏");
                
                // –ó–ê–ì–û–õ–û–í–û–ö
                var title = new TextBlock
                {
                    Text = string.Format("–í—ã–≥—Ä—É–∑–∫–∞: {0}", exportName),
                    FontSize = 24,
                    FontWeight = FontWeights.Bold,
                    Margin = new Thickness(30, 30, 30, 20),
                    Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                };
                Grid.SetRow(title, 0);
                grid.Children.Add(title);
                Log("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Grid");
                
                                                  // –ü–ê–ù–ï–õ–¨ –í–ö–õ–ê–î–û–ö (–ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–û) + –ö–ù–û–ü–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –û–î–ù–û–ú –†–Ø–î–£
                 var tabsPanel = new StackPanel 
                 { 
                     Orientation = Orientation.Horizontal,
                     Margin = new Thickness(30, 0, 30, 20),
                     HorizontalAlignment = HorizontalAlignment.Stretch
                 };
                 Grid.SetRow(tabsPanel, 1);
                 
                 var tabs = new List<string> { "10.06", "15.07", "20.08" };
                 foreach (var tab in tabs)
                 {
                     var tabButton = new Button
                     {
                         Content = string.Format("üìã {0}", tab),
                         Height = 40,
                         Width = 80,
                         Margin = new Thickness(0, 0, 10, 0),
                         Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                         BorderThickness = new Thickness(1),
                         BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                         HorizontalAlignment = HorizontalAlignment.Left,
                         HorizontalContentAlignment = HorizontalAlignment.Center,
                         FontSize = 14
                     };
                     tabButton.Click += (s, e) => SelectTab(tab);
                     tabsPanel.Children.Add(tabButton);
                     Log(string.Format("–ö–Ω–æ–ø–∫–∞ –≤–∫–ª–∞–¥–∫–∏ {0} –¥–æ–±–∞–≤–ª–µ–Ω–∞", tab));
                 }
                 
                 // –ö–ù–û–ü–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í–ö–õ–ê–î–ö–ò –í –¢–û–ú –ñ–ï –†–Ø–î–£
                 var addTabButton = new Button
                 {
                     Content = "‚ûï",  // –¢–û–õ–¨–ö–û –ü–õ–Æ–°!
                     Height = 40,
                     Width = 40,      // –ö–í–ê–î–†–ê–¢–ù–ê–Ø –ö–ù–û–ü–ö–ê
                     Margin = new Thickness(0, 0, 0, 0),
                     Background = new SolidColorBrush(Color.FromRgb(40, 167, 69)),
                     Foreground = Brushes.White,
                     BorderThickness = new Thickness(0),
                     FontSize = 18,   // –ë–û–õ–¨–®–ï –ü–õ–Æ–°
                     HorizontalAlignment = HorizontalAlignment.Left,
                     HorizontalContentAlignment = HorizontalAlignment.Center
                 };
                 addTabButton.Click += AddTab_Click;
                 tabsPanel.Children.Add(addTabButton);
                 Log("–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä—è–¥ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏");
                 
                 grid.Children.Add(tabsPanel);
                 Log("–ü–∞–Ω–µ–ª—å –≤–∫–ª–∞–¥–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Grid");
                
                                 // –°–û–î–ï–†–ñ–ò–ú–û–ï –í–ö–õ–ê–î–ö–ò (–ü–û–î –í–ö–õ–ê–î–ö–ê–ú–ò)
                 var contentBorder = new Border
                 {
                     Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                     BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                     BorderThickness = new Thickness(1),
                     Margin = new Thickness(30, 0, 30, 30)
                 };
                 Grid.SetRow(contentBorder, 3);
                 
                 var contentPanel = new StackPanel 
                 { 
                     Margin = new Thickness(20),
                     HorizontalAlignment = HorizontalAlignment.Stretch
                 };
                 
                 var contentTitle = new TextBlock
                 {
                     Text = "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–≥—Ä—É–∑–∫–∏",
                     FontSize = 18,
                     FontWeight = FontWeights.SemiBold,
                     Margin = new Thickness(20, 20, 20, 15),
                     Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                 };
                 contentPanel.Children.Add(contentTitle);
                 
                 // –ò–°–•–û–î–ù–ê–Ø –ü–ê–ü–ö–ê –° –ú–û–î–ï–õ–Ø–ú–ò
                 var sourceFolderPanel = new StackPanel 
                 { 
                     Orientation = Orientation.Horizontal,
                     Margin = new Thickness(20, 0, 20, 15),
                     HorizontalAlignment = HorizontalAlignment.Stretch
                 };
                 
                 var sourceIcon = new TextBlock
                 {
                     Text = "üìÇ",
                     FontSize = 20,
                     VerticalAlignment = VerticalAlignment.Center,
                     Margin = new Thickness(0, 0, 10, 0)
                 };
                 sourceFolderPanel.Children.Add(sourceIcon);
                 
                 var sourceLabel = new TextBlock
                 {
                     Text = "–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏:",
                     FontSize = 14,
                     FontWeight = FontWeights.SemiBold,
                     VerticalAlignment = VerticalAlignment.Center,
                     Margin = new Thickness(0, 0, 10, 0),
                     Foreground = new SolidColorBrush(Color.FromRgb(73, 80, 87))
                 };
                 sourceFolderPanel.Children.Add(sourceLabel);
                 
                 var sourcePath = new TextBlock
                 {
                     Text = "C:\\Models\\Project1\\",
                     FontSize = 14,
                     VerticalAlignment = VerticalAlignment.Center,
                     FontFamily = new FontFamily("Consolas"),
                     Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                 };
                 sourceFolderPanel.Children.Add(sourcePath);
                 
                 contentPanel.Children.Add(sourceFolderPanel);
                 
                 // –ü–ê–ü–ö–ê –ö–£–î–ê –°–û–•–†–ê–ù–ï–ù–ê –í–ö–õ–ê–î–ö–ê
                 var outputFolderPanel = new StackPanel 
                 { 
                     Orientation = Orientation.Horizontal,
                     Margin = new Thickness(20, 0, 20, 15),
                     HorizontalAlignment = HorizontalAlignment.Stretch
                 };
                 
                 var outputIcon = new TextBlock
                 {
                     Text = "üìÅ",
                     FontSize = 20,
                     VerticalAlignment = VerticalAlignment.Center,
                     Margin = new Thickness(0, 0, 10, 0)
                 };
                 outputFolderPanel.Children.Add(outputIcon);
                 
                 var outputLabel = new TextBlock
                 {
                     Text = "–ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:",
                     FontSize = 14,
                     FontWeight = FontWeights.SemiBold,
                     VerticalAlignment = VerticalAlignment.Center,
                     Margin = new Thickness(0, 0, 10, 0),
                     Foreground = new SolidColorBrush(Color.FromRgb(73, 80, 87))
                 };
                 outputFolderPanel.Children.Add(outputLabel);
                 
                 var outputPath = new TextBlock
                 {
                     Text = "C:\\Projects\\Project1\\Export1\\10.06\\",
                     FontSize = 14,
                     VerticalAlignment = VerticalAlignment.Center,
                     FontFamily = new FontFamily("Consolas"),
                     Foreground = new SolidColorBrush(Color.FromRgb(33, 37, 41))
                 };
                 outputFolderPanel.Children.Add(outputPath);
                 
                 contentPanel.Children.Add(outputFolderPanel);
                 
                 // –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–¢–†–£–ö–¢–£–†–ï –ü–ê–ü–û–ö
                 var structureInfo = new TextBlock
                 {
                     Text = "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫: –ü—Ä–æ–µ–∫—Ç ‚Üí –í—ã–≥—Ä—É–∑–∫–∞ ‚Üí –í–∫–ª–∞–¥–∫–∞",
                     FontSize = 12,
                     TextWrapping = TextWrapping.Wrap,
                     Margin = new Thickness(20, 0, 20, 20),
                     Foreground = new SolidColorBrush(Color.FromRgb(108, 117, 125)),
                     FontStyle = FontStyles.Italic
                 };
                                  contentPanel.Children.Add(structureInfo);
                 
                 contentBorder.Child = contentPanel;
                 grid.Children.Add(contentBorder);
                Log("–ü–∞–Ω–µ–ª—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Grid");
                
                Log(string.Format("CreateExportDetailView –∑–∞–≤–µ—Ä—à–µ–Ω. Grid —Å–æ–¥–µ—Ä–∂–∏—Ç {0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", grid.Children.Count));
                return grid;
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –≤ CreateExportDetailView: {0}", ex.Message));
                return new TextBlock { Text = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è" };
            }
        }

        private void SelectTab(string tabName)
        {
            Log(string.Format("–í—ã–±—Ä–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞: {0}", tabName));
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏
        }

        private void AddProject_Click(object sender, RoutedEventArgs e)
        {
            Log("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç'");
            MessageBox.Show("–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void AddExport_Click(object sender, RoutedEventArgs e)
        {
            Log("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å –≤—ã–≥—Ä—É–∑–∫—É'");
            MessageBox.Show("–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", MessageBoxButton.OK, MessageBoxImage.Information);
        }

                 private void AddTab_Click(object sender, RoutedEventArgs e)
         {
             try
             {
                 Log("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥–∫—É'");
                 
                 // –ì–ï–ù–ï–†–ò–†–£–ï–ú –ù–û–í–û–ï –ò–ú–Ø –í–ö–õ–ê–î–ö–ò (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞)
                 var newTabName = DateTime.Now.ToString("dd.MM");
                 Log(string.Format("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É: {0}", newTabName));
                 
                 // –ù–ê–•–û–î–ò–ú –ü–ê–ù–ï–õ–¨ –í–ö–õ–ê–î–û–ö
                 var grid = Content as Grid;
                 if (grid != null && grid.Children.Count >= 3)
                 {
                     var rightPanel = grid.Children[2] as Border;
                     if (rightPanel != null && rightPanel.Child is Grid)
                     {
                         var exportGrid = rightPanel.Child as Grid;
                         if (exportGrid != null && exportGrid.Children.Count >= 2)
                         {
                             var tabsPanel = exportGrid.Children[1] as StackPanel;
                             if (tabsPanel != null)
                             {
                                 // –°–û–ó–î–ê–ï–ú –ù–û–í–£–Æ –ö–ù–û–ü–ö–£ –í–ö–õ–ê–î–ö–ò
                                 var newTabButton = new Button
                                 {
                                     Content = string.Format("üìã {0}", newTabName),
                                     Height = 40,
                                     Width = 80,
                                     Margin = new Thickness(0, 0, 10, 0),
                                     Background = new SolidColorBrush(Color.FromRgb(255, 255, 255)),
                                     BorderThickness = new Thickness(1),
                                     BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                                     HorizontalAlignment = HorizontalAlignment.Left,
                                     HorizontalContentAlignment = HorizontalAlignment.Center,
                                     FontSize = 14
                                 };
                                 newTabButton.Click += (s, args) => SelectTab(newTabName);
                                 
                                 // –í–°–¢–ê–í–õ–Ø–ï–ú –ü–ï–†–ï–î –ö–ù–û–ü–ö–û–ô –î–û–ë–ê–í–õ–ï–ù–ò–Ø (–ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º)
                                 var insertIndex = tabsPanel.Children.Count - 1;
                                 tabsPanel.Children.Insert(insertIndex, newTabButton);
                                 
                                 Log(string.Format("–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ {0} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏—é {1}", newTabName, insertIndex));
                                 Log(string.Format("–¢–µ–ø–µ—Ä—å –≤ –ø–∞–Ω–µ–ª–∏ –≤–∫–ª–∞–¥–æ–∫ {0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", tabsPanel.Children.Count));
                             }
                         }
                     }
                 }
                 
                 MessageBox.Show(string.Format("–í–∫–ª–∞–¥–∫–∞ '{0}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!", newTabName), "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
             }
             catch (Exception ex)
             {
                 Log(string.Format("–û–®–ò–ë–ö–ê –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏: {0}", ex.Message));
                 MessageBox.Show(string.Format("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏: {0}", ex.Message), "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
             }
         }

        private void ShowMainView()
        {
            try
            {
                Log("–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –≤–∏–¥—É");
                CreateUI();
            }
            catch (Exception ex)
            {
                Log(string.Format("–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É –≤–∏–¥—É: {0}", ex.Message));
            }
        }

        private void Log(string message)
        {
            if (_logWindow != null)
            {
                _logWindow.Log(message);
            }
        }
    }

    public class LogWindow : Window
    {
        private TextBox _logTextBox;
        private Button _copyButton;
        private Button _clearButton;

        public LogWindow()
        {
            Title = "–õ–æ–≥ –æ—Ç–ª–∞–¥–∫–∏ - CustomViewer";
            Width = 700;
            Height = 500;
            WindowStartupLocation = WindowStartupLocation.Manual;
            Left = 50;
            Top = 50;
            Background = new SolidColorBrush(Color.FromRgb(248, 249, 250));
            CreateUI();
        }

        private void CreateUI()
        {
            var grid = new Grid();
            grid.RowDefinitions.Add(new RowDefinition { Height = new GridLength(1, GridUnitType.Star) });
            grid.RowDefinitions.Add(new RowDefinition { Height = new GridLength(50) });

            _logTextBox = new TextBox
            {
                IsReadOnly = true,
                TextWrapping = TextWrapping.Wrap,
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                HorizontalScrollBarVisibility = ScrollBarVisibility.Auto,
                FontFamily = new FontFamily("Consolas"),
                FontSize = 11,
                Background = Brushes.White,
                BorderBrush = new SolidColorBrush(Color.FromRgb(233, 236, 239)),
                BorderThickness = new Thickness(1),
                Margin = new Thickness(10)
            };
            Grid.SetRow(_logTextBox, 0);
            grid.Children.Add(_logTextBox);

            var buttonPanel = new StackPanel
            {
                Orientation = Orientation.Horizontal,
                HorizontalAlignment = HorizontalAlignment.Right,
                Margin = new Thickness(10)
            };
            Grid.SetRow(buttonPanel, 1);

            _copyButton = new Button
            {
                Content = "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –ª–æ–≥",
                Width = 150,
                Height = 35,
                Background = new SolidColorBrush(Color.FromRgb(0, 123, 255)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 12,
                Margin = new Thickness(0, 0, 10, 0)
            };
            _copyButton.Click += CopyButton_Click;
            buttonPanel.Children.Add(_copyButton);

            _clearButton = new Button
            {
                Content = "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥",
                Width = 120,
                Height = 35,
                Background = new SolidColorBrush(Color.FromRgb(220, 53, 69)),
                Foreground = Brushes.White,
                BorderThickness = new Thickness(0),
                FontSize = 12
            };
            _clearButton.Click += ClearButton_Click;
            buttonPanel.Children.Add(_clearButton);

            grid.Children.Add(buttonPanel);
            Content = grid;
        }

        public void Log(string message)
        {
            var timestamp = string.Format("[{0:HH:mm:ss.fff}] ", DateTime.Now);
            var fullMessage = timestamp + message + Environment.NewLine;

            Dispatcher.Invoke(() =>
            {
                _logTextBox.AppendText(fullMessage);
                _logTextBox.ScrollToEnd();
            });
        }

        public void ClearLog()
        {
            Dispatcher.Invoke(() =>
            {
                _logTextBox.Clear();
            });
        }

        private void CopyButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Clipboard.SetText(_logTextBox.Text);
                MessageBox.Show("–í–µ—Å—å –ª–æ–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!", "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show(string.Format("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {0}", ex.Message), "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ClearButton_Click(object sender, RoutedEventArgs e)
        {
            _logTextBox.Clear();
        }
    }

    public class App : Application
    {
        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);
            var mainWindow = new SimpleMainWindow();
            mainWindow.Show();
        }
    }
    
    public class Program
    {
        [STAThread]
        public static void Main()
        {
            var app = new App();
            app.Run();
        }
    }
}
